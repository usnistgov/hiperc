# -*- coding: utf-8 -*-
#
# HiPerC documentation build configuration file, created by
# sphinx-quickstart on Mon Aug 28 17:03:03 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import glob
import os
import shutil
import subprocess
import sys
from recommonmark.parser import CommonMarkParser
from recommonmark.transform import AutoStructify

sys.path.insert(0, os.path.abspath(".."))

# readthedocs requires this tag
if os.environ.get("READTHEDOCS", None) == "True":
    subprocess.call("doxygen", shell=True)

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
needs_sphinx = "2.3"

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.graphviz",
    "sphinx.ext.mathjax",
    "sphinx.ext.todo",
    "breathe"
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_parsers = {".md": CommonMarkParser}
source_suffix = [".rst", ".md"]

# The master toctree document.
master_doc = "contents"

# General information about the project.
project = u"HiPerC"
copyright = u"2017, Trevor Keller"
author = u"Trevor Keller"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = u"0"
# The full version, including alpha/beta/rc tags.
release = u"0"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store", "README.md"]

# The reST default role (used for this markup: `text`) to use for all documents.
default_role = "cpp:any"

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

highlight_language = "c++"

primary_domain = "cpp"

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

html_show_copyright = False

# The theme to use for HTML and HTML Help pages. See the documentation for
# a list of builtin themes.
#
html_theme = "alabaster"

# Theme options are theme-specific and customize the look and feel of a theme
# further. For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    "**": [
        "about.html",
        "navigation.html",
        "relations.html",  # needs 'show_related': True theme option to display
        "searchbox.html",
        "donate.html",
    ]
}


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "HiPerCdoc"


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, "HiPerC.tex", u"HiPerC Documentation", u"Trevor Keller", "manual")
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "HiPerC", u"HiPerC Documentation", [author], 1)]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "HiPerC",
        u"HiPerC Documentation",
        author,
        "HiPerC",
        "Computer hardware benchmarks for materials scientists.",
        "Miscellaneous",
    )
]


# Copy Markdown files, after https://github.com/materialsinnovation/pymks/blob/master/doc/conf.py


def url_resolver(url):
    """Resolve url for both documentation and Github online.
    If the url is an IPython notebook links to the correct path.
    Args:
      url: the path to the link (not always a full url)
    Returns:
      a local url to either the documentation or the Github
    """
    if url[-6:] == ".ipynb":
        return url[4:-6] + ".html"
    else:
        return url


def setup(app):
    app.add_config_value(
        "recommonmark_config",
        {"url_resolver": url_resolver, "auto_toc_tree_section": "Contents"},
        True,
    )
    app.add_transform(AutoStructify)


rst_directory = "rst"
img_directory = os.path.join(rst_directory, "common-diffusion")

for directory in [rst_directory, img_directory]:
    if not os.path.exists(directory):
        os.makedirs(directory)

files_to_copy = (
    "README.rst",
    "LICENSE.md",
    "common-diffusion/diffusion.*.png",
    "HiPerC.png",
)

for fpath in files_to_copy:
    for fpath_glob in glob.glob(os.path.join("..", fpath)):
        fpath_glob_ = "/".join(fpath_glob.split("/")[1:])
        shutil.copy(fpath_glob, os.path.join(rst_directory, fpath_glob_))


# -- Options for Breathe output ---------------------------------------------

breathe_projects = {"HiPerC": "xml"}

breathe_default_project = "HiPerC"

# breathe_domain_by_extension = {
#    "h" : "c",
#    "c" : "c",
#    "cl" : "c",
#    "cu" : "cpp",
#    "cuh" : "cpp",
#    "cpp" : "cpp",
# }

# breathe_domain_by_file_pattern = {
#    "*/common-diffusion/*" : "c",
#    "*/cpu-tbb-diffusion/*" : "cpp",
#    "*/gpu-cuda-diffusion/*" : "cpp",
# }
