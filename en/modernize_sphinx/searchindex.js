Search.setIndex({"docnames": ["ADMINISTRATA", "API", "CHANGELOG", "CONTACT", "CREDITS", "DISCLAIMER", "EFFICIENCY", "EXAMPLES", "FAQ", "GIT", "GUIDELINES", "INSTALLATION", "LICENSE", "NIX-README", "PUBLICATIONS", "README", "SOLVERS", "USAGE", "VIEWERS", "VKML", "contents", "design", "external_definitions", "generated/examples", "generated/examples.benchmarking", "generated/examples.benchmarking.benchmarker", "generated/examples.benchmarking.size", "generated/examples.benchmarking.steps", "generated/examples.benchmarking.utils", "generated/examples.benchmarking.versions", "generated/examples.cahnHilliard", "generated/examples.cahnHilliard.mesh2D", "generated/examples.cahnHilliard.mesh2DCoupled", "generated/examples.cahnHilliard.mesh3D", "generated/examples.cahnHilliard.sphere", "generated/examples.cahnHilliard.tanh1D", "generated/examples.cahnHilliard.test", "generated/examples.chemotaxis", "generated/examples.chemotaxis.input", "generated/examples.chemotaxis.input2D", "generated/examples.chemotaxis.parameters", "generated/examples.chemotaxis.test", "generated/examples.convection", "generated/examples.convection.advection", "generated/examples.convection.advection.explicitUpwind", "generated/examples.convection.advection.implicitUpwind", "generated/examples.convection.advection.vanLeerUpwind", "generated/examples.convection.exponential1D", "generated/examples.convection.exponential1D.cylindricalMesh1D", "generated/examples.convection.exponential1D.cylindricalMesh1DNonUniform", "generated/examples.convection.exponential1D.mesh1D", "generated/examples.convection.exponential1D.tri2D", "generated/examples.convection.exponential1DBack", "generated/examples.convection.exponential1DBack.mesh1D", "generated/examples.convection.exponential1DSource", "generated/examples.convection.exponential1DSource.mesh1D", "generated/examples.convection.exponential1DSource.tri2D", "generated/examples.convection.exponential2D", "generated/examples.convection.exponential2D.cylindricalMesh2D", "generated/examples.convection.exponential2D.cylindricalMesh2DNonUniform", "generated/examples.convection.exponential2D.mesh2D", "generated/examples.convection.exponential2D.tri2D", "generated/examples.convection.peclet", "generated/examples.convection.powerLaw1D", "generated/examples.convection.powerLaw1D.mesh1D", "generated/examples.convection.powerLaw1D.tri2D", "generated/examples.convection.robin", "generated/examples.convection.source", "generated/examples.convection.test", "generated/examples.diffusion", "generated/examples.diffusion.anisotropy", "generated/examples.diffusion.circle", "generated/examples.diffusion.circleQuad", "generated/examples.diffusion.coupled", "generated/examples.diffusion.electrostatics", "generated/examples.diffusion.explicit", "generated/examples.diffusion.explicit.mesh1D", "generated/examples.diffusion.explicit.mixedelement", "generated/examples.diffusion.explicit.test", "generated/examples.diffusion.explicit.tri2D", "generated/examples.diffusion.mesh1D", "generated/examples.diffusion.mesh20x20", "generated/examples.diffusion.mesh20x20Coupled", "generated/examples.diffusion.nthOrder", "generated/examples.diffusion.nthOrder.input4thOrder1D", "generated/examples.diffusion.nthOrder.input4thOrder_line", "generated/examples.diffusion.nthOrder.test", "generated/examples.diffusion.steadyState", "generated/examples.diffusion.steadyState.mesh1D", "generated/examples.diffusion.steadyState.mesh1D.inputPeriodic", "generated/examples.diffusion.steadyState.mesh1D.tri2Dinput", "generated/examples.diffusion.steadyState.mesh20x20", "generated/examples.diffusion.steadyState.mesh20x20.gmshinput", "generated/examples.diffusion.steadyState.mesh20x20.isotropy", "generated/examples.diffusion.steadyState.mesh20x20.modifiedMeshInput", "generated/examples.diffusion.steadyState.mesh20x20.orthoerror", "generated/examples.diffusion.steadyState.mesh20x20.tri2Dinput", "generated/examples.diffusion.steadyState.mesh50x50", "generated/examples.diffusion.steadyState.mesh50x50.input", "generated/examples.diffusion.steadyState.mesh50x50.tri2Dinput", "generated/examples.diffusion.steadyState.otherMeshes", "generated/examples.diffusion.steadyState.otherMeshes.cubicalProblem", "generated/examples.diffusion.steadyState.otherMeshes.grid3Dinput", "generated/examples.diffusion.steadyState.otherMeshes.prism", "generated/examples.diffusion.steadyState.test", "generated/examples.diffusion.test", "generated/examples.diffusion.variable", "generated/examples.elphf", "generated/examples.elphf.diffusion", "generated/examples.elphf.diffusion.mesh1D", "generated/examples.elphf.diffusion.mesh1Ddimensional", "generated/examples.elphf.diffusion.mesh2D", "generated/examples.elphf.input", "generated/examples.elphf.phase", "generated/examples.elphf.phaseDiffusion", "generated/examples.elphf.poisson", "generated/examples.elphf.test", "generated/examples.flow", "generated/examples.flow.stokesCavity", "generated/examples.flow.test", "generated/examples.levelSet", "generated/examples.levelSet.advection", "generated/examples.levelSet.advection.circle", "generated/examples.levelSet.advection.mesh1D", "generated/examples.levelSet.advection.test", "generated/examples.levelSet.advection.trench", "generated/examples.levelSet.distanceFunction", "generated/examples.levelSet.distanceFunction.circle", "generated/examples.levelSet.distanceFunction.interior", "generated/examples.levelSet.distanceFunction.mesh1D", "generated/examples.levelSet.distanceFunction.square", "generated/examples.levelSet.distanceFunction.test", "generated/examples.levelSet.electroChem", "generated/examples.levelSet.electroChem.adsorbingSurfactantEquation", "generated/examples.levelSet.electroChem.adsorption", "generated/examples.levelSet.electroChem.gapFillDistanceVariable", "generated/examples.levelSet.electroChem.gapFillMesh", "generated/examples.levelSet.electroChem.gold", "generated/examples.levelSet.electroChem.howToWriteAScript", "generated/examples.levelSet.electroChem.leveler", "generated/examples.levelSet.electroChem.lines", "generated/examples.levelSet.electroChem.matplotlibSurfactantViewer", "generated/examples.levelSet.electroChem.mayaviSurfactantViewer", "generated/examples.levelSet.electroChem.metalIonDiffusionEquation", "generated/examples.levelSet.electroChem.simpleTrenchSystem", "generated/examples.levelSet.electroChem.surfactantBulkDiffusionEquation", "generated/examples.levelSet.electroChem.test", "generated/examples.levelSet.electroChem.trenchMesh", "generated/examples.levelSet.surfactant", "generated/examples.levelSet.surfactant.circle", "generated/examples.levelSet.surfactant.expandingCircle", "generated/examples.levelSet.surfactant.square", "generated/examples.levelSet.surfactant.test", "generated/examples.levelSet.test", "generated/examples.meshing", "generated/examples.meshing.gmshRefinement", "generated/examples.meshing.inputGrid2D", "generated/examples.meshing.sphere", "generated/examples.meshing.test", "generated/examples.parallel", "generated/examples.phase", "generated/examples.phase.anisotropy", "generated/examples.phase.anisotropyOLD", "generated/examples.phase.binary", "generated/examples.phase.binaryCoupled", "generated/examples.phase.impingement", "generated/examples.phase.impingement.mesh20x20", "generated/examples.phase.impingement.mesh40x1", "generated/examples.phase.impingement.test", "generated/examples.phase.missOrientation", "generated/examples.phase.missOrientation.circle", "generated/examples.phase.missOrientation.mesh1D", "generated/examples.phase.missOrientation.modCircle", "generated/examples.phase.missOrientation.test", "generated/examples.phase.polyxtal", "generated/examples.phase.polyxtalCoupled", "generated/examples.phase.quaternary", "generated/examples.phase.simple", "generated/examples.phase.symmetry", "generated/examples.phase.test", "generated/examples.reactiveWetting", "generated/examples.reactiveWetting.liquidVapor1D", "generated/examples.reactiveWetting.liquidVapor2D", "generated/examples.reactiveWetting.test", "generated/examples.riemann", "generated/examples.riemann.acoustics", "generated/examples.riemann.test", "generated/examples.test", "generated/examples.updating", "generated/examples.updating.update0_1to1_0", "generated/examples.updating.update1_0to2_0", "generated/examples.updating.update2_0to3_0", "generated/fipy", "generated/fipy.boundaryConditions", "generated/fipy.boundaryConditions.boundaryCondition", "generated/fipy.boundaryConditions.constraint", "generated/fipy.boundaryConditions.fixedFlux", "generated/fipy.boundaryConditions.fixedValue", "generated/fipy.boundaryConditions.nthOrderBoundaryCondition", "generated/fipy.boundaryConditions.test", "generated/fipy.matrices", "generated/fipy.matrices.offsetSparseMatrix", "generated/fipy.matrices.pysparseMatrix", "generated/fipy.matrices.scipyMatrix", "generated/fipy.matrices.sparseMatrix", "generated/fipy.matrices.test", "generated/fipy.matrices.trilinosMatrix", "generated/fipy.meshes", "generated/fipy.meshes.abstractMesh", "generated/fipy.meshes.builders", "generated/fipy.meshes.builders.abstractGridBuilder", "generated/fipy.meshes.builders.grid1DBuilder", "generated/fipy.meshes.builders.grid2DBuilder", "generated/fipy.meshes.builders.grid3DBuilder", "generated/fipy.meshes.builders.periodicGrid1DBuilder", "generated/fipy.meshes.builders.utilityClasses", "generated/fipy.meshes.cylindricalGrid1D", "generated/fipy.meshes.cylindricalGrid2D", "generated/fipy.meshes.cylindricalNonUniformGrid1D", "generated/fipy.meshes.cylindricalNonUniformGrid2D", "generated/fipy.meshes.cylindricalUniformGrid1D", "generated/fipy.meshes.cylindricalUniformGrid2D", "generated/fipy.meshes.factoryMeshes", "generated/fipy.meshes.gmshMesh", "generated/fipy.meshes.grid1D", "generated/fipy.meshes.grid2D", "generated/fipy.meshes.grid3D", "generated/fipy.meshes.mesh", "generated/fipy.meshes.mesh1D", "generated/fipy.meshes.mesh2D", "generated/fipy.meshes.nonUniformGrid1D", "generated/fipy.meshes.nonUniformGrid2D", "generated/fipy.meshes.nonUniformGrid3D", "generated/fipy.meshes.periodicGrid1D", "generated/fipy.meshes.periodicGrid2D", "generated/fipy.meshes.periodicGrid3D", "generated/fipy.meshes.representations", "generated/fipy.meshes.representations.abstractRepresentation", "generated/fipy.meshes.representations.gridRepresentation", "generated/fipy.meshes.representations.meshRepresentation", "generated/fipy.meshes.skewedGrid2D", "generated/fipy.meshes.sphericalNonUniformGrid1D", "generated/fipy.meshes.sphericalUniformGrid1D", "generated/fipy.meshes.test", "generated/fipy.meshes.topologies", "generated/fipy.meshes.topologies.abstractTopology", "generated/fipy.meshes.topologies.gridTopology", "generated/fipy.meshes.topologies.meshTopology", "generated/fipy.meshes.tri2D", "generated/fipy.meshes.uniformGrid", "generated/fipy.meshes.uniformGrid1D", "generated/fipy.meshes.uniformGrid2D", "generated/fipy.meshes.uniformGrid3D", "generated/fipy.solvers", "generated/fipy.solvers.pyAMG", "generated/fipy.solvers.pyAMG.linearCGSSolver", "generated/fipy.solvers.pyAMG.linearGMRESSolver", "generated/fipy.solvers.pyAMG.linearGeneralSolver", "generated/fipy.solvers.pyAMG.linearLUSolver", "generated/fipy.solvers.pyAMG.linearPCGSolver", "generated/fipy.solvers.pyAMG.preconditioners", "generated/fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner", "generated/fipy.solvers.pyamgx", "generated/fipy.solvers.pyamgx.aggregationAMGSolver", "generated/fipy.solvers.pyamgx.classicalAMGSolver", "generated/fipy.solvers.pyamgx.linearBiCGStabSolver", "generated/fipy.solvers.pyamgx.linearCGSolver", "generated/fipy.solvers.pyamgx.linearFGMRESSolver", "generated/fipy.solvers.pyamgx.linearGMRESSolver", "generated/fipy.solvers.pyamgx.linearLUSolver", "generated/fipy.solvers.pyamgx.preconditioners", "generated/fipy.solvers.pyamgx.preconditioners.preconditioners", "generated/fipy.solvers.pyamgx.pyAMGXSolver", "generated/fipy.solvers.pyamgx.smoothers", "generated/fipy.solvers.pyamgx.smoothers.smoothers", "generated/fipy.solvers.pysparse", "generated/fipy.solvers.pysparse.linearCGSSolver", "generated/fipy.solvers.pysparse.linearGMRESSolver", "generated/fipy.solvers.pysparse.linearJORSolver", "generated/fipy.solvers.pysparse.linearLUSolver", "generated/fipy.solvers.pysparse.linearPCGSolver", "generated/fipy.solvers.pysparse.preconditioners", "generated/fipy.solvers.pysparse.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.pysparse.preconditioners.preconditioner", "generated/fipy.solvers.pysparse.preconditioners.ssorPreconditioner", "generated/fipy.solvers.pysparse.pysparseSolver", "generated/fipy.solvers.pysparseMatrixSolver", "generated/fipy.solvers.scipy", "generated/fipy.solvers.scipy.linearBicgstabSolver", "generated/fipy.solvers.scipy.linearCGSSolver", "generated/fipy.solvers.scipy.linearGMRESSolver", "generated/fipy.solvers.scipy.linearLUSolver", "generated/fipy.solvers.scipy.linearPCGSolver", "generated/fipy.solvers.scipy.scipyKrylovSolver", "generated/fipy.solvers.scipy.scipySolver", "generated/fipy.solvers.solver", "generated/fipy.solvers.test", "generated/fipy.solvers.trilinos", "generated/fipy.solvers.trilinos.comms", "generated/fipy.solvers.trilinos.comms.epetraCommWrapper", "generated/fipy.solvers.trilinos.comms.serialEpetraCommWrapper", "generated/fipy.solvers.trilinos.linearBicgstabSolver", "generated/fipy.solvers.trilinos.linearCGSSolver", "generated/fipy.solvers.trilinos.linearGMRESSolver", "generated/fipy.solvers.trilinos.linearLUSolver", "generated/fipy.solvers.trilinos.linearPCGSolver", "generated/fipy.solvers.trilinos.preconditioners", "generated/fipy.solvers.trilinos.preconditioners.domDecompPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.icPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.preconditioner", "generated/fipy.solvers.trilinos.trilinosAztecOOSolver", "generated/fipy.solvers.trilinos.trilinosMLTest", "generated/fipy.solvers.trilinos.trilinosNonlinearSolver", "generated/fipy.solvers.trilinos.trilinosSolver", "generated/fipy.steppers", "generated/fipy.steppers.pidStepper", "generated/fipy.steppers.pseudoRKQSStepper", "generated/fipy.steppers.stepper", "generated/fipy.terms", "generated/fipy.terms.abstractBinaryTerm", "generated/fipy.terms.abstractConvectionTerm", "generated/fipy.terms.abstractDiffusionTerm", "generated/fipy.terms.abstractUpwindConvectionTerm", "generated/fipy.terms.advectionTerm", "generated/fipy.terms.asymmetricConvectionTerm", "generated/fipy.terms.binaryTerm", "generated/fipy.terms.cellTerm", "generated/fipy.terms.centralDiffConvectionTerm", "generated/fipy.terms.coupledBinaryTerm", "generated/fipy.terms.diffusionTerm", "generated/fipy.terms.diffusionTermCorrection", "generated/fipy.terms.diffusionTermNoCorrection", "generated/fipy.terms.explicitDiffusionTerm", "generated/fipy.terms.explicitSourceTerm", "generated/fipy.terms.explicitUpwindConvectionTerm", "generated/fipy.terms.exponentialConvectionTerm", "generated/fipy.terms.faceTerm", "generated/fipy.terms.firstOrderAdvectionTerm", "generated/fipy.terms.hybridConvectionTerm", "generated/fipy.terms.implicitDiffusionTerm", "generated/fipy.terms.implicitSourceTerm", "generated/fipy.terms.nonDiffusionTerm", "generated/fipy.terms.powerLawConvectionTerm", "generated/fipy.terms.residualTerm", "generated/fipy.terms.sourceTerm", "generated/fipy.terms.term", "generated/fipy.terms.test", "generated/fipy.terms.transientTerm", "generated/fipy.terms.unaryTerm", "generated/fipy.terms.upwindConvectionTerm", "generated/fipy.terms.vanLeerConvectionTerm", "generated/fipy.testFiPy", "generated/fipy.tests", "generated/fipy.tests.doctestPlus", "generated/fipy.tests.lateImportTest", "generated/fipy.tests.test", "generated/fipy.tests.testProgram", "generated/fipy.tools", "generated/fipy.tools.comms", "generated/fipy.tools.comms.commWrapper", "generated/fipy.tools.comms.dummyComm", "generated/fipy.tools.debug", "generated/fipy.tools.decorators", "generated/fipy.tools.dimensions", "generated/fipy.tools.dimensions.DictWithDefault", "generated/fipy.tools.dimensions.NumberDict", "generated/fipy.tools.dimensions.physicalField", "generated/fipy.tools.dump", "generated/fipy.tools.inline", "generated/fipy.tools.logging", "generated/fipy.tools.numerix", "generated/fipy.tools.parser", "generated/fipy.tools.sharedtempfile", "generated/fipy.tools.test", "generated/fipy.tools.vector", "generated/fipy.tools.version", "generated/fipy.tools.vitals", "generated/fipy.variables", "generated/fipy.variables.addOverFacesVariable", "generated/fipy.variables.arithmeticCellToFaceVariable", "generated/fipy.variables.betaNoiseVariable", "generated/fipy.variables.binaryOperatorVariable", "generated/fipy.variables.cellToFaceVariable", "generated/fipy.variables.cellVariable", "generated/fipy.variables.constant", "generated/fipy.variables.constraintMask", "generated/fipy.variables.coupledCellVariable", "generated/fipy.variables.distanceVariable", "generated/fipy.variables.exponentialNoiseVariable", "generated/fipy.variables.faceGradContributionsVariable", "generated/fipy.variables.faceGradVariable", "generated/fipy.variables.faceVariable", "generated/fipy.variables.gammaNoiseVariable", "generated/fipy.variables.gaussCellGradVariable", "generated/fipy.variables.gaussianNoiseVariable", "generated/fipy.variables.harmonicCellToFaceVariable", "generated/fipy.variables.histogramVariable", "generated/fipy.variables.interfaceAreaVariable", "generated/fipy.variables.interfaceFlagVariable", "generated/fipy.variables.leastSquaresCellGradVariable", "generated/fipy.variables.levelSetDiffusionVariable", "generated/fipy.variables.meshVariable", "generated/fipy.variables.minmodCellToFaceVariable", "generated/fipy.variables.modCellGradVariable", "generated/fipy.variables.modCellToFaceVariable", "generated/fipy.variables.modFaceGradVariable", "generated/fipy.variables.modPhysicalField", "generated/fipy.variables.modularVariable", "generated/fipy.variables.noiseVariable", "generated/fipy.variables.operatorVariable", "generated/fipy.variables.scharfetterGummelFaceVariable", "generated/fipy.variables.surfactantConvectionVariable", "generated/fipy.variables.surfactantVariable", "generated/fipy.variables.test", "generated/fipy.variables.unaryOperatorVariable", "generated/fipy.variables.uniformNoiseVariable", "generated/fipy.variables.variable", "generated/fipy.viewers", "generated/fipy.viewers.matplotlibViewer", "generated/fipy.viewers.mayaviViewer", "generated/fipy.viewers.mayaviViewer.mayaviClient", "generated/fipy.viewers.mayaviViewer.test", "generated/fipy.viewers.multiViewer", "generated/fipy.viewers.test", "generated/fipy.viewers.testinteractive", "generated/fipy.viewers.tsvViewer", "generated/fipy.viewers.viewer", "generated/fipy.viewers.vtkViewer", "generated/fipy.viewers.vtkViewer.test", "generated/fipy.viewers.vtkViewer.vtkCellViewer", "generated/fipy.viewers.vtkViewer.vtkFaceViewer", "generated/fipy.viewers.vtkViewer.vtkViewer", "glossary", "introduction", "manual", "numerical/discret", "numerical/equation", "numerical/index", "numerical/scheme", "references", "tutorial/generated/package", "tutorial/generated/package.subpackage", "tutorial/generated/package.subpackage.base", "tutorial/generated/package.subpackage.object", "tutorial/index"], "filenames": ["ADMINISTRATA.rst", "API.rst", "CHANGELOG.rst", "CONTACT.rst", "CREDITS.rst", "DISCLAIMER.rst", "EFFICIENCY.rst", "EXAMPLES.rst", "FAQ.rst", "GIT.rst", "GUIDELINES.rst", "INSTALLATION.rst", "LICENSE.rst", "NIX-README.rst", "PUBLICATIONS.rst", "README.rst", "SOLVERS.rst", "USAGE.rst", "VIEWERS.rst", "VKML.rst", "contents.rst", "design.rst", "external_definitions.rst", "generated/examples.rst", "generated/examples.benchmarking.rst", "generated/examples.benchmarking.benchmarker.rst", "generated/examples.benchmarking.size.rst", "generated/examples.benchmarking.steps.rst", "generated/examples.benchmarking.utils.rst", "generated/examples.benchmarking.versions.rst", "generated/examples.cahnHilliard.rst", "generated/examples.cahnHilliard.mesh2D.rst", "generated/examples.cahnHilliard.mesh2DCoupled.rst", "generated/examples.cahnHilliard.mesh3D.rst", "generated/examples.cahnHilliard.sphere.rst", "generated/examples.cahnHilliard.tanh1D.rst", "generated/examples.cahnHilliard.test.rst", "generated/examples.chemotaxis.rst", "generated/examples.chemotaxis.input.rst", "generated/examples.chemotaxis.input2D.rst", "generated/examples.chemotaxis.parameters.rst", "generated/examples.chemotaxis.test.rst", "generated/examples.convection.rst", "generated/examples.convection.advection.rst", "generated/examples.convection.advection.explicitUpwind.rst", "generated/examples.convection.advection.implicitUpwind.rst", "generated/examples.convection.advection.vanLeerUpwind.rst", "generated/examples.convection.exponential1D.rst", "generated/examples.convection.exponential1D.cylindricalMesh1D.rst", "generated/examples.convection.exponential1D.cylindricalMesh1DNonUniform.rst", "generated/examples.convection.exponential1D.mesh1D.rst", "generated/examples.convection.exponential1D.tri2D.rst", "generated/examples.convection.exponential1DBack.rst", "generated/examples.convection.exponential1DBack.mesh1D.rst", "generated/examples.convection.exponential1DSource.rst", "generated/examples.convection.exponential1DSource.mesh1D.rst", "generated/examples.convection.exponential1DSource.tri2D.rst", "generated/examples.convection.exponential2D.rst", "generated/examples.convection.exponential2D.cylindricalMesh2D.rst", "generated/examples.convection.exponential2D.cylindricalMesh2DNonUniform.rst", "generated/examples.convection.exponential2D.mesh2D.rst", "generated/examples.convection.exponential2D.tri2D.rst", "generated/examples.convection.peclet.rst", "generated/examples.convection.powerLaw1D.rst", "generated/examples.convection.powerLaw1D.mesh1D.rst", "generated/examples.convection.powerLaw1D.tri2D.rst", "generated/examples.convection.robin.rst", "generated/examples.convection.source.rst", "generated/examples.convection.test.rst", "generated/examples.diffusion.rst", "generated/examples.diffusion.anisotropy.rst", "generated/examples.diffusion.circle.rst", "generated/examples.diffusion.circleQuad.rst", "generated/examples.diffusion.coupled.rst", "generated/examples.diffusion.electrostatics.rst", "generated/examples.diffusion.explicit.rst", "generated/examples.diffusion.explicit.mesh1D.rst", "generated/examples.diffusion.explicit.mixedelement.rst", "generated/examples.diffusion.explicit.test.rst", "generated/examples.diffusion.explicit.tri2D.rst", "generated/examples.diffusion.mesh1D.rst", "generated/examples.diffusion.mesh20x20.rst", "generated/examples.diffusion.mesh20x20Coupled.rst", "generated/examples.diffusion.nthOrder.rst", "generated/examples.diffusion.nthOrder.input4thOrder1D.rst", "generated/examples.diffusion.nthOrder.input4thOrder_line.rst", "generated/examples.diffusion.nthOrder.test.rst", "generated/examples.diffusion.steadyState.rst", "generated/examples.diffusion.steadyState.mesh1D.rst", "generated/examples.diffusion.steadyState.mesh1D.inputPeriodic.rst", "generated/examples.diffusion.steadyState.mesh1D.tri2Dinput.rst", "generated/examples.diffusion.steadyState.mesh20x20.rst", "generated/examples.diffusion.steadyState.mesh20x20.gmshinput.rst", "generated/examples.diffusion.steadyState.mesh20x20.isotropy.rst", "generated/examples.diffusion.steadyState.mesh20x20.modifiedMeshInput.rst", "generated/examples.diffusion.steadyState.mesh20x20.orthoerror.rst", "generated/examples.diffusion.steadyState.mesh20x20.tri2Dinput.rst", "generated/examples.diffusion.steadyState.mesh50x50.rst", "generated/examples.diffusion.steadyState.mesh50x50.input.rst", "generated/examples.diffusion.steadyState.mesh50x50.tri2Dinput.rst", "generated/examples.diffusion.steadyState.otherMeshes.rst", "generated/examples.diffusion.steadyState.otherMeshes.cubicalProblem.rst", "generated/examples.diffusion.steadyState.otherMeshes.grid3Dinput.rst", "generated/examples.diffusion.steadyState.otherMeshes.prism.rst", "generated/examples.diffusion.steadyState.test.rst", "generated/examples.diffusion.test.rst", "generated/examples.diffusion.variable.rst", "generated/examples.elphf.rst", "generated/examples.elphf.diffusion.rst", "generated/examples.elphf.diffusion.mesh1D.rst", "generated/examples.elphf.diffusion.mesh1Ddimensional.rst", "generated/examples.elphf.diffusion.mesh2D.rst", "generated/examples.elphf.input.rst", "generated/examples.elphf.phase.rst", "generated/examples.elphf.phaseDiffusion.rst", "generated/examples.elphf.poisson.rst", "generated/examples.elphf.test.rst", "generated/examples.flow.rst", "generated/examples.flow.stokesCavity.rst", "generated/examples.flow.test.rst", "generated/examples.levelSet.rst", "generated/examples.levelSet.advection.rst", "generated/examples.levelSet.advection.circle.rst", "generated/examples.levelSet.advection.mesh1D.rst", "generated/examples.levelSet.advection.test.rst", "generated/examples.levelSet.advection.trench.rst", "generated/examples.levelSet.distanceFunction.rst", "generated/examples.levelSet.distanceFunction.circle.rst", "generated/examples.levelSet.distanceFunction.interior.rst", "generated/examples.levelSet.distanceFunction.mesh1D.rst", "generated/examples.levelSet.distanceFunction.square.rst", "generated/examples.levelSet.distanceFunction.test.rst", "generated/examples.levelSet.electroChem.rst", "generated/examples.levelSet.electroChem.adsorbingSurfactantEquation.rst", "generated/examples.levelSet.electroChem.adsorption.rst", "generated/examples.levelSet.electroChem.gapFillDistanceVariable.rst", "generated/examples.levelSet.electroChem.gapFillMesh.rst", "generated/examples.levelSet.electroChem.gold.rst", "generated/examples.levelSet.electroChem.howToWriteAScript.rst", "generated/examples.levelSet.electroChem.leveler.rst", "generated/examples.levelSet.electroChem.lines.rst", "generated/examples.levelSet.electroChem.matplotlibSurfactantViewer.rst", "generated/examples.levelSet.electroChem.mayaviSurfactantViewer.rst", "generated/examples.levelSet.electroChem.metalIonDiffusionEquation.rst", "generated/examples.levelSet.electroChem.simpleTrenchSystem.rst", "generated/examples.levelSet.electroChem.surfactantBulkDiffusionEquation.rst", "generated/examples.levelSet.electroChem.test.rst", "generated/examples.levelSet.electroChem.trenchMesh.rst", "generated/examples.levelSet.surfactant.rst", "generated/examples.levelSet.surfactant.circle.rst", "generated/examples.levelSet.surfactant.expandingCircle.rst", "generated/examples.levelSet.surfactant.square.rst", "generated/examples.levelSet.surfactant.test.rst", "generated/examples.levelSet.test.rst", "generated/examples.meshing.rst", "generated/examples.meshing.gmshRefinement.rst", "generated/examples.meshing.inputGrid2D.rst", "generated/examples.meshing.sphere.rst", "generated/examples.meshing.test.rst", "generated/examples.parallel.rst", "generated/examples.phase.rst", "generated/examples.phase.anisotropy.rst", "generated/examples.phase.anisotropyOLD.rst", "generated/examples.phase.binary.rst", "generated/examples.phase.binaryCoupled.rst", "generated/examples.phase.impingement.rst", "generated/examples.phase.impingement.mesh20x20.rst", "generated/examples.phase.impingement.mesh40x1.rst", "generated/examples.phase.impingement.test.rst", "generated/examples.phase.missOrientation.rst", "generated/examples.phase.missOrientation.circle.rst", "generated/examples.phase.missOrientation.mesh1D.rst", "generated/examples.phase.missOrientation.modCircle.rst", "generated/examples.phase.missOrientation.test.rst", "generated/examples.phase.polyxtal.rst", "generated/examples.phase.polyxtalCoupled.rst", "generated/examples.phase.quaternary.rst", "generated/examples.phase.simple.rst", "generated/examples.phase.symmetry.rst", "generated/examples.phase.test.rst", "generated/examples.reactiveWetting.rst", "generated/examples.reactiveWetting.liquidVapor1D.rst", "generated/examples.reactiveWetting.liquidVapor2D.rst", "generated/examples.reactiveWetting.test.rst", "generated/examples.riemann.rst", "generated/examples.riemann.acoustics.rst", "generated/examples.riemann.test.rst", "generated/examples.test.rst", "generated/examples.updating.rst", "generated/examples.updating.update0_1to1_0.rst", "generated/examples.updating.update1_0to2_0.rst", "generated/examples.updating.update2_0to3_0.rst", "generated/fipy.rst", "generated/fipy.boundaryConditions.rst", "generated/fipy.boundaryConditions.boundaryCondition.rst", "generated/fipy.boundaryConditions.constraint.rst", "generated/fipy.boundaryConditions.fixedFlux.rst", "generated/fipy.boundaryConditions.fixedValue.rst", "generated/fipy.boundaryConditions.nthOrderBoundaryCondition.rst", "generated/fipy.boundaryConditions.test.rst", "generated/fipy.matrices.rst", "generated/fipy.matrices.offsetSparseMatrix.rst", "generated/fipy.matrices.pysparseMatrix.rst", "generated/fipy.matrices.scipyMatrix.rst", "generated/fipy.matrices.sparseMatrix.rst", "generated/fipy.matrices.test.rst", "generated/fipy.matrices.trilinosMatrix.rst", "generated/fipy.meshes.rst", "generated/fipy.meshes.abstractMesh.rst", "generated/fipy.meshes.builders.rst", "generated/fipy.meshes.builders.abstractGridBuilder.rst", "generated/fipy.meshes.builders.grid1DBuilder.rst", "generated/fipy.meshes.builders.grid2DBuilder.rst", "generated/fipy.meshes.builders.grid3DBuilder.rst", "generated/fipy.meshes.builders.periodicGrid1DBuilder.rst", "generated/fipy.meshes.builders.utilityClasses.rst", "generated/fipy.meshes.cylindricalGrid1D.rst", "generated/fipy.meshes.cylindricalGrid2D.rst", "generated/fipy.meshes.cylindricalNonUniformGrid1D.rst", "generated/fipy.meshes.cylindricalNonUniformGrid2D.rst", "generated/fipy.meshes.cylindricalUniformGrid1D.rst", "generated/fipy.meshes.cylindricalUniformGrid2D.rst", "generated/fipy.meshes.factoryMeshes.rst", "generated/fipy.meshes.gmshMesh.rst", "generated/fipy.meshes.grid1D.rst", "generated/fipy.meshes.grid2D.rst", "generated/fipy.meshes.grid3D.rst", "generated/fipy.meshes.mesh.rst", "generated/fipy.meshes.mesh1D.rst", "generated/fipy.meshes.mesh2D.rst", "generated/fipy.meshes.nonUniformGrid1D.rst", "generated/fipy.meshes.nonUniformGrid2D.rst", "generated/fipy.meshes.nonUniformGrid3D.rst", "generated/fipy.meshes.periodicGrid1D.rst", "generated/fipy.meshes.periodicGrid2D.rst", "generated/fipy.meshes.periodicGrid3D.rst", "generated/fipy.meshes.representations.rst", "generated/fipy.meshes.representations.abstractRepresentation.rst", "generated/fipy.meshes.representations.gridRepresentation.rst", "generated/fipy.meshes.representations.meshRepresentation.rst", "generated/fipy.meshes.skewedGrid2D.rst", "generated/fipy.meshes.sphericalNonUniformGrid1D.rst", "generated/fipy.meshes.sphericalUniformGrid1D.rst", "generated/fipy.meshes.test.rst", "generated/fipy.meshes.topologies.rst", "generated/fipy.meshes.topologies.abstractTopology.rst", "generated/fipy.meshes.topologies.gridTopology.rst", "generated/fipy.meshes.topologies.meshTopology.rst", "generated/fipy.meshes.tri2D.rst", "generated/fipy.meshes.uniformGrid.rst", "generated/fipy.meshes.uniformGrid1D.rst", "generated/fipy.meshes.uniformGrid2D.rst", "generated/fipy.meshes.uniformGrid3D.rst", "generated/fipy.solvers.rst", "generated/fipy.solvers.pyAMG.rst", "generated/fipy.solvers.pyAMG.linearCGSSolver.rst", "generated/fipy.solvers.pyAMG.linearGMRESSolver.rst", "generated/fipy.solvers.pyAMG.linearGeneralSolver.rst", "generated/fipy.solvers.pyAMG.linearLUSolver.rst", "generated/fipy.solvers.pyAMG.linearPCGSolver.rst", "generated/fipy.solvers.pyAMG.preconditioners.rst", "generated/fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner.rst", "generated/fipy.solvers.pyamgx.rst", "generated/fipy.solvers.pyamgx.aggregationAMGSolver.rst", "generated/fipy.solvers.pyamgx.classicalAMGSolver.rst", "generated/fipy.solvers.pyamgx.linearBiCGStabSolver.rst", "generated/fipy.solvers.pyamgx.linearCGSolver.rst", "generated/fipy.solvers.pyamgx.linearFGMRESSolver.rst", "generated/fipy.solvers.pyamgx.linearGMRESSolver.rst", "generated/fipy.solvers.pyamgx.linearLUSolver.rst", "generated/fipy.solvers.pyamgx.preconditioners.rst", "generated/fipy.solvers.pyamgx.preconditioners.preconditioners.rst", "generated/fipy.solvers.pyamgx.pyAMGXSolver.rst", "generated/fipy.solvers.pyamgx.smoothers.rst", "generated/fipy.solvers.pyamgx.smoothers.smoothers.rst", "generated/fipy.solvers.pysparse.rst", "generated/fipy.solvers.pysparse.linearCGSSolver.rst", "generated/fipy.solvers.pysparse.linearGMRESSolver.rst", "generated/fipy.solvers.pysparse.linearJORSolver.rst", "generated/fipy.solvers.pysparse.linearLUSolver.rst", "generated/fipy.solvers.pysparse.linearPCGSolver.rst", "generated/fipy.solvers.pysparse.preconditioners.rst", "generated/fipy.solvers.pysparse.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.pysparse.preconditioners.preconditioner.rst", "generated/fipy.solvers.pysparse.preconditioners.ssorPreconditioner.rst", "generated/fipy.solvers.pysparse.pysparseSolver.rst", "generated/fipy.solvers.pysparseMatrixSolver.rst", "generated/fipy.solvers.scipy.rst", "generated/fipy.solvers.scipy.linearBicgstabSolver.rst", "generated/fipy.solvers.scipy.linearCGSSolver.rst", "generated/fipy.solvers.scipy.linearGMRESSolver.rst", "generated/fipy.solvers.scipy.linearLUSolver.rst", "generated/fipy.solvers.scipy.linearPCGSolver.rst", "generated/fipy.solvers.scipy.scipyKrylovSolver.rst", "generated/fipy.solvers.scipy.scipySolver.rst", "generated/fipy.solvers.solver.rst", "generated/fipy.solvers.test.rst", "generated/fipy.solvers.trilinos.rst", "generated/fipy.solvers.trilinos.comms.rst", "generated/fipy.solvers.trilinos.comms.epetraCommWrapper.rst", "generated/fipy.solvers.trilinos.comms.serialEpetraCommWrapper.rst", "generated/fipy.solvers.trilinos.linearBicgstabSolver.rst", "generated/fipy.solvers.trilinos.linearCGSSolver.rst", "generated/fipy.solvers.trilinos.linearGMRESSolver.rst", "generated/fipy.solvers.trilinos.linearLUSolver.rst", "generated/fipy.solvers.trilinos.linearPCGSolver.rst", "generated/fipy.solvers.trilinos.preconditioners.rst", "generated/fipy.solvers.trilinos.preconditioners.domDecompPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.icPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.preconditioner.rst", "generated/fipy.solvers.trilinos.trilinosAztecOOSolver.rst", "generated/fipy.solvers.trilinos.trilinosMLTest.rst", "generated/fipy.solvers.trilinos.trilinosNonlinearSolver.rst", "generated/fipy.solvers.trilinos.trilinosSolver.rst", "generated/fipy.steppers.rst", "generated/fipy.steppers.pidStepper.rst", "generated/fipy.steppers.pseudoRKQSStepper.rst", "generated/fipy.steppers.stepper.rst", "generated/fipy.terms.rst", "generated/fipy.terms.abstractBinaryTerm.rst", "generated/fipy.terms.abstractConvectionTerm.rst", "generated/fipy.terms.abstractDiffusionTerm.rst", "generated/fipy.terms.abstractUpwindConvectionTerm.rst", "generated/fipy.terms.advectionTerm.rst", "generated/fipy.terms.asymmetricConvectionTerm.rst", "generated/fipy.terms.binaryTerm.rst", "generated/fipy.terms.cellTerm.rst", "generated/fipy.terms.centralDiffConvectionTerm.rst", "generated/fipy.terms.coupledBinaryTerm.rst", "generated/fipy.terms.diffusionTerm.rst", "generated/fipy.terms.diffusionTermCorrection.rst", "generated/fipy.terms.diffusionTermNoCorrection.rst", "generated/fipy.terms.explicitDiffusionTerm.rst", "generated/fipy.terms.explicitSourceTerm.rst", "generated/fipy.terms.explicitUpwindConvectionTerm.rst", "generated/fipy.terms.exponentialConvectionTerm.rst", "generated/fipy.terms.faceTerm.rst", "generated/fipy.terms.firstOrderAdvectionTerm.rst", "generated/fipy.terms.hybridConvectionTerm.rst", "generated/fipy.terms.implicitDiffusionTerm.rst", "generated/fipy.terms.implicitSourceTerm.rst", "generated/fipy.terms.nonDiffusionTerm.rst", "generated/fipy.terms.powerLawConvectionTerm.rst", "generated/fipy.terms.residualTerm.rst", "generated/fipy.terms.sourceTerm.rst", "generated/fipy.terms.term.rst", "generated/fipy.terms.test.rst", "generated/fipy.terms.transientTerm.rst", "generated/fipy.terms.unaryTerm.rst", "generated/fipy.terms.upwindConvectionTerm.rst", "generated/fipy.terms.vanLeerConvectionTerm.rst", "generated/fipy.testFiPy.rst", "generated/fipy.tests.rst", "generated/fipy.tests.doctestPlus.rst", "generated/fipy.tests.lateImportTest.rst", "generated/fipy.tests.test.rst", "generated/fipy.tests.testProgram.rst", "generated/fipy.tools.rst", "generated/fipy.tools.comms.rst", "generated/fipy.tools.comms.commWrapper.rst", "generated/fipy.tools.comms.dummyComm.rst", "generated/fipy.tools.debug.rst", "generated/fipy.tools.decorators.rst", "generated/fipy.tools.dimensions.rst", "generated/fipy.tools.dimensions.DictWithDefault.rst", "generated/fipy.tools.dimensions.NumberDict.rst", "generated/fipy.tools.dimensions.physicalField.rst", "generated/fipy.tools.dump.rst", "generated/fipy.tools.inline.rst", "generated/fipy.tools.logging.rst", "generated/fipy.tools.numerix.rst", "generated/fipy.tools.parser.rst", "generated/fipy.tools.sharedtempfile.rst", "generated/fipy.tools.test.rst", "generated/fipy.tools.vector.rst", "generated/fipy.tools.version.rst", "generated/fipy.tools.vitals.rst", "generated/fipy.variables.rst", "generated/fipy.variables.addOverFacesVariable.rst", "generated/fipy.variables.arithmeticCellToFaceVariable.rst", "generated/fipy.variables.betaNoiseVariable.rst", "generated/fipy.variables.binaryOperatorVariable.rst", "generated/fipy.variables.cellToFaceVariable.rst", "generated/fipy.variables.cellVariable.rst", "generated/fipy.variables.constant.rst", "generated/fipy.variables.constraintMask.rst", "generated/fipy.variables.coupledCellVariable.rst", "generated/fipy.variables.distanceVariable.rst", "generated/fipy.variables.exponentialNoiseVariable.rst", "generated/fipy.variables.faceGradContributionsVariable.rst", "generated/fipy.variables.faceGradVariable.rst", "generated/fipy.variables.faceVariable.rst", "generated/fipy.variables.gammaNoiseVariable.rst", "generated/fipy.variables.gaussCellGradVariable.rst", "generated/fipy.variables.gaussianNoiseVariable.rst", "generated/fipy.variables.harmonicCellToFaceVariable.rst", "generated/fipy.variables.histogramVariable.rst", "generated/fipy.variables.interfaceAreaVariable.rst", "generated/fipy.variables.interfaceFlagVariable.rst", "generated/fipy.variables.leastSquaresCellGradVariable.rst", "generated/fipy.variables.levelSetDiffusionVariable.rst", "generated/fipy.variables.meshVariable.rst", "generated/fipy.variables.minmodCellToFaceVariable.rst", "generated/fipy.variables.modCellGradVariable.rst", "generated/fipy.variables.modCellToFaceVariable.rst", "generated/fipy.variables.modFaceGradVariable.rst", "generated/fipy.variables.modPhysicalField.rst", "generated/fipy.variables.modularVariable.rst", "generated/fipy.variables.noiseVariable.rst", "generated/fipy.variables.operatorVariable.rst", "generated/fipy.variables.scharfetterGummelFaceVariable.rst", "generated/fipy.variables.surfactantConvectionVariable.rst", "generated/fipy.variables.surfactantVariable.rst", "generated/fipy.variables.test.rst", "generated/fipy.variables.unaryOperatorVariable.rst", "generated/fipy.variables.uniformNoiseVariable.rst", "generated/fipy.variables.variable.rst", "generated/fipy.viewers.rst", "generated/fipy.viewers.matplotlibViewer.rst", "generated/fipy.viewers.mayaviViewer.rst", "generated/fipy.viewers.mayaviViewer.mayaviClient.rst", "generated/fipy.viewers.mayaviViewer.test.rst", "generated/fipy.viewers.multiViewer.rst", "generated/fipy.viewers.test.rst", "generated/fipy.viewers.testinteractive.rst", "generated/fipy.viewers.tsvViewer.rst", "generated/fipy.viewers.viewer.rst", "generated/fipy.viewers.vtkViewer.rst", "generated/fipy.viewers.vtkViewer.test.rst", "generated/fipy.viewers.vtkViewer.vtkCellViewer.rst", "generated/fipy.viewers.vtkViewer.vtkFaceViewer.rst", "generated/fipy.viewers.vtkViewer.vtkViewer.rst", "glossary.rst", "introduction.rst", "manual.rst", "numerical/discret.rst", "numerical/equation.rst", "numerical/index.rst", "numerical/scheme.rst", "references.rst", "tutorial/generated/package.rst", "tutorial/generated/package.subpackage.rst", "tutorial/generated/package.subpackage.base.rst", "tutorial/generated/package.subpackage.object.rst", "tutorial/index.rst"], "titles": ["Git practices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fipy</span></code> Package Documentation", "Change Log", "Contact", "Contributors", "Disclaimer", "Efficiency", "Examples", "Frequently Asked Questions", "Git usage", "Development Guidelines", "Installation", "Terms of Use", "Nix Installation", "Publications", "Overview", "Solvers", "Using FiPy", "Viewers", "Virtual Kinetics of Materials Laboratory", "FiPy Contents", "Design and Implementation", "External Command-line Flags", "examples", "examples.benchmarking", "examples.benchmarking.benchmarker", "examples.benchmarking.size", "examples.benchmarking.steps", "examples.benchmarking.utils", "examples.benchmarking.versions", "examples.cahnHilliard", "examples.cahnHilliard.mesh2D", "examples.cahnHilliard.mesh2DCoupled", "examples.cahnHilliard.mesh3D", "examples.cahnHilliard.sphere", "examples.cahnHilliard.tanh1D", "examples.cahnHilliard.test", "examples.chemotaxis", "examples.chemotaxis.input", "examples.chemotaxis.input2D", "examples.chemotaxis.parameters", "examples.chemotaxis.test", "examples.convection", "examples.convection.advection", "examples.convection.advection.explicitUpwind", "examples.convection.advection.implicitUpwind", "examples.convection.advection.vanLeerUpwind", "examples.convection.exponential1D", "examples.convection.exponential1D.cylindricalMesh1D", "examples.convection.exponential1D.cylindricalMesh1DNonUniform", "examples.convection.exponential1D.mesh1D", "examples.convection.exponential1D.tri2D", "examples.convection.exponential1DBack", "examples.convection.exponential1DBack.mesh1D", "examples.convection.exponential1DSource", "examples.convection.exponential1DSource.mesh1D", "examples.convection.exponential1DSource.tri2D", "examples.convection.exponential2D", "examples.convection.exponential2D.cylindricalMesh2D", "examples.convection.exponential2D.cylindricalMesh2DNonUniform", "examples.convection.exponential2D.mesh2D", "examples.convection.exponential2D.tri2D", "examples.convection.peclet", "examples.convection.powerLaw1D", "examples.convection.powerLaw1D.mesh1D", "examples.convection.powerLaw1D.tri2D", "examples.convection.robin", "examples.convection.source", "examples.convection.test", "examples.diffusion", "examples.diffusion.anisotropy", "examples.diffusion.circle", "examples.diffusion.circleQuad", "examples.diffusion.coupled", "examples.diffusion.electrostatics", "examples.diffusion.explicit", "examples.diffusion.explicit.mesh1D", "examples.diffusion.explicit.mixedelement", "examples.diffusion.explicit.test", "examples.diffusion.explicit.tri2D", "examples.diffusion.mesh1D", "examples.diffusion.mesh20x20", "examples.diffusion.mesh20x20Coupled", "examples.diffusion.nthOrder", "examples.diffusion.nthOrder.input4thOrder1D", "examples.diffusion.nthOrder.input4thOrder_line", "examples.diffusion.nthOrder.test", "examples.diffusion.steadyState", "examples.diffusion.steadyState.mesh1D", "examples.diffusion.steadyState.mesh1D.inputPeriodic", "examples.diffusion.steadyState.mesh1D.tri2Dinput", "examples.diffusion.steadyState.mesh20x20", "examples.diffusion.steadyState.mesh20x20.gmshinput", "examples.diffusion.steadyState.mesh20x20.isotropy", "examples.diffusion.steadyState.mesh20x20.modifiedMeshInput", "examples.diffusion.steadyState.mesh20x20.orthoerror", "examples.diffusion.steadyState.mesh20x20.tri2Dinput", "examples.diffusion.steadyState.mesh50x50", "examples.diffusion.steadyState.mesh50x50.input", "examples.diffusion.steadyState.mesh50x50.tri2Dinput", "examples.diffusion.steadyState.otherMeshes", "examples.diffusion.steadyState.otherMeshes.cubicalProblem", "examples.diffusion.steadyState.otherMeshes.grid3Dinput", "examples.diffusion.steadyState.otherMeshes.prism", "examples.diffusion.steadyState.test", "examples.diffusion.test", "examples.diffusion.variable", "examples.elphf", "examples.elphf.diffusion", "examples.elphf.diffusion.mesh1D", "examples.elphf.diffusion.mesh1Ddimensional", "examples.elphf.diffusion.mesh2D", "examples.elphf.input", "examples.elphf.phase", "examples.elphf.phaseDiffusion", "examples.elphf.poisson", "examples.elphf.test", "examples.flow", "examples.flow.stokesCavity", "examples.flow.test", "examples.levelSet", "examples.levelSet.advection", "examples.levelSet.advection.circle", "examples.levelSet.advection.mesh1D", "examples.levelSet.advection.test", "examples.levelSet.advection.trench", "examples.levelSet.distanceFunction", "examples.levelSet.distanceFunction.circle", "examples.levelSet.distanceFunction.interior", "examples.levelSet.distanceFunction.mesh1D", "examples.levelSet.distanceFunction.square", "examples.levelSet.distanceFunction.test", "examples.levelSet.electroChem", "examples.levelSet.electroChem.adsorbingSurfactantEquation", "examples.levelSet.electroChem.adsorption", "examples.levelSet.electroChem.gapFillDistanceVariable", "examples.levelSet.electroChem.gapFillMesh", "examples.levelSet.electroChem.gold", "examples.levelSet.electroChem.howToWriteAScript", "examples.levelSet.electroChem.leveler", "examples.levelSet.electroChem.lines", "examples.levelSet.electroChem.matplotlibSurfactantViewer", "examples.levelSet.electroChem.mayaviSurfactantViewer", "examples.levelSet.electroChem.metalIonDiffusionEquation", "examples.levelSet.electroChem.simpleTrenchSystem", "examples.levelSet.electroChem.surfactantBulkDiffusionEquation", "examples.levelSet.electroChem.test", "examples.levelSet.electroChem.trenchMesh", "examples.levelSet.surfactant", "examples.levelSet.surfactant.circle", "examples.levelSet.surfactant.expandingCircle", "examples.levelSet.surfactant.square", "examples.levelSet.surfactant.test", "examples.levelSet.test", "examples.meshing", "examples.meshing.gmshRefinement", "examples.meshing.inputGrid2D", "examples.meshing.sphere", "examples.meshing.test", "examples.parallel", "examples.phase", "examples.phase.anisotropy", "examples.phase.anisotropyOLD", "examples.phase.binary", "examples.phase.binaryCoupled", "examples.phase.impingement", "examples.phase.impingement.mesh20x20", "examples.phase.impingement.mesh40x1", "examples.phase.impingement.test", "examples.phase.missOrientation", "examples.phase.missOrientation.circle", "examples.phase.missOrientation.mesh1D", "examples.phase.missOrientation.modCircle", "examples.phase.missOrientation.test", "examples.phase.polyxtal", "examples.phase.polyxtalCoupled", "examples.phase.quaternary", "examples.phase.simple", "examples.phase.symmetry", "examples.phase.test", "examples.reactiveWetting", "examples.reactiveWetting.liquidVapor1D", "examples.reactiveWetting.liquidVapor2D", "examples.reactiveWetting.test", "examples.riemann", "examples.riemann.acoustics", "examples.riemann.test", "examples.test", "examples.updating", "examples.updating.update0_1to1_0", "examples.updating.update1_0to2_0", "examples.updating.update2_0to3_0", "fipy", "fipy.boundaryConditions", "fipy.boundaryConditions.boundaryCondition", "fipy.boundaryConditions.constraint", "fipy.boundaryConditions.fixedFlux", "fipy.boundaryConditions.fixedValue", "fipy.boundaryConditions.nthOrderBoundaryCondition", "fipy.boundaryConditions.test", "fipy.matrices", "fipy.matrices.offsetSparseMatrix", "fipy.matrices.pysparseMatrix", "fipy.matrices.scipyMatrix", "fipy.matrices.sparseMatrix", "fipy.matrices.test", "fipy.matrices.trilinosMatrix", "fipy.meshes", "fipy.meshes.abstractMesh", "fipy.meshes.builders", "fipy.meshes.builders.abstractGridBuilder", "fipy.meshes.builders.grid1DBuilder", "fipy.meshes.builders.grid2DBuilder", "fipy.meshes.builders.grid3DBuilder", "fipy.meshes.builders.periodicGrid1DBuilder", "fipy.meshes.builders.utilityClasses", "fipy.meshes.cylindricalGrid1D", "fipy.meshes.cylindricalGrid2D", "fipy.meshes.cylindricalNonUniformGrid1D", "fipy.meshes.cylindricalNonUniformGrid2D", "fipy.meshes.cylindricalUniformGrid1D", "fipy.meshes.cylindricalUniformGrid2D", "fipy.meshes.factoryMeshes", "fipy.meshes.gmshMesh", "fipy.meshes.grid1D", "fipy.meshes.grid2D", "fipy.meshes.grid3D", "fipy.meshes.mesh", "fipy.meshes.mesh1D", "fipy.meshes.mesh2D", "fipy.meshes.nonUniformGrid1D", "fipy.meshes.nonUniformGrid2D", "fipy.meshes.nonUniformGrid3D", "fipy.meshes.periodicGrid1D", "fipy.meshes.periodicGrid2D", "fipy.meshes.periodicGrid3D", "fipy.meshes.representations", "fipy.meshes.representations.abstractRepresentation", "fipy.meshes.representations.gridRepresentation", "fipy.meshes.representations.meshRepresentation", "fipy.meshes.skewedGrid2D", "fipy.meshes.sphericalNonUniformGrid1D", "fipy.meshes.sphericalUniformGrid1D", "fipy.meshes.test", "fipy.meshes.topologies", "fipy.meshes.topologies.abstractTopology", "fipy.meshes.topologies.gridTopology", "fipy.meshes.topologies.meshTopology", "fipy.meshes.tri2D", "fipy.meshes.uniformGrid", "fipy.meshes.uniformGrid1D", "fipy.meshes.uniformGrid2D", "fipy.meshes.uniformGrid3D", "fipy.solvers", "fipy.solvers.pyAMG", "fipy.solvers.pyAMG.linearCGSSolver", "fipy.solvers.pyAMG.linearGMRESSolver", "fipy.solvers.pyAMG.linearGeneralSolver", "fipy.solvers.pyAMG.linearLUSolver", "fipy.solvers.pyAMG.linearPCGSolver", "fipy.solvers.pyAMG.preconditioners", "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner", "fipy.solvers.pyamgx", "fipy.solvers.pyamgx.aggregationAMGSolver", "fipy.solvers.pyamgx.classicalAMGSolver", "fipy.solvers.pyamgx.linearBiCGStabSolver", "fipy.solvers.pyamgx.linearCGSolver", "fipy.solvers.pyamgx.linearFGMRESSolver", "fipy.solvers.pyamgx.linearGMRESSolver", "fipy.solvers.pyamgx.linearLUSolver", "fipy.solvers.pyamgx.preconditioners", "fipy.solvers.pyamgx.preconditioners.preconditioners", "fipy.solvers.pyamgx.pyAMGXSolver", "fipy.solvers.pyamgx.smoothers", "fipy.solvers.pyamgx.smoothers.smoothers", "fipy.solvers.pysparse", "fipy.solvers.pysparse.linearCGSSolver", "fipy.solvers.pysparse.linearGMRESSolver", "fipy.solvers.pysparse.linearJORSolver", "fipy.solvers.pysparse.linearLUSolver", "fipy.solvers.pysparse.linearPCGSolver", "fipy.solvers.pysparse.preconditioners", "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner", "fipy.solvers.pysparse.preconditioners.preconditioner", "fipy.solvers.pysparse.preconditioners.ssorPreconditioner", "fipy.solvers.pysparse.pysparseSolver", "fipy.solvers.pysparseMatrixSolver", "fipy.solvers.scipy", "fipy.solvers.scipy.linearBicgstabSolver", "fipy.solvers.scipy.linearCGSSolver", "fipy.solvers.scipy.linearGMRESSolver", "fipy.solvers.scipy.linearLUSolver", "fipy.solvers.scipy.linearPCGSolver", "fipy.solvers.scipy.scipyKrylovSolver", "fipy.solvers.scipy.scipySolver", "fipy.solvers.solver", "fipy.solvers.test", "fipy.solvers.trilinos", "fipy.solvers.trilinos.comms", "fipy.solvers.trilinos.comms.epetraCommWrapper", "fipy.solvers.trilinos.comms.serialEpetraCommWrapper", "fipy.solvers.trilinos.linearBicgstabSolver", "fipy.solvers.trilinos.linearCGSSolver", "fipy.solvers.trilinos.linearGMRESSolver", "fipy.solvers.trilinos.linearLUSolver", "fipy.solvers.trilinos.linearPCGSolver", "fipy.solvers.trilinos.preconditioners", "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner", "fipy.solvers.trilinos.preconditioners.icPreconditioner", "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner", "fipy.solvers.trilinos.preconditioners.preconditioner", "fipy.solvers.trilinos.trilinosAztecOOSolver", "fipy.solvers.trilinos.trilinosMLTest", "fipy.solvers.trilinos.trilinosNonlinearSolver", "fipy.solvers.trilinos.trilinosSolver", "fipy.steppers", "fipy.steppers.pidStepper", "fipy.steppers.pseudoRKQSStepper", "fipy.steppers.stepper", "fipy.terms", "fipy.terms.abstractBinaryTerm", "fipy.terms.abstractConvectionTerm", "fipy.terms.abstractDiffusionTerm", "fipy.terms.abstractUpwindConvectionTerm", "fipy.terms.advectionTerm", "fipy.terms.asymmetricConvectionTerm", "fipy.terms.binaryTerm", "fipy.terms.cellTerm", "fipy.terms.centralDiffConvectionTerm", "fipy.terms.coupledBinaryTerm", "fipy.terms.diffusionTerm", "fipy.terms.diffusionTermCorrection", "fipy.terms.diffusionTermNoCorrection", "fipy.terms.explicitDiffusionTerm", "fipy.terms.explicitSourceTerm", "fipy.terms.explicitUpwindConvectionTerm", "fipy.terms.exponentialConvectionTerm", "fipy.terms.faceTerm", "fipy.terms.firstOrderAdvectionTerm", "fipy.terms.hybridConvectionTerm", "fipy.terms.implicitDiffusionTerm", "fipy.terms.implicitSourceTerm", "fipy.terms.nonDiffusionTerm", "fipy.terms.powerLawConvectionTerm", "fipy.terms.residualTerm", "fipy.terms.sourceTerm", "fipy.terms.term", "fipy.terms.test", "fipy.terms.transientTerm", "fipy.terms.unaryTerm", "fipy.terms.upwindConvectionTerm", "fipy.terms.vanLeerConvectionTerm", "fipy.testFiPy", "fipy.tests", "fipy.tests.doctestPlus", "fipy.tests.lateImportTest", "fipy.tests.test", "fipy.tests.testProgram", "fipy.tools", "fipy.tools.comms", "fipy.tools.comms.commWrapper", "fipy.tools.comms.dummyComm", "fipy.tools.debug", "fipy.tools.decorators", "fipy.tools.dimensions", "fipy.tools.dimensions.DictWithDefault", "fipy.tools.dimensions.NumberDict", "fipy.tools.dimensions.physicalField", "fipy.tools.dump", "fipy.tools.inline", "fipy.tools.logging", "fipy.tools.numerix", "fipy.tools.parser", "fipy.tools.sharedtempfile", "fipy.tools.test", "fipy.tools.vector", "fipy.tools.version", "fipy.tools.vitals", "fipy.variables", "fipy.variables.addOverFacesVariable", "fipy.variables.arithmeticCellToFaceVariable", "fipy.variables.betaNoiseVariable", "fipy.variables.binaryOperatorVariable", "fipy.variables.cellToFaceVariable", "fipy.variables.cellVariable", "fipy.variables.constant", "fipy.variables.constraintMask", "fipy.variables.coupledCellVariable", "fipy.variables.distanceVariable", "fipy.variables.exponentialNoiseVariable", "fipy.variables.faceGradContributionsVariable", "fipy.variables.faceGradVariable", "fipy.variables.faceVariable", "fipy.variables.gammaNoiseVariable", "fipy.variables.gaussCellGradVariable", "fipy.variables.gaussianNoiseVariable", "fipy.variables.harmonicCellToFaceVariable", "fipy.variables.histogramVariable", "fipy.variables.interfaceAreaVariable", "fipy.variables.interfaceFlagVariable", "fipy.variables.leastSquaresCellGradVariable", "fipy.variables.levelSetDiffusionVariable", "fipy.variables.meshVariable", "fipy.variables.minmodCellToFaceVariable", "fipy.variables.modCellGradVariable", "fipy.variables.modCellToFaceVariable", "fipy.variables.modFaceGradVariable", "fipy.variables.modPhysicalField", "fipy.variables.modularVariable", "fipy.variables.noiseVariable", "fipy.variables.operatorVariable", "fipy.variables.scharfetterGummelFaceVariable", "fipy.variables.surfactantConvectionVariable", "fipy.variables.surfactantVariable", "fipy.variables.test", "fipy.variables.unaryOperatorVariable", "fipy.variables.uniformNoiseVariable", "fipy.variables.variable", "fipy.viewers", "fipy.viewers.matplotlibViewer", "fipy.viewers.mayaviViewer", "fipy.viewers.mayaviViewer.mayaviClient", "fipy.viewers.mayaviViewer.test", "fipy.viewers.multiViewer", "fipy.viewers.test", "fipy.viewers.testinteractive", "fipy.viewers.tsvViewer", "fipy.viewers.viewer", "fipy.viewers.vtkViewer", "fipy.viewers.vtkViewer.test", "fipy.viewers.vtkViewer.vtkCellViewer", "fipy.viewers.vtkViewer.vtkFaceViewer", "fipy.viewers.vtkViewer.vtkViewer", "Glossary", "Introduction", "FiPy Manual", "Finite Volume Method", "General Conservation Equation", "Theoretical and Numerical Background", "Numerical Schemes", "References", "package", "package.subpackage", "package.subpackage.base", "package.subpackage.object", "How to Read the Modules Documentation"], "terms": {"refer": [0, 2, 8, 15, 20, 21, 70, 80, 118, 177, 181, 191, 233, 248, 441, 449, 450], "usag": [0, 5, 6, 20, 440], "current": [0, 2, 8, 9, 11, 13, 15, 17, 19, 46, 137, 138, 139, 144, 181, 190, 192, 318, 360, 364, 383, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442], "convent": [0, 20, 440, 443], "whether": [0, 8, 10, 12, 19, 21, 73, 134, 139, 141, 142, 144, 360, 364, 373, 374, 377, 379, 394, 423], "fix": [0, 8, 9, 11, 20, 71, 72, 74, 80, 89, 115, 161, 174, 175, 177, 196, 197, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 440], "bug": [0, 2, 3, 8, 21, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "ad": [0, 2, 4, 9, 11, 17, 21, 113, 118, 166, 167, 174, 175, 177, 189, 196, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 339, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 449], "featur": [0, 3, 8, 21, 118, 446], "all": [0, 2, 3, 6, 8, 9, 10, 11, 12, 15, 16, 17, 18, 20, 21, 31, 32, 74, 80, 95, 101, 105, 109, 115, 138, 141, 142, 144, 153, 156, 158, 161, 163, 164, 174, 175, 181, 183, 187, 189, 190, 191, 208, 223, 257, 258, 269, 285, 291, 295, 317, 319, 320, 330, 360, 362, 364, 373, 377, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439, 442, 443, 445, 449, 450], "work": [0, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 46, 62, 73, 80, 118, 162, 163, 164, 177, 181, 189, 190, 192, 318, 323, 354, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 440, 442, 449], "fipi": [0, 2, 3, 4, 6, 9, 10, 13, 14, 15, 16, 18, 19, 21, 31, 32, 33, 34, 35, 38, 39, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 76, 77, 80, 81, 82, 84, 89, 90, 93, 94, 103, 107, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 129, 137, 138, 139, 141, 142, 144, 156, 157, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 178, 181, 182, 189, 190, 191, 439, 440, 442, 443, 444, 445, 447, 448, 449, 451], "should": [0, 2, 6, 8, 9, 10, 11, 15, 17, 46, 71, 72, 73, 80, 90, 137, 144, 163, 164, 177, 181, 189, 190, 191, 223, 253, 278, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 364, 369, 373, 377, 378, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 449, 450], "conduct": [0, 8, 80, 442, 445], "pull": [0, 20, 440], "request": [0, 2, 3, 11, 16], "If": [0, 3, 7, 8, 11, 14, 16, 17, 21, 34, 35, 48, 49, 50, 55, 58, 59, 64, 71, 72, 73, 74, 76, 77, 80, 84, 109, 110, 111, 112, 113, 114, 115, 122, 137, 138, 139, 141, 142, 144, 162, 163, 164, 166, 167, 176, 177, 189, 190, 191, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 295, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 369, 373, 374, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438, 442, 449, 450], "i": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 31, 32, 33, 34, 35, 38, 39, 46, 48, 49, 50, 51, 55, 56, 58, 59, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 84, 85, 89, 90, 92, 93, 94, 96, 98, 99, 103, 106, 107, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 128, 130, 134, 136, 137, 138, 139, 144, 149, 150, 156, 157, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 181, 182, 189, 190, 191, 192, 194, 196, 198, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 255, 256, 257, 259, 263, 264, 265, 266, 267, 268, 269, 276, 277, 279, 280, 283, 285, 288, 289, 290, 291, 292, 295, 301, 302, 303, 304, 305, 316, 317, 318, 320, 321, 325, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 362, 364, 369, 373, 374, 377, 378, 379, 381, 382, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 432, 433, 439, 440, 442, 443, 444, 445, 446, 449, 450], "alreadi": [0, 3, 10, 189, 364, 373], "report": [0, 2, 3, 17, 360], "github": [0, 2, 8, 9, 11, 13, 15, 20, 174, 175, 439], "issu": [0, 2, 8, 9, 11, 15, 17, 20, 21, 163, 164, 190, 191, 369, 394], "name": [0, 2, 5, 8, 10, 11, 17, 20, 31, 32, 33, 34, 35, 38, 39, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 71, 72, 74, 76, 77, 80, 81, 82, 84, 89, 93, 94, 103, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 129, 138, 141, 142, 157, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 178, 181, 182, 189, 191, 223, 227, 253, 295, 325, 360, 364, 369, 373, 374, 379, 383, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 449, 450], "accordingli": 0, "issue12345": 0, "summary_of_what_branch_address": 0, "checkout": [0, 9, 11], "b": [0, 2, 14, 17, 21, 31, 32, 102, 139, 163, 164, 166, 177, 223, 257, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 442, 446], "edit": [0, 2, 138, 323, 446], "add": [0, 2, 11, 14, 17, 20, 55, 112, 113, 177, 196, 197, 223, 350, 364, 373], "emac": 0, "commit": 0, "m": [0, 11, 13, 14, 17, 20, 73, 110, 112, 134, 139, 141, 144, 161, 162, 174, 175, 176, 177, 181, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 322, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 432, 440, 446], "refactoring_stage_a": 0, "refactoring_stage_b": 0, "sure": [0, 9, 11, 16, 17, 134, 190], "up": [0, 2, 3, 6, 8, 11, 13, 14, 16, 17, 18, 21, 31, 32, 71, 72, 118, 138, 162, 176, 424, 442], "date": [0, 2], "fetch": [0, 9, 11], "origin": [0, 2, 21, 166, 174, 175, 218, 219, 220, 221, 222, 241, 242, 250, 251, 252, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "state": [0, 2, 8, 9, 11, 12, 31, 32, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 64, 65, 71, 72, 74, 80, 81, 82, 84, 90, 93, 106, 113, 138, 144, 177, 181, 189, 443, 444], "diff": [0, 35, 190, 191], "resolv": [0, 2, 8, 11, 189, 330], "ani": [0, 2, 7, 8, 9, 10, 11, 12, 15, 16, 17, 20, 21, 31, 32, 74, 115, 138, 139, 141, 142, 144, 177, 189, 190, 191, 198, 223, 233, 253, 330, 362, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439, 442, 443, 449, 450], "conflict": [0, 2, 11], "test": [0, 2, 4, 6, 7, 8, 9, 11, 13, 16, 20, 32, 38, 39, 46, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 67, 71, 72, 76, 77, 79, 80, 81, 82, 90, 92, 94, 95, 96, 98, 99, 101, 102, 103, 106, 109, 113, 115, 118, 122, 123, 125, 127, 128, 129, 130, 134, 138, 149, 150, 162, 163, 164, 166, 167, 170, 171, 172, 178, 185, 189, 192, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 318, 330, 333, 334, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 356, 357, 364, 373, 374, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 426, 427, 431, 439, 440], "python": [0, 2, 3, 6, 7, 8, 13, 14, 15, 16, 18, 20, 22, 80, 90, 137, 138, 139, 141, 142, 144, 156, 161, 174, 175, 176, 177, 181, 190, 192, 295, 364, 373, 378, 382, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 426, 427, 439, 440, 442, 446, 449, 450], "setup": [0, 2, 7, 11, 13, 17, 80, 107, 109, 113, 115, 122, 123, 127, 129, 138, 192, 362], "py": [0, 2, 6, 7, 10, 11, 13, 15, 17, 34, 77, 79, 80, 89, 90, 92, 93, 94, 99, 103, 106, 110, 112, 137, 138, 139, 144, 156, 174, 175, 177, 189, 192, 295, 426, 427, 449], "necessari": [0, 2, 8, 11, 16, 17, 21, 66, 76, 79, 80, 161, 162, 163, 164, 167, 174, 175, 181, 189, 190, 191, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 443, 449], "fork": 0, "repositori": [0, 2, 8, 9, 11, 21, 364, 383, 439], "remot": 0, "link": [0, 2, 3, 9, 11, 21], "your": [0, 2, 3, 7, 8, 9, 10, 11, 13, 14, 17, 19, 73, 80, 189, 190, 191, 295, 373, 377, 439, 449], "myfork": 0, "myforkurl": 0, "push": 0, "now": [0, 2, 3, 8, 9, 11, 13, 17, 32, 62, 71, 72, 74, 80, 109, 110, 111, 115, 118, 138, 162, 163, 164, 177, 189, 190, 191, 439, 442], "creat": [0, 2, 6, 8, 11, 12, 17, 34, 35, 48, 49, 50, 58, 59, 70, 71, 72, 76, 80, 81, 82, 84, 109, 110, 111, 112, 113, 114, 125, 129, 138, 141, 142, 157, 161, 162, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 189, 190, 194, 198, 218, 219, 220, 221, 222, 223, 230, 231, 233, 234, 235, 240, 241, 242, 248, 250, 251, 257, 258, 269, 279, 282, 283, 284, 285, 291, 295, 307, 308, 309, 310, 311, 312, 313, 316, 317, 319, 320, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 364, 373, 377, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 432, 433, 434, 436, 437, 438, 439, 442, 449, 450], "against": [0, 6, 17, 48, 49, 50, 53, 55, 58, 59, 60, 64, 67, 76, 77, 80, 162, 163, 164, 166, 177, 189, 364, 373, 425], "usnistgov": [0, 3, 8, 9, 11], "The": [0, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 31, 32, 33, 34, 35, 46, 48, 49, 50, 51, 55, 56, 58, 59, 61, 65, 66, 67, 71, 72, 73, 74, 76, 77, 79, 80, 84, 89, 90, 93, 94, 96, 98, 99, 103, 107, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 128, 129, 130, 134, 136, 137, 138, 139, 141, 142, 144, 149, 150, 151, 156, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 181, 189, 190, 191, 192, 196, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 255, 256, 257, 259, 263, 264, 265, 266, 267, 268, 269, 276, 277, 278, 279, 280, 285, 288, 289, 290, 291, 292, 295, 301, 302, 303, 304, 305, 316, 321, 325, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 369, 373, 377, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 451], "initi": [0, 2, 8, 11, 21, 31, 32, 48, 49, 50, 55, 58, 59, 70, 76, 80, 81, 82, 84, 89, 111, 118, 122, 125, 129, 137, 138, 141, 142, 144, 150, 151, 162, 163, 164, 166, 167, 170, 171, 172, 176, 177, 181, 189, 190, 223, 314, 315, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 390, 394, 398, 414, 415, 417, 419], "autom": [0, 2, 4, 6, 21, 190, 439], "check": [0, 2, 9, 10, 11, 17, 21, 46, 77, 80, 110, 125, 151, 223, 374, 382, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "statu": [0, 9, 11, 16], "absolut": [0, 8, 94, 110, 125, 364, 373, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "document": [0, 2, 3, 5, 7, 9, 11, 12, 17, 20, 21, 80, 318, 364, 377, 378, 383, 439, 441, 449], "failur": [0, 2, 8, 44, 45, 80, 360], "still": [0, 2, 6, 8, 11, 73, 113, 177, 189, 190, 362, 377, 442], "an": [0, 2, 3, 6, 7, 9, 11, 12, 14, 15, 16, 17, 19, 20, 21, 31, 32, 35, 48, 49, 58, 59, 66, 67, 70, 71, 72, 73, 74, 76, 77, 80, 81, 82, 84, 90, 107, 109, 110, 111, 112, 113, 114, 115, 118, 128, 134, 137, 138, 150, 157, 161, 162, 163, 164, 167, 170, 171, 172, 174, 175, 177, 181, 189, 190, 192, 198, 223, 255, 256, 257, 259, 263, 264, 265, 266, 267, 268, 288, 289, 290, 292, 301, 302, 303, 304, 305, 330, 360, 364, 373, 374, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 434, 439, 440, 442, 443, 445, 446, 449, 450], "experiment": [0, 2, 80, 137, 138, 139, 144, 161, 174, 175], "you": [0, 2, 3, 7, 8, 9, 10, 11, 13, 14, 17, 19, 20, 31, 32, 33, 34, 73, 80, 137, 139, 144, 161, 162, 174, 175, 189, 190, 191, 223, 295, 377, 440, 449, 450], "would": [0, 10, 11, 15, 17, 31, 33, 34, 80, 118, 163, 164, 177, 190, 192, 364, 379, 442], "like": [0, 6, 8, 11, 15, 17, 19, 21, 55, 80, 118, 177, 189, 198, 364, 373, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 442, 443, 449, 450], "its": [0, 2, 6, 11, 12, 16, 17, 19, 21, 46, 80, 129, 138, 161, 174, 175, 190, 194, 198, 283, 285, 295, 316, 317, 320, 333, 343, 351, 352, 364, 373, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 433, 442, 449], "impact": 0, "mai": [0, 3, 6, 8, 9, 11, 12, 14, 15, 16, 17, 21, 46, 80, 163, 164, 190, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 295, 362, 369, 377, 442, 450], "prepend": 0, "wip": 0, "titl": [0, 2, 12, 20, 38, 39, 141, 142, 161, 174, 175, 322, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438], "thi": [0, 2, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 31, 32, 34, 35, 44, 45, 46, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 84, 85, 90, 92, 93, 94, 95, 96, 98, 99, 103, 106, 107, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 129, 134, 136, 137, 138, 139, 144, 149, 150, 151, 156, 157, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 181, 189, 190, 191, 192, 194, 196, 197, 198, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 278, 279, 283, 285, 295, 316, 317, 318, 320, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 362, 364, 369, 373, 377, 378, 379, 381, 383, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 433, 439, 440, 442, 444, 445, 449, 450], "prevent": [0, 6, 16, 139, 181, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 449], "being": [0, 9, 11, 12, 17, 48, 49, 50, 58, 59, 76, 80, 93, 94, 98, 99, 103, 177, 189, 248, 394, 439, 442, 449, 450], "befor": [0, 2, 8, 9, 10, 11, 16, 17, 22, 31, 32, 80, 163, 164, 176, 189, 190, 201, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 450], "": [0, 2, 3, 4, 6, 7, 10, 11, 14, 16, 17, 20, 21, 31, 32, 38, 66, 71, 72, 80, 107, 110, 112, 115, 138, 139, 141, 144, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 181, 189, 190, 196, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 325, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 439, 440, 444, 446, 449], "allow": [0, 2, 6, 8, 11, 16, 17, 19, 21, 85, 95, 115, 170, 171, 172, 177, 360, 373, 378, 439, 445], "run": [0, 2, 6, 7, 9, 10, 11, 16, 18, 19, 20, 21, 35, 48, 49, 50, 55, 58, 59, 64, 71, 72, 74, 76, 80, 84, 90, 95, 105, 109, 110, 111, 112, 113, 114, 115, 137, 138, 139, 144, 153, 156, 158, 162, 166, 167, 176, 177, 183, 187, 189, 192, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 360, 364, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 426, 427, 439, 440], "pleas": [0, 2, 3, 7, 8, 11, 14, 15, 189, 190, 191], "respect": [0, 2, 107, 112, 114, 162, 163, 164, 167, 176, 181, 198, 442, 443], "resourc": [0, 2, 3, 11, 17, 192], "do": [0, 2, 3, 7, 9, 10, 11, 17, 20, 21, 46, 80, 128, 130, 138, 139, 177, 181, 189, 190, 191, 198, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 323, 364, 379, 381, 424, 432, 440, 449, 450], "bulk": [0, 134, 137, 138, 144, 163, 164], "local": [0, 11, 13, 19, 71, 72, 80, 94, 150, 223, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 383, 439], "machin": [0, 17, 19, 21], "own": [0, 7, 9, 11, 13, 16, 17, 21, 80, 189, 190, 373, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 447, 448, 451], "account": [0, 3, 11, 17, 137, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "have": [0, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 21, 32, 67, 70, 76, 77, 79, 80, 85, 107, 109, 110, 111, 112, 113, 114, 118, 129, 137, 139, 144, 161, 163, 164, 174, 175, 176, 177, 189, 190, 191, 198, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 362, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 432, 442, 443, 449], "lot": [0, 95, 360], "enabl": [0, 2, 11, 15, 16, 17, 21, 192], "servic": [0, 12], "can": [0, 2, 3, 6, 7, 9, 10, 11, 13, 15, 16, 17, 18, 19, 20, 21, 31, 32, 34, 35, 48, 49, 50, 55, 58, 59, 64, 67, 70, 71, 72, 73, 76, 80, 81, 82, 84, 89, 106, 107, 109, 110, 111, 113, 114, 118, 122, 123, 125, 127, 129, 139, 144, 149, 150, 156, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 181, 189, 190, 191, 192, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 280, 295, 325, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 377, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 439, 440, 442, 443, 444, 445, 447, 448, 449, 450, 451], "avoid": [0, 2, 11, 118, 189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "individu": [0, 2, 7, 8, 21, 191], "skip": [0, 17, 360], "ci": [0, 2, 439], "messag": [0, 3, 16, 17, 20, 80, 369, 439, 440], "when": [0, 2, 6, 7, 8, 9, 11, 13, 15, 16, 17, 19, 21, 80, 109, 118, 125, 138, 139, 163, 164, 177, 189, 190, 191, 222, 223, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 364, 378, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 442, 443, 450], "readi": [0, 9, 11], "successfulli": [0, 9, 11], "pass": [0, 2, 9, 11, 16, 17, 50, 118, 189, 190, 191, 192, 318, 360, 364, 373, 439, 449], "send": [0, 3], "mail": [0, 2, 8, 15, 17, 20, 190, 191], "list": [0, 2, 8, 9, 10, 11, 13, 14, 15, 20, 21, 22, 71, 72, 80, 109, 110, 111, 141, 142, 190, 191, 192, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439, 442, 450], "about": [0, 2, 3, 6, 7, 8, 9, 11, 13, 14, 17, 21, 31, 32, 33, 34, 35, 80, 156, 161, 163, 164, 177, 189, 190, 192, 295, 318, 330, 364, 383], "develop": [0, 2, 3, 4, 9, 12, 14, 15, 17, 19, 20, 192, 440, 446], "automat": [0, 2, 7, 8, 11, 17, 21, 31, 32, 33, 34, 80, 81, 82, 163, 164, 181, 189, 190, 364, 374, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 449, 450], "see": [0, 2, 3, 6, 7, 11, 16, 17, 18, 19, 20, 21, 22, 35, 71, 72, 80, 81, 82, 109, 110, 111, 118, 137, 139, 144, 161, 162, 163, 164, 166, 167, 174, 175, 177, 189, 190, 191, 195, 257, 318, 334, 341, 342, 345, 349, 356, 360, 378, 439, 440, 442, 444], "respond": 0, "without": [0, 2, 6, 11, 12, 17, 19, 21, 67, 80, 166, 167, 174, 175, 181, 190, 364, 373, 379, 414, 449], "further": [0, 2, 3, 10, 11, 17, 21, 46, 118, 144, 334, 341, 342, 345, 349, 356], "action": [0, 21, 138, 156, 166, 378, 449], "part": [0, 8, 9, 11, 13, 19, 21, 35, 80, 107, 137, 181, 223, 248, 442], "administr": [0, 14], "onli": [0, 2, 6, 7, 9, 10, 11, 16, 17, 18, 19, 20, 21, 33, 34, 73, 74, 80, 111, 113, 115, 118, 136, 137, 139, 141, 142, 162, 163, 164, 177, 181, 189, 196, 197, 223, 240, 330, 333, 336, 337, 338, 339, 343, 344, 347, 350, 351, 352, 354, 360, 364, 373, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 418, 419, 422, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439, 442, 445], "us": [0, 2, 3, 4, 6, 7, 8, 9, 10, 14, 15, 16, 18, 20, 21, 31, 32, 33, 34, 35, 46, 50, 51, 56, 64, 65, 67, 70, 71, 72, 73, 77, 79, 80, 81, 82, 84, 85, 89, 92, 93, 94, 103, 106, 110, 118, 122, 123, 129, 136, 137, 138, 139, 141, 142, 144, 161, 162, 163, 164, 166, 167, 176, 177, 181, 189, 190, 191, 192, 198, 201, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 269, 276, 277, 278, 279, 280, 285, 288, 289, 290, 291, 292, 295, 301, 302, 303, 305, 314, 315, 319, 320, 322, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 364, 369, 373, 374, 377, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450], "interfac": [0, 2, 4, 8, 11, 14, 16, 17, 19, 21, 107, 125, 134, 137, 138, 149, 150, 151, 161, 163, 164, 174, 175, 177, 255, 256, 257, 259, 263, 264, 265, 266, 267, 268, 288, 289, 290, 292, 301, 302, 303, 304, 305, 379, 394, 419, 439, 446], "particularli": [0, 9, 11, 71, 72, 80], "long": [0, 2, 17, 46, 110, 163, 164, 190, 362, 364, 373, 377, 450], "histori": 0, "consid": [0, 2, 8, 11, 67, 74, 80, 118, 161, 174, 175, 176, 190, 295, 442], "squash": 0, "we": [0, 2, 3, 6, 8, 9, 10, 11, 14, 15, 17, 21, 31, 32, 33, 34, 35, 46, 48, 49, 50, 53, 55, 58, 59, 60, 64, 66, 70, 71, 72, 73, 74, 76, 77, 80, 81, 82, 84, 109, 110, 111, 112, 113, 114, 115, 118, 128, 130, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 178, 181, 189, 190, 191, 223, 233, 323, 354, 373, 377, 381, 387, 394, 395, 399, 401, 422, 442, 449, 450], "azur": [0, 2, 439], "cloud": [0, 2, 439], "configur": [0, 2, 3, 17, 272], "fipysourc": [0, 17], "pipelin": [0, 2, 4], "yml": 0, "log": [0, 20, 114, 141, 163, 164, 176, 181, 182, 364, 373, 440, 441], "changelog": [0, 2], "txt": [0, 2, 364, 379], "rel": [0, 2, 17, 21, 31, 32, 110, 181, 364, 373, 377], "new": [0, 2, 6, 8, 11, 13, 21, 70, 80, 113, 114, 138, 144, 167, 177, 190, 191, 219, 223, 229, 231, 234, 240, 248, 360, 364, 369, 373, 374, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 450], "after": [0, 2, 10, 11, 13, 17, 21, 32, 46, 112, 114, 118, 177, 190, 362, 364, 369, 373, 377, 394], "x": [0, 2, 7, 8, 9, 11, 13, 15, 16, 17, 18, 20, 22, 35, 39, 50, 53, 55, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 84, 89, 90, 93, 94, 96, 98, 99, 103, 106, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 128, 129, 130, 134, 138, 141, 142, 149, 150, 156, 157, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 189, 190, 191, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 321, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 432, 439], "y": [0, 7, 8, 9, 11, 14, 15, 17, 18, 20, 39, 51, 56, 70, 71, 72, 81, 82, 93, 111, 118, 122, 125, 127, 128, 130, 138, 141, 142, 149, 150, 157, 161, 162, 166, 170, 172, 174, 175, 177, 178, 190, 191, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 426, 427, 432, 439], "mileston": 0, "z": [0, 9, 11, 20, 157, 161, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 373, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 426, 427], "obtain": [0, 2, 7, 8, 9, 17, 20, 31, 33, 34, 74, 80, 115, 118, 138, 139, 156, 162, 163, 164, 177, 189, 191, 223, 401, 414, 440, 442, 444, 445], "rest": [0, 138], "format": [0, 2, 16, 17, 32, 35, 364, 373, 374, 383, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 432, 434, 436, 437, 438, 439], "everi": [0, 19, 21, 80, 137, 144, 364, 373, 377], "close": [0, 2, 11, 13, 19, 21, 73, 80, 118, 181, 223, 364, 379], "sinc": [0, 2, 6, 21, 109, 110, 111, 113, 115, 177, 190, 191, 233, 323, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 445], "last": [0, 2, 8, 118, 181, 189, 190, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 334, 341, 342, 345, 349, 356, 357, 364, 373, 377, 383, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "major": [0, 2, 8, 181], "curat": 0, "output": [0, 2, 15, 16, 19, 31, 32, 33, 34, 35, 118, 223, 295, 318, 377, 432], "so": [0, 3, 6, 10, 11, 13, 17, 19, 20, 21, 31, 33, 34, 66, 73, 112, 114, 118, 138, 141, 142, 161, 163, 164, 166, 174, 175, 177, 181, 189, 190, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 364, 373, 377, 394, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438, 440, 442, 445, 450], "clear": [0, 2, 17, 21], "what": [0, 2, 10, 17, 20, 21, 80, 181, 190, 318, 377, 381, 440, 449], "big": 0, "deal": [0, 10, 11, 17, 21, 136], "sometim": [0, 2, 8, 71, 72], "redund": [0, 21], "e": [0, 2, 8, 10, 11, 14, 15, 17, 19, 53, 55, 56, 60, 65, 73, 74, 80, 107, 112, 113, 115, 138, 163, 164, 167, 177, 181, 182, 189, 191, 253, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 432, 442, 443, 444, 446, 447, 448, 451], "g": [0, 8, 10, 11, 14, 15, 17, 19, 38, 71, 72, 80, 94, 107, 112, 113, 163, 164, 176, 177, 191, 223, 253, 322, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 432, 442, 444, 446, 447, 448, 451], "issue123": 0, "blah": 0, "prefer": [0, 2, 8, 10, 11, 17, 71, 72, 442], "given": [0, 2, 6, 7, 11, 15, 17, 21, 35, 48, 49, 50, 51, 56, 58, 59, 61, 65, 66, 70, 74, 76, 77, 80, 99, 107, 114, 118, 127, 128, 130, 134, 137, 138, 139, 144, 150, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 181, 189, 190, 196, 197, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 356, 357, 360, 364, 369, 373, 374, 377, 394, 442, 443, 447, 448, 451], "correspond": [0, 15, 66, 80, 139, 144, 196, 197, 198, 223, 364, 373, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "under": [0, 2, 14, 16, 20, 21, 31, 32, 80, 161, 174, 175, 176, 181, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 383, 440, 450], "altern": [0, 7, 11, 17, 141, 142, 222, 280, 377, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 449], "item": [0, 190, 191], "remov": [0, 2, 8, 9, 11, 19, 118, 139, 161, 374, 381, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "appropri": [0, 2, 8, 11, 17, 80, 84, 112, 114, 166, 176, 177, 189, 221, 323, 364, 373, 442, 449], "move": [0, 2, 8, 11, 14, 80, 92, 118, 141, 142, 163, 164, 177, 189], "thank": [0, 2, 17, 118], "mention": [0, 11, 80, 445], "recogn": 0, "outsid": [0, 157, 233, 432], "contributor": [0, 20, 440, 441], "requir": [0, 2, 6, 8, 15, 16, 17, 18, 19, 20, 21, 32, 48, 49, 58, 59, 67, 73, 76, 79, 80, 90, 118, 137, 138, 139, 144, 157, 163, 164, 166, 167, 174, 175, 177, 181, 190, 191, 222, 223, 233, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 278, 279, 285, 288, 289, 290, 291, 292, 295, 301, 302, 303, 304, 305, 317, 318, 319, 320, 325, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 440, 442, 450], "pygithub": 0, "panda": [0, 17, 439], "doesn": [0, 2, 3, 17, 20, 31, 32, 33, 34, 181, 223, 424, 440], "t": [0, 2, 3, 9, 10, 11, 14, 17, 20, 21, 31, 32, 33, 34, 35, 70, 71, 72, 73, 76, 77, 80, 107, 109, 113, 122, 123, 134, 138, 139, 144, 149, 150, 161, 162, 163, 164, 167, 170, 171, 172, 174, 175, 176, 177, 181, 190, 191, 223, 253, 325, 330, 344, 354, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 440, 443, 444, 446, 449, 450], "show": [0, 2, 3, 6, 17, 44, 45, 118, 139, 141, 142, 144, 166, 414], "green": [0, 2], "box": [0, 2, 19, 80, 161, 174, 175, 178, 189, 248, 257], "note": [0, 3, 11, 13, 21, 31, 32, 66, 80, 161, 177, 223, 362, 401], "readm": [0, 2], "instal": [0, 2, 5, 8, 9, 10, 16, 17, 19, 20, 21, 22, 137, 144, 161, 174, 175, 439, 440, 441, 446], "tag": [0, 2, 3, 9, 11], "abov": [0, 6, 8, 10, 15, 17, 21, 35, 80, 118, 138, 139, 144, 177, 178, 248, 330, 364, 373, 449], "annot": 0, "upon": [0, 12, 17, 21, 71, 72], "success": [0, 6, 8, 9, 11, 73, 280], "system": [0, 2, 9, 11, 13, 15, 16, 17, 73, 80, 109, 110, 111, 114, 134, 137, 161, 162, 166, 167, 174, 175, 176, 177, 181, 232, 252, 257, 269, 276, 277, 278, 279, 280, 291, 313, 318, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 442, 443, 444, 446], "build": [0, 2, 6, 9, 11, 16, 17, 18, 21, 76, 118, 138, 156, 162, 166, 176, 177, 253, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "product": [0, 2, 5, 11, 17, 21, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "artifact": 0, "place": [0, 2, 8, 10, 11, 21, 32, 323, 362, 364, 373, 374, 377], "dist": [0, 2, 362], "linux": [0, 2, 11, 13, 19, 22, 109, 439], "none": [0, 2, 10, 33, 34, 71, 72, 109, 110, 111, 112, 114, 115, 138, 141, 142, 161, 164, 174, 175, 181, 182, 195, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 257, 258, 263, 264, 269, 272, 276, 279, 288, 289, 290, 291, 292, 295, 304, 319, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 362, 364, 369, 373, 374, 377, 378, 379, 383, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 450], "whl": 0, "tar": 0, "gz": [0, 138, 162, 166, 167, 170, 171, 172, 374, 390], "windows_nt": 0, "zip": [0, 174, 175, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "doc": [0, 2, 17, 360, 378, 439, 446], "pdf": [0, 2, 14, 17, 446], "html": [0, 3, 8, 11, 13, 17, 318, 378], "directori": [0, 6, 7, 8, 9, 11, 13, 15, 17, 22, 80, 90, 137, 138, 139, 144, 156, 177, 447, 448, 451], "unpack": [0, 2, 11, 17], "xzf": 0, "c": [0, 2, 6, 11, 14, 16, 17, 21, 66, 80, 102, 134, 138, 139, 144, 161, 162, 163, 164, 174, 175, 181, 323, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 446], "attach": [0, 2, 449], "associ": [0, 17, 21, 137, 138, 163, 164], "pypi": [0, 2, 439], "twine": 0, "fipy_vers": 0, "web": [0, 2, 11, 19], "site": [0, 3, 11, 138, 139, 144], "ctcm": [0, 8, 192, 439], "export": [0, 2, 4, 17, 20, 71, 72, 440], "fipy_wwwhost": 0, "bunter": [0, 2], "u": [0, 2, 3, 7, 8, 14, 17, 20, 21, 48, 49, 50, 51, 53, 55, 56, 58, 59, 80, 118, 122, 123, 149, 163, 164, 177, 181, 182, 189, 190, 191, 330, 334, 341, 342, 344, 345, 349, 356, 394, 398, 417, 418, 440, 443, 444, 449], "www": [0, 3, 8, 11, 16, 17, 34, 46, 439, 446], "wd15": [0, 11, 13], "fipy_wwwactiv": 0, "updatewww": 0, "upload_product": 0, "some": [0, 2, 6, 8, 9, 10, 11, 15, 16, 17, 21, 31, 32, 33, 34, 38, 39, 71, 72, 80, 89, 118, 138, 166, 181, 190, 191, 253, 295, 299, 330, 344, 364, 366, 383, 439, 446], "version": [0, 6, 9, 10, 11, 13, 15, 16, 17, 19, 20, 21, 80, 118, 182, 189, 190, 191, 233, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 440], "rsync": 0, "mac": [0, 2, 11, 13, 19, 22], "o": [0, 2, 4, 11, 13, 17, 22, 70, 71, 72, 138, 162, 166, 167, 170, 171, 172], "caus": [0, 2, 8, 15, 17, 118, 161, 174, 175, 189, 190, 227, 253, 295, 325, 424], "problem": [0, 2, 4, 6, 7, 8, 14, 15, 16, 17, 21, 31, 32, 33, 34, 35, 48, 49, 50, 51, 55, 56, 58, 59, 61, 64, 65, 67, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 84, 89, 92, 93, 94, 95, 96, 98, 99, 101, 103, 109, 110, 111, 112, 113, 114, 115, 122, 123, 127, 129, 138, 157, 161, 163, 164, 167, 174, 175, 176, 177, 181, 189, 190, 192, 295, 312, 330, 344, 394, 439, 443], "thei": [0, 3, 8, 10, 11, 15, 17, 21, 73, 80, 163, 164, 190, 191, 192, 330, 360, 373, 450], "try": [0, 2, 9, 11, 16, 34, 48, 49, 58, 59, 71, 72, 77, 80, 118, 138, 161, 163, 164, 174, 175, 177, 190, 364, 373], "erron": 0, "rsrc": 0, "2": [0, 6, 8, 10, 11, 14, 15, 20, 21, 31, 32, 33, 34, 35, 38, 39, 46, 48, 49, 58, 59, 62, 64, 65, 66, 70, 71, 72, 73, 74, 76, 77, 80, 81, 82, 84, 89, 94, 103, 107, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 128, 129, 130, 134, 138, 139, 141, 142, 144, 149, 150, 151, 157, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 181, 182, 189, 190, 191, 192, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 311, 321, 323, 330, 333, 334, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 356, 357, 360, 364, 373, 374, 377, 378, 381, 382, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 426, 427, 432, 440, 442, 443, 445, 446], "6": [0, 2, 6, 8, 14, 15, 17, 31, 32, 33, 34, 35, 46, 51, 71, 72, 80, 84, 94, 109, 110, 111, 112, 114, 118, 125, 138, 139, 141, 142, 144, 149, 161, 163, 164, 166, 167, 174, 175, 176, 177, 181, 182, 190, 192, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 344, 364, 373, 381, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 432, 445, 446], "doe": [0, 2, 9, 11, 16, 17, 18, 20, 21, 62, 80, 112, 114, 118, 177, 189, 198, 223, 248, 318, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 377, 378, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 440, 442, 449], "onc": [0, 3, 6, 11, 13, 74, 80, 112, 114, 129, 156, 176, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373], "receiv": [0, 2, 17], "amend": 0, "ask": [0, 2, 3, 10, 15, 20, 190, 191, 440, 441], "maintain": [0, 17, 109, 110, 111, 190, 191, 394, 419], "process": [0, 2, 6, 11, 14, 15, 17, 19, 20, 21, 31, 32, 161, 174, 175, 176, 192, 223, 322, 373, 426, 427, 439, 440, 443, 444], "hour": [0, 17, 19, 21, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "don": [0, 2, 10, 17, 20, 161, 174, 175, 177, 190, 191, 253, 330, 440, 449, 450], "wish": [0, 7, 8, 11, 17, 66, 70, 137, 139, 144, 162, 178, 190], "wait": [0, 21, 163, 164], "trigger": [0, 423], "reason": [0, 2, 8, 11, 16, 17, 21, 32, 77, 80, 118, 138, 177, 190, 295, 364, 373, 432, 442], "manual": [0, 2, 7, 8, 11, 19, 20, 31, 32, 33, 34, 71, 72, 189, 401, 440, 446, 450], "gener": [0, 2, 6, 9, 11, 14, 16, 17, 20, 21, 80, 95, 115, 138, 163, 164, 177, 189, 190, 191, 194, 198, 222, 223, 227, 228, 229, 257, 276, 277, 278, 279, 362, 369, 373, 379, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 424, 425, 434, 439, 440, 442, 444, 445, 449], "revis": [0, 2, 9, 11], "number": [0, 2, 8, 9, 11, 13, 16, 17, 21, 50, 62, 74, 77, 79, 80, 85, 106, 109, 110, 111, 114, 115, 118, 134, 137, 138, 139, 141, 144, 156, 176, 177, 189, 190, 219, 222, 223, 229, 231, 232, 234, 235, 240, 248, 251, 252, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 278, 279, 285, 288, 289, 290, 291, 292, 295, 301, 302, 303, 304, 305, 314, 315, 317, 318, 319, 320, 325, 336, 354, 364, 373, 377, 387, 390, 395, 398, 399, 401, 403, 414, 415, 417, 422, 442, 443, 445], "sha256": 0, "openssl": 0, "dgst": 0, "path": [0, 10, 15, 17, 70, 138, 162, 166, 167, 170, 171, 172, 223, 426, 427], "reset": [0, 80, 144, 162, 166], "0": [0, 6, 8, 10, 11, 16, 17, 20, 21, 31, 32, 33, 34, 35, 38, 39, 46, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 84, 85, 89, 90, 93, 94, 96, 98, 99, 101, 103, 106, 107, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 128, 129, 130, 134, 138, 139, 141, 142, 144, 149, 150, 156, 157, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 181, 182, 185, 189, 190, 191, 198, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 278, 322, 323, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 364, 373, 377, 379, 381, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 432, 440, 442, 445], "nist": [0, 2, 3, 6, 8, 11, 12, 17, 192, 373, 439], "gov": [0, 3, 8, 11, 16, 17, 318, 439], "how": [1, 2, 3, 11, 17, 20, 21, 31, 32, 66, 71, 72, 80, 138, 156, 157, 163, 164, 166, 189, 190, 191, 360, 414, 440, 441, 449], "read": [1, 2, 3, 11, 20, 21, 166, 189, 190, 191, 223, 364, 374, 379, 390, 440, 441], "modul": [1, 2, 4, 7, 8, 10, 11, 15, 16, 17, 19, 20, 21, 23, 24, 30, 37, 42, 43, 47, 52, 54, 57, 63, 69, 75, 83, 87, 88, 91, 97, 100, 107, 108, 117, 120, 121, 126, 132, 148, 154, 160, 165, 169, 180, 184, 188, 189, 190, 191, 192, 193, 200, 207, 209, 236, 244, 253, 254, 260, 262, 269, 270, 273, 275, 281, 287, 291, 297, 298, 306, 321, 325, 359, 360, 364, 365, 370, 373, 377, 378, 379, 384, 387, 395, 399, 401, 415, 424, 425, 426, 434, 441, 442, 446, 447, 448, 449], "mainten": 2, "releas": [2, 6, 9, 11, 17, 20, 21, 161, 174, 175, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 440, 441], "compat": [2, 17, 110, 190, 191, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "recent": [2, 6, 9, 11, 21, 189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 334, 341, 342, 345, 349, 356, 357, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "petsc": [2, 17, 20, 32, 84, 109, 439, 440], "numpi": [2, 16, 20, 21, 31, 32, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 440, 442], "25": [2, 17, 31, 32, 33, 118, 122, 161, 162, 174, 175, 176, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 323, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 432, 446], "930": 2, "get": [2, 3, 8, 17, 18, 20, 21, 118, 163, 164, 377, 394], "again": [2, 71, 72, 74, 76, 77, 79, 80, 92, 94, 96, 98, 99, 103, 110, 111, 112, 114, 115, 118, 163, 164, 176, 177, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 344], "925": 2, "discourag": 2, "stackoverflow": [2, 15, 20], "876": 2, "875": [2, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "nix": [2, 20, 440], "791": 2, "896": 2, "poor": [2, 17, 114, 443], "garbag": 2, "collect": [2, 11, 161, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 429, 439], "petsc4pi": [2, 11, 16, 17, 439], "18": [2, 80, 106, 174, 175, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 373, 418, 443, 446], "wa": [2, 4, 6, 8, 10, 12, 16, 17, 21, 62, 80, 162, 163, 164, 166, 167, 170, 171, 172, 189, 190, 360, 362, 364, 373, 381, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439], "memori": [2, 6, 32, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "leak": 2, "term": [2, 15, 17, 20, 21, 31, 32, 33, 34, 35, 48, 49, 50, 58, 59, 67, 73, 77, 85, 112, 113, 118, 137, 138, 139, 163, 164, 166, 167, 174, 175, 177, 181, 189, 190, 192, 197, 198, 201, 440, 443, 444, 445], "justerrorvector": [2, 20, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "isn": [2, 20, 440], "strictli": 2, "exampl": [2, 3, 6, 8, 10, 11, 13, 15, 16, 17, 19, 20, 21, 192, 360, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 441, 442, 443, 450], "contribut": [2, 4, 17, 21, 73, 196, 197, 330, 339, 344], "jon83carvalho": 2, "clarifi": 2, "mani": [2, 8, 9, 11, 17, 19, 21, 76, 77, 79, 80, 118, 163, 164, 177, 189, 190, 192, 360, 439, 444, 449], "point": [2, 7, 8, 10, 17, 21, 34, 70, 71, 72, 74, 80, 89, 94, 115, 118, 138, 157, 161, 163, 164, 174, 175, 177, 190, 223, 240, 373, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442], "migrat": [2, 3], "continu": [2, 8, 9, 11, 15, 17, 20, 67, 74, 89, 112, 115, 118, 190, 439, 440, 441, 442], "integr": [2, 9, 11, 17, 20, 21, 163, 164, 322, 364, 373, 439, 440, 441, 442], "updat": [2, 4, 8, 20, 35, 80, 118, 137, 141, 142, 144, 181, 278, 362, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439, 440, 441], "wheel": 2, "distribut": [2, 11, 12, 15, 17, 19, 21, 74, 115, 387, 395, 399, 401, 403, 415, 422, 439], "substanti": [2, 6], "refactor": [2, 4, 20, 440], "matric": [2, 17, 20, 21, 192, 198, 253, 442], "more": [2, 3, 6, 7, 9, 10, 11, 16, 17, 20, 21, 31, 33, 34, 48, 49, 50, 58, 59, 71, 72, 73, 80, 85, 112, 114, 122, 137, 139, 144, 163, 164, 177, 181, 189, 190, 191, 222, 223, 330, 344, 364, 373, 378, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 432, 440, 442, 449], "consist": [2, 7, 8, 114, 136, 223, 442, 444], "across": [2, 442], "solver": [2, 4, 6, 8, 11, 14, 17, 20, 21, 31, 33, 34, 35, 46, 51, 53, 55, 56, 60, 65, 79, 80, 81, 82, 84, 85, 89, 109, 110, 112, 118, 138, 163, 164, 166, 176, 177, 189, 190, 192, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 439, 440, 441, 442], "863": 2, "refin": [2, 8, 223], "851": 2, "debug": [2, 17, 20, 21, 360], "848": 2, "contact": [2, 7, 14, 15, 20, 189, 440, 446], "inform": [2, 11, 17, 156, 174, 175, 189, 318, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 383, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439], "singl": [2, 8, 10, 17, 19, 21, 31, 32, 33, 34, 73, 74, 109, 113, 115, 163, 164, 177, 181, 218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 429], "page": [2, 11, 13, 17, 322], "847": 2, "set": [2, 4, 8, 13, 15, 16, 17, 19, 20, 21, 32, 67, 70, 71, 72, 74, 80, 82, 106, 107, 115, 118, 122, 123, 125, 127, 128, 129, 130, 138, 139, 141, 142, 150, 156, 162, 163, 164, 166, 167, 177, 178, 190, 191, 192, 201, 227, 250, 253, 295, 318, 325, 362, 364, 373, 374, 377, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 444, 446, 449], "822": 2, "replac": [2, 17, 80, 118, 177, 190, 191, 192, 223, 377, 381, 432], "deprec": [2, 3, 8, 17, 20, 141, 142, 369, 382, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438], "type": [2, 7, 8, 11, 15, 17, 18, 21, 48, 49, 50, 58, 59, 80, 90, 137, 138, 139, 144, 156, 166, 177, 189, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 321, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 369, 373, 374, 377, 378, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439], "798": 2, "trilino": [2, 4, 11, 13, 17, 20, 32, 85, 192, 439, 440], "py3k": [2, 439], "797": 2, "7": [2, 6, 11, 15, 17, 31, 34, 71, 72, 94, 99, 109, 110, 111, 114, 118, 138, 139, 144, 157, 163, 164, 166, 181, 192, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 344, 364, 373, 377, 381, 382, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 446], "conda": [2, 11, 17, 20, 439, 440], "environ": [2, 8, 14, 16, 20, 21, 191, 364, 383, 424, 439, 440, 444], "795": 2, "stop": [2, 16], "divid": [2, 17, 20, 248, 364, 373, 377, 419, 442, 444], "zero": [2, 8, 17, 66, 67, 80, 81, 82, 125, 129, 137, 177, 178, 181, 253, 330, 344, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "warn": [2, 8, 16, 17, 110, 190, 295, 369], "lu": [2, 6, 84, 269, 279, 291, 442], "790": 2, "introduc": [2, 21, 62, 66, 110, 111, 118, 161, 174, 175, 190, 191], "sharedtemporaryfil": [2, 20, 364, 379], "bi": 2, "769": 2, "rais": [2, 10, 11, 112, 360, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "importerror": [2, 48, 49, 58, 59, 71, 72, 77, 80, 161, 163, 164, 174, 175, 177, 189], "768": 2, "disabl": 2, "tvtk": [2, 10, 17, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 360], "prerequisit": [2, 9, 11, 16, 17], "aren": 2, "met": 2, "764": 2, "tabul": 2, "depend": [2, 6, 9, 11, 17, 19, 20, 21, 71, 72, 80, 114, 118, 138, 150, 163, 164, 177, 190, 197, 223, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 362, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 423, 439, 440, 442, 445, 449], "ar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 21, 32, 35, 38, 39, 46, 51, 56, 67, 71, 72, 73, 74, 80, 81, 82, 90, 107, 109, 110, 111, 112, 113, 114, 115, 118, 134, 137, 138, 139, 144, 150, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 181, 189, 190, 191, 192, 197, 223, 234, 235, 240, 248, 252, 253, 295, 299, 318, 330, 333, 336, 337, 338, 339, 343, 344, 347, 350, 351, 352, 354, 360, 362, 364, 366, 373, 377, 381, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 442, 443, 444, 445, 449, 450], "763": 2, "749": 2, "stoke": [2, 118], "caviti": [2, 118], "non": [2, 8, 11, 12, 17, 31, 32, 33, 34, 35, 46, 49, 59, 71, 72, 80, 92, 94, 95, 137, 161, 163, 164, 174, 175, 181, 227, 228, 229, 276, 277, 278, 279, 312, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 374, 401, 442], "newtonian": 2, "748": 2, "721": 2, "862": 2, "could": [2, 6, 8, 15, 17, 71, 72, 115, 163, 164, 176, 181, 189, 190, 394], "load": [2, 94, 103, 374, 439], "qt": [2, 373], "platform": [2, 8, 9, 11, 17, 18, 439], "plugin": 2, "xcb": 2, "858": 2, "856": 2, "facevari": [2, 17, 20, 66, 80, 109, 110, 111, 112, 114, 118, 190, 194, 196, 197, 198, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 387, 390, 394, 395, 399, 401, 403, 414, 415, 418, 419, 422, 432, 434, 436, 437, 438, 440, 442], "accumul": [2, 137], "properli": [2, 8, 11, 17, 181, 190, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "parallel": [2, 4, 10, 11, 16, 20, 192, 222, 223, 299, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 364, 366, 439, 440], "850": 2, "switch": [2, 6, 118, 192, 439], "849": 2, "py27": 2, "pyspars": [2, 11, 17, 20, 21, 32, 35, 85, 190, 439, 440, 442], "fail": [2, 10, 16, 17, 189, 364, 373, 394], "841": 2, "matplotlib2dview": 2, "accept": [2, 8, 9, 11, 190, 330, 333, 336, 337, 338, 339, 343, 344, 347, 350, 351, 352, 354, 373], "color": [2, 10, 174, 175, 425], "map": [2, 17, 167, 360], "string": [2, 16, 360, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 450], "836": 2, "coupl": [2, 7, 8, 14, 15, 20, 21, 32, 82, 107, 118, 161, 162, 163, 164, 167, 174, 175, 181, 192, 322, 440, 442, 444], "high": [2, 4, 20, 85, 118, 379, 439, 440], "order": [2, 3, 5, 8, 9, 11, 16, 17, 20, 21, 31, 32, 33, 34, 35, 44, 45, 71, 72, 73, 80, 84, 85, 92, 118, 127, 128, 130, 138, 144, 161, 163, 164, 177, 181, 189, 190, 198, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 336, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 443, 444, 450], "diffus": [2, 4, 14, 15, 17, 19, 20, 31, 33, 34, 35, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 107, 112, 114, 115, 118, 134, 136, 138, 139, 144, 157, 161, 163, 164, 174, 175, 176, 177, 189, 192, 322, 330, 333, 336, 337, 338, 339, 343, 344, 347, 350, 351, 352, 354, 440, 441, 443, 444, 445], "incompat": [2, 11, 189, 190, 191, 364, 373], "833": 2, "tool": [2, 3, 11, 14, 17, 20, 21, 31, 32, 33, 34, 35, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 76, 77, 80, 81, 82, 94, 110, 113, 114, 115, 118, 122, 123, 125, 127, 129, 138, 156, 157, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 178, 181, 182, 189, 190, 191, 192, 354, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 442], "dump": [2, 8, 20, 166, 390], "undocu": 2, "alwai": [2, 7, 8, 9, 11, 15, 17, 31, 32, 33, 34, 80, 194, 222, 283, 285, 295, 316, 317, 320, 333, 343, 351, 352, 362, 377, 415, 423, 433, 442, 449], "gzip": [2, 374], "828": [2, 6], "colorbar": [2, 20, 118, 141, 174, 175, 425], "true": [2, 8, 17, 21, 31, 32, 62, 66, 67, 70, 73, 80, 94, 109, 112, 127, 134, 137, 139, 144, 157, 161, 163, 164, 174, 175, 176, 177, 181, 182, 185, 189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 364, 373, 374, 377, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "longer": [2, 6, 9, 11, 18, 21, 80, 177, 189, 190, 321, 439], "flow": [2, 8, 17, 20, 177, 181, 312, 322, 441, 443, 446], "826": 2, "gmsh": [2, 4, 10, 20, 70, 71, 72, 103, 137, 139, 144, 191, 223, 360, 439, 440], "818": 2, "gridnd": 2, "mesh": [2, 4, 8, 10, 11, 20, 21, 31, 32, 33, 34, 35, 38, 39, 46, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 84, 85, 89, 90, 93, 94, 95, 96, 98, 99, 103, 106, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 129, 136, 137, 138, 139, 141, 142, 144, 149, 150, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 178, 181, 182, 189, 190, 191, 197, 199, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 374, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 440, 442, 446], "cartesian": [2, 161, 174, 175, 222, 248, 387, 395, 399, 401, 422, 444], "811": [2, 373], "In": [2, 3, 7, 8, 9, 11, 13, 15, 16, 17, 19, 21, 46, 70, 71, 72, 73, 76, 77, 79, 80, 85, 92, 107, 110, 118, 137, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 177, 181, 189, 360, 394, 415, 442, 443, 447, 448, 449, 451], "9": [2, 6, 8, 9, 11, 14, 71, 72, 80, 81, 82, 94, 98, 106, 110, 112, 138, 139, 144, 161, 162, 163, 164, 174, 175, 181, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 323, 364, 373, 377, 381, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 425, 426, 427, 446], "__repr__": [2, 20, 194, 195, 196, 197, 198, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 276, 277, 278, 279, 280, 285, 288, 289, 290, 291, 292, 295, 299, 300, 301, 302, 303, 304, 305, 317, 318, 319, 320, 325, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 366, 367, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424], "throw": [2, 8, 71, 72], "except": [2, 10, 34, 48, 49, 58, 59, 71, 72, 77, 80, 138, 161, 163, 164, 174, 175, 177, 208, 223, 227, 253, 295, 325, 360, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 449], "ab": [2, 35, 70, 80, 94, 118, 123, 127, 128, 130, 163, 164, 177, 181, 182, 223, 330, 344, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "801": 2, "circleci": [2, 439], "36": 2, "serial": [2, 10, 11, 16, 17, 222, 223, 240, 360, 364], "extrem": [2, 17, 190, 295], "slow": [2, 8, 11, 17, 31, 32, 33, 34, 163, 164, 190, 445], "800": [2, 138, 161], "conda2_env": 2, "realli": [2, 8, 19, 282, 284, 323], "end": [2, 3, 7, 17, 35, 48, 50, 55, 58, 59, 70, 73, 74, 80, 112, 114, 115, 128, 130, 137, 138, 139, 144, 161, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 189, 360, 374, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 445, 450], "796": 2, "phase": [2, 4, 6, 8, 14, 15, 17, 19, 20, 21, 31, 32, 35, 107, 109, 111, 112, 114, 181, 190, 192, 441, 443, 446], "polyxt": [2, 7, 8, 20], "freez": [2, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "scipi": [2, 8, 10, 17, 20, 21, 48, 49, 58, 59, 71, 72, 76, 77, 80, 163, 164, 177, 255, 256, 259, 269, 360, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 440, 442], "792": 2, "circlequad": [2, 20], "781": 2, "matplolibview": 2, "ax": [2, 8, 20, 51, 56, 141, 161, 162, 174, 175, 257, 377, 425, 429], "properti": [2, 4, 12, 21, 31, 32, 137, 138, 139, 141, 142, 144, 174, 175, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 383, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438], "778": 2, "binder": [2, 20, 440], "762": 2, "equat": [2, 14, 16, 20, 21, 31, 32, 33, 34, 35, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 84, 107, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 127, 128, 129, 130, 134, 137, 138, 139, 144, 149, 150, 157, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 181, 189, 191, 192, 196, 197, 222, 223, 269, 276, 277, 278, 279, 280, 291, 319, 325, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 439, 440, 444, 445], "websit": [2, 9, 11], "right": [2, 8, 17, 20, 31, 32, 33, 34, 35, 48, 49, 50, 55, 58, 59, 66, 67, 70, 74, 80, 81, 82, 84, 107, 113, 115, 118, 122, 125, 128, 130, 134, 137, 138, 139, 149, 161, 162, 163, 164, 167, 174, 175, 176, 177, 181, 189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 440, 443, 444], "742": 2, "No": [2, 11, 80, 189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 439], "variabl": [2, 4, 6, 7, 11, 16, 20, 21, 32, 35, 48, 49, 50, 55, 58, 59, 62, 71, 72, 80, 81, 82, 84, 89, 93, 94, 103, 110, 118, 122, 123, 125, 127, 129, 138, 141, 142, 149, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 177, 181, 189, 190, 191, 195, 325, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 377, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439, 440, 442, 443, 444], "mag": [2, 20, 166, 167, 174, 175, 181, 182, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "735": 2, "pip": [2, 17, 20, 439], "734": 2, "residu": [2, 8, 80, 112, 118, 163, 164, 177, 181, 182, 277, 321, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "688": [2, 446], "need": [2, 3, 8, 9, 10, 11, 17, 19, 21, 31, 32, 33, 34, 46, 50, 73, 80, 111, 118, 138, 161, 163, 164, 174, 175, 177, 181, 189, 190, 191, 201, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 299, 325, 366, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 446, 449, 450], "circl": [2, 7, 8, 17, 20, 34, 72, 157, 166, 167, 174, 175, 223, 394, 414], "viewer": [2, 11, 17, 19, 20, 21, 31, 32, 33, 34, 35, 38, 39, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 76, 77, 80, 81, 82, 84, 89, 93, 94, 106, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 129, 138, 139, 141, 142, 144, 156, 157, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 178, 181, 182, 189, 190, 387, 395, 399, 401, 422, 439, 440, 441], "676": 2, "default": [2, 6, 11, 13, 19, 20, 22, 62, 66, 80, 81, 82, 137, 138, 141, 142, 156, 163, 166, 174, 175, 189, 190, 222, 255, 256, 259, 263, 264, 265, 266, 267, 268, 280, 288, 289, 290, 292, 301, 302, 303, 305, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 362, 364, 369, 373, 377, 378, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 440, 450], "flux": [2, 8, 20, 31, 33, 34, 66, 80, 118, 161, 163, 164, 174, 175, 177, 181, 196, 440, 442], "condit": [2, 10, 16, 20, 21, 31, 32, 35, 48, 49, 50, 55, 58, 59, 66, 67, 71, 72, 73, 76, 80, 81, 82, 84, 85, 89, 101, 111, 118, 127, 129, 138, 141, 142, 163, 164, 166, 167, 170, 171, 172, 177, 181, 189, 190, 191, 194, 196, 197, 198, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 379, 394, 440, 443, 444], "explicitli": [2, 8, 11, 76, 80, 115, 161, 163, 164, 174, 175, 177, 189, 377], "609": 2, "clearli": [2, 8, 21, 163, 164], "400": [2, 6, 109, 113, 114, 163, 164, 166, 176, 177], "globalvalu": [2, 17, 20, 31, 46, 102, 118, 177, 185, 330, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 418, 419, 422], "method": [2, 6, 8, 10, 16, 17, 19, 20, 21, 73, 79, 80, 118, 129, 156, 163, 164, 177, 181, 189, 190, 191, 192, 276, 277, 278, 279, 280, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 362, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 440, 443, 444, 446, 449, 450], "assort": 2, "convect": [2, 15, 17, 20, 107, 163, 164, 176, 189, 192, 312, 322, 325, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 418, 440, 441, 443, 444, 445], "boundari": [2, 20, 21, 35, 48, 49, 50, 55, 58, 59, 66, 67, 71, 72, 73, 76, 80, 81, 82, 84, 89, 101, 112, 114, 118, 127, 129, 136, 137, 138, 139, 141, 142, 144, 163, 164, 166, 167, 170, 171, 172, 176, 177, 181, 189, 190, 191, 194, 196, 197, 198, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 440, 444], "spheric": [2, 222, 241, 242], "There": [2, 11, 13, 17, 134, 137, 163, 164, 177, 190, 394], "known": [2, 7, 8, 17, 21, 31, 32, 161, 163, 164, 174, 175, 394, 442, 444], "vtk": [2, 18, 424, 434, 436, 437, 438], "bitrot": 2, "ha": [2, 6, 7, 8, 11, 13, 17, 18, 19, 21, 31, 32, 33, 34, 46, 49, 59, 62, 71, 72, 73, 74, 80, 89, 111, 112, 113, 114, 115, 118, 137, 138, 139, 141, 156, 166, 167, 176, 177, 190, 191, 192, 198, 295, 362, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 442], "start": [2, 9, 17, 20, 31, 32, 33, 34, 112, 114, 118, 134, 161, 162, 163, 164, 174, 175, 176, 178, 190, 248, 360, 381], "demis": 2, "also": [2, 3, 4, 6, 8, 11, 13, 16, 17, 18, 19, 21, 31, 32, 71, 72, 73, 80, 81, 82, 118, 137, 139, 141, 142, 144, 149, 163, 164, 181, 190, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 364, 369, 373, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439, 442, 443], "nonuniformgrid1d": [2, 20, 222], "figur": [2, 6, 17, 141, 161, 174, 175, 425, 442], "out": [2, 11, 12, 17, 66, 161, 163, 174, 175, 181, 248, 257, 360, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 442], "747": 2, "spherical1d": 2, "uniform": [2, 74, 80, 109, 110, 111, 113, 114, 115, 161, 163, 164, 166, 174, 175, 176, 252, 374, 387, 395, 399, 401, 422], "nonuniform": [2, 446], "732": 2, "klkuhlm": 2, "neumann": [2, 20, 81, 82, 196, 440], "bc": [2, 35, 84, 85], "constraint": [2, 17, 20, 67, 138, 176, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "719": 2, "atism": 2, "vertex": [2, 20, 92, 219, 223, 229, 231, 234, 240, 248, 440, 444], "index": [2, 8, 11, 163, 164, 252, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439], "invers": [2, 364, 373, 399], "716": 2, "726": 2, "mayavicli": [2, 20, 34, 157, 426], "663": 2, "datamin": [2, 31, 32, 33, 34, 35, 39, 70, 71, 72, 80, 81, 82, 89, 109, 110, 111, 112, 114, 122, 123, 125, 127, 129, 138, 141, 142, 161, 162, 163, 164, 166, 167, 174, 175, 176, 178, 190, 387, 395, 399, 401, 422, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438], "datamax": [2, 31, 32, 33, 34, 35, 39, 70, 71, 72, 80, 81, 82, 89, 109, 110, 111, 112, 114, 122, 123, 125, 127, 129, 138, 141, 142, 161, 162, 163, 164, 166, 167, 174, 175, 176, 178, 190, 387, 395, 399, 401, 422, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438], "argument": [2, 8, 16, 118, 137, 139, 141, 142, 144, 156, 190, 191, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 378, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 449, 450], "ignor": [2, 17, 163, 164, 176, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 279, 304, 321, 330, 378], "662": 2, "scale": [2, 17, 21, 110, 112, 118, 141, 163, 164, 249, 399], "arg": [2, 177, 192, 218, 219, 220, 221, 223, 233, 234, 235, 240, 241, 242, 276, 277, 280, 285, 320, 321, 360, 369, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "primarili": [2, 17, 80, 442], "711": 2, "broken": [2, 9, 11, 21, 138], "plm_rsh_agent": 2, "error": [2, 11, 12, 17, 20, 21, 35, 71, 72, 80, 92, 94, 95, 113, 118, 149, 150, 189, 223, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 278, 279, 285, 288, 289, 290, 291, 292, 295, 301, 302, 303, 304, 305, 317, 318, 319, 320, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 440, 442], "710": 2, "708": 2, "703": [2, 446], "fortran": [2, 6, 21, 161, 162, 166, 167, 170, 171, 172, 439], "arrai": [2, 6, 8, 17, 21, 35, 51, 70, 90, 102, 122, 127, 128, 130, 138, 163, 164, 174, 175, 182, 192, 252, 330, 333, 334, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 356, 357, 364, 373, 377, 381, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439], "support": [2, 4, 8, 11, 16, 17, 18, 20, 181, 189, 190, 257, 258, 269, 285, 291, 295, 318, 319, 320, 362, 373, 424, 440, 442, 450], "solv": [2, 6, 14, 16, 20, 21, 31, 32, 33, 34, 35, 38, 39, 46, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 84, 85, 89, 90, 92, 93, 94, 96, 98, 99, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 128, 129, 130, 134, 138, 149, 150, 151, 157, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 181, 189, 190, 191, 253, 257, 269, 276, 277, 278, 279, 280, 291, 318, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 439, 440, 442, 443, 444], "701": 2, "while": [2, 4, 6, 8, 17, 21, 31, 32, 33, 34, 62, 66, 70, 73, 80, 112, 138, 163, 164, 174, 175, 177, 181, 182, 364, 373, 442, 445], "700": 2, "print": [2, 15, 16, 17, 21, 31, 32, 35, 38, 39, 46, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 74, 76, 77, 79, 80, 81, 82, 84, 85, 89, 90, 93, 94, 96, 98, 99, 102, 103, 106, 109, 110, 112, 114, 115, 118, 123, 125, 127, 128, 129, 130, 138, 149, 150, 151, 162, 163, 164, 166, 167, 170, 171, 172, 176, 177, 181, 182, 185, 189, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 356, 357, 360, 364, 373, 374, 377, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "statement": [2, 189], "processor": [2, 10, 17, 109, 364, 379, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 439], "write": [2, 8, 20, 21, 71, 72, 73, 80, 118, 138, 144, 163, 164, 166, 181, 189, 190, 223, 364, 374, 379, 390], "timetest": 2, "forg": [2, 11, 17, 20, 440], "upload": [2, 20, 440], "option": [2, 6, 8, 10, 17, 20, 22, 141, 142, 192, 255, 256, 259, 263, 264, 265, 266, 267, 268, 272, 276, 277, 280, 318, 360, 362, 364, 369, 373, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 440, 450], "fipy_display_matrix": [2, 17], "legaci": [2, 9, 11], "matplotlib": [2, 8, 11, 17, 20, 141, 174, 175, 424, 425, 439, 440], "built": [2, 9, 11, 21, 122, 138, 156, 162, 166, 167, 174, 175, 227, 228, 229], "symlog": 2, "clean": [2, 360], "benchmark": [2, 20], "8": [2, 6, 10, 11, 34, 71, 72, 79, 80, 89, 94, 96, 106, 118, 138, 139, 144, 157, 161, 163, 164, 176, 177, 181, 182, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 354, 364, 373, 377, 381, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 446], "699": [2, 446], "stipul": 2, "forc": [2, 11, 16, 17], "miniconda": [2, 11], "url": [2, 446], "_cellvolumeaveragevari": 2, "class": [2, 4, 8, 10, 16, 17, 21, 84, 109, 110, 111, 112, 113, 114, 115, 118, 141, 142, 161, 174, 175, 189, 190, 191, 194, 195, 196, 197, 198, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 288, 289, 290, 291, 292, 295, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 362, 363, 364, 366, 367, 373, 377, 383, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 449, 450], "express": [2, 6, 8, 11, 12, 13, 17, 21, 32, 35, 109, 118, 161, 163, 164, 174, 175, 177, 181, 223, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 442], "bad": [2, 3], "call": [2, 15, 17, 21, 80, 138, 181, 189, 190, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 317, 321, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 362, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 449, 450], "stack": [2, 11], "make": [2, 6, 7, 10, 11, 13, 17, 20, 21, 31, 33, 34, 35, 70, 107, 114, 118, 134, 163, 164, 174, 175, 176, 177, 181, 189, 190, 191, 339, 364, 373, 390, 394, 398, 401, 403, 414, 417, 418, 419, 423, 439, 440, 441, 442, 449], "698": 2, "nick": [2, 444], "croft": [2, 444, 446], "thesi": [2, 444, 446], "681": 2, "header": 2, "footer": 2, "680": 2, "nixpkg": [2, 11, 13], "661": 2, "recip": [2, 11, 13, 323, 446], "658": 2, "692": 2, "copi": [2, 3, 7, 9, 11, 12, 17, 20, 80, 109, 110, 111, 112, 113, 114, 115, 181, 182, 360, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439], "script": [2, 7, 15, 17, 20, 31, 32, 71, 72, 80, 122, 123, 127, 129, 138, 144, 176, 181, 189, 190, 191, 223, 359, 362, 426, 427, 439, 440, 449], "command": [2, 7, 8, 9, 11, 13, 15, 16, 20, 80, 90, 122, 127, 129, 137, 138, 139, 144, 156, 177, 192, 362, 378, 440], "line": [2, 8, 10, 11, 15, 16, 20, 21, 34, 71, 72, 77, 80, 89, 90, 94, 137, 138, 139, 144, 156, 157, 161, 177, 192, 223, 248, 362, 377, 378, 424, 440, 442], "669": 2, "input": [2, 7, 8, 15, 19, 20, 21, 32, 39, 40, 62, 67, 71, 72, 74, 76, 77, 79, 80, 81, 82, 89, 92, 93, 94, 96, 99, 103, 106, 115, 137, 138, 139, 144, 163, 164, 177, 181, 182, 189, 364, 373, 377], "deadlock": 2, "643": 2, "bring": 2, "from": [2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 31, 32, 33, 34, 35, 38, 39, 46, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 84, 89, 90, 93, 94, 103, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 129, 134, 136, 137, 138, 139, 141, 142, 144, 149, 150, 151, 156, 157, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 181, 182, 189, 190, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 308, 317, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 362, 364, 373, 374, 377, 378, 379, 381, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 432, 440, 442, 445, 446, 449, 450], "same": [2, 8, 17, 19, 32, 73, 79, 80, 89, 94, 96, 98, 99, 103, 110, 111, 112, 113, 114, 138, 139, 163, 164, 166, 176, 177, 189, 192, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 362, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 432, 442], "sourc": [2, 7, 9, 11, 14, 15, 17, 18, 20, 32, 55, 56, 66, 70, 73, 107, 112, 113, 118, 138, 161, 163, 164, 166, 167, 174, 175, 176, 177, 190, 192, 415, 439, 440, 443, 444], "translat": [2, 6, 21, 163, 164, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "pya": [2, 17], "woodscn": [2, 17], "thing": [2, 3, 8, 10, 11, 17, 189, 190, 442, 449, 450], "spell": [2, 17], "657": 2, "window": [2, 11, 17, 19, 141, 142, 424, 425, 426, 427, 432, 433, 434, 436, 437, 438, 439], "648": 2, "sphinx": [2, 17, 439], "647": 2, "645": 2, "gmshmesh": [2, 20], "644": 2, "xfong": 2, "655": 2, "mayavi": [2, 8, 11, 17, 20, 137, 142, 144, 424, 426, 427, 439, 440], "wont": 2, "hendrik410": 2, "646": 2, "branch": [2, 20, 161, 174, 175, 440], "601": 2, "content": [2, 432, 447, 448, 451], "rst": 2, "recurs": [2, 442], "mess": 2, "597": 2, "compress": [2, 11, 374, 446], "archiv": [2, 9, 11, 15, 17, 20], "557": 2, "facegradaverag": [2, 20, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "stupid": 2, "552": 2, "458": 2, "wrong": [2, 8, 190], "preced": [2, 16, 17], "lx": [2, 73, 76, 79, 89, 90, 93, 94, 96, 98, 99, 103, 125, 127, 141, 142, 167, 181, 182, 190, 222, 373], "dx": [2, 17, 31, 32, 33, 35, 38, 39, 50, 51, 53, 55, 56, 62, 64, 65, 66, 67, 74, 76, 77, 79, 80, 81, 82, 84, 89, 90, 96, 98, 99, 103, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 128, 129, 130, 138, 141, 142, 150, 156, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 178, 181, 182, 189, 190, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 334, 341, 342, 344, 345, 349, 356, 357, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 425, 426, 427, 432], "nonuniformgrid": 2, "457": 2, "special": [2, 12, 17, 21, 48, 49, 58, 59, 71, 72, 76, 77, 80, 161, 163, 164, 174, 175, 350, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 449, 450], "includ": [2, 4, 7, 11, 12, 13, 15, 17, 19, 67, 118, 137, 161, 163, 164, 174, 175, 176, 190, 191, 192, 223, 432, 442, 443, 449], "432": 2, "340": 2, "packag": [2, 8, 10, 16, 17, 18, 20, 21, 71, 72, 141, 142, 161, 174, 175, 317, 318, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 382, 394, 426, 427, 439, 440, 441, 451], "just": [2, 7, 8, 17, 21, 77, 80, 163, 164, 176, 177, 282, 284, 362, 364, 373, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 444], "master": [2, 9, 11, 13, 20, 440], "predominantli": 2, "devop": 2, "focu": [2, 176], "been": [2, 6, 7, 8, 11, 13, 15, 17, 21, 62, 74, 80, 129, 137, 138, 139, 144, 156, 176, 189, 190, 191, 192, 223, 362, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 442], "easier": [2, 8, 21, 181, 189, 190, 191, 223], "It": [2, 3, 6, 8, 11, 16, 17, 18, 19, 31, 32, 48, 49, 58, 59, 73, 80, 95, 118, 138, 139, 163, 164, 177, 189, 190, 198, 223, 248, 317, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 432, 439], "possibl": [2, 8, 10, 17, 21, 73, 80, 110, 163, 164, 177, 223, 318, 360, 362, 364, 373, 425, 443], "minim": [2, 3, 6, 8, 277, 312, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "base": [2, 6, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 80, 90, 118, 137, 138, 139, 144, 156, 162, 177, 192, 194, 223, 283, 285, 295, 311, 312, 316, 322, 323, 325, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 440, 442, 446, 450], "maco": [2, 109, 439], "travisci": [2, 439], "appveyor": [2, 439], "badg": 2, "636": 2, "robin": [2, 7, 20, 440], "615": 2, "issue555": 2, "inclus": [2, 17, 422], "licens": [2, 11, 21], "613": [2, 446], "607": 2, "600": [2, 401], "explain": [2, 7, 8, 11, 17, 138], "where": [2, 10, 15, 17, 19, 20, 21, 31, 32, 33, 34, 35, 62, 66, 70, 74, 77, 80, 106, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 129, 137, 138, 139, 141, 142, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 181, 182, 189, 190, 194, 195, 196, 197, 198, 321, 330, 334, 339, 341, 342, 345, 347, 349, 354, 356, 364, 373, 377, 381, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 440, 442, 443, 445], "596": 2, "correct": [2, 8, 10, 17, 35, 74, 80, 111, 113, 115, 118, 150, 166, 167, 174, 175, 181, 373, 374, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 425, 434, 442], "en_u": [2, 17], "dictionari": [2, 17, 360], "594": 2, "smoothedaggregationsolv": 2, "593": 2, "585": 2, "tarbal": 2, "582": 2, "navier": [2, 118], "viscou": [2, 118], "limit": [2, 8, 12, 16, 17, 80, 118, 134, 141, 142, 161, 163, 164, 174, 175, 177, 181, 190, 192, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438], "580": 2, "stokescav": [2, 7, 8, 20], "579": 2, "rowin": 2, "inlin": [2, 4, 6, 8, 11, 17, 20, 192, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439], "578": 2, "577": 2, "epetra": [2, 299], "vector": [2, 8, 20, 32, 71, 72, 73, 118, 189, 190, 196, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 325, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 377, 394, 440, 442], "numarrai": [2, 439], "574": 2, "codaci": 2, "572": 2, "pytrilino": [2, 16, 17, 439, 442], "unavail": [2, 11, 13, 48, 49, 58, 59, 177, 382], "570": 2, "shwina": 2, "569": 2, "gpu": [2, 16, 439], "via": [2, 8, 11, 14, 17, 136, 442], "pyamgx": [2, 17, 20, 35, 439, 440], "567": 2, "dedic": 2, "public": [2, 8, 12, 18, 20, 21, 373, 439, 440, 441, 446], "domain": [2, 17, 21, 31, 32, 35, 70, 71, 72, 74, 77, 80, 81, 89, 90, 109, 110, 111, 115, 118, 129, 138, 161, 162, 163, 164, 166, 167, 170, 174, 175, 177, 178, 181, 222, 223, 307, 310, 311, 442, 444], "556": 2, "550": 2, "546": 2, "ensur": [2, 80, 364, 373], "dtype": 2, "float": [2, 10, 21, 49, 59, 70, 141, 142, 190, 194, 196, 197, 198, 222, 248, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 278, 279, 285, 288, 289, 290, 291, 292, 295, 301, 302, 303, 304, 305, 317, 318, 319, 320, 321, 325, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438], "matrix": [2, 6, 8, 11, 16, 17, 20, 21, 70, 73, 80, 85, 118, 161, 163, 164, 174, 175, 177, 181, 182, 190, 197, 253, 276, 277, 278, 279, 280, 321, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 439, 442, 443], "multipli": [2, 20, 21, 325, 330, 333, 334, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 356, 357, 364, 373], "544": 2, "revert": [2, 223], "issue534": 2, "physic": [2, 8, 14, 19, 21, 73, 110, 138, 177, 181, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 443, 445, 446], "field": [2, 4, 6, 8, 14, 15, 17, 19, 20, 21, 35, 67, 73, 80, 107, 111, 112, 113, 114, 118, 138, 139, 144, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 181, 190, 192, 330, 364, 373, 377, 390, 441, 443, 446], "mishandl": 2, "compound": 2, "unit": [2, 12, 20, 21, 110, 118, 125, 138, 139, 144, 163, 164, 359, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "536": 2, "532": 2, "race": [2, 379], "524": 2, "max": [2, 4, 16, 31, 46, 70, 73, 94, 112, 118, 128, 138, 150, 157, 181, 182, 185, 190, 330, 344, 377, 394], "min": [2, 20, 31, 32, 33, 34, 35, 112, 127, 157, 181, 182, 190, 330, 344, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "global": [2, 14, 17, 21, 150, 151, 360], "520": 2, "gitter": 2, "chat": 2, "516": 2, "badger": 2, "489": 2, "631": 2, "628": 2, "627": 2, "omp_num_thread": [2, 17], "625": [2, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "import": [2, 4, 8, 10, 16, 17, 21, 31, 32, 33, 34, 35, 38, 39, 46, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 84, 89, 93, 94, 103, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 129, 134, 138, 141, 142, 149, 150, 151, 156, 157, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 181, 182, 189, 190, 191, 192, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 374, 377, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 426, 427, 432, 449], "623": 2, "621": 2, "plot": [2, 17, 18, 20, 31, 32, 33, 34, 35, 38, 39, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 76, 77, 80, 81, 82, 84, 89, 90, 93, 94, 106, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 129, 137, 138, 139, 141, 142, 144, 156, 157, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 178, 181, 182, 189, 387, 395, 399, 401, 422, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439, 440], "617": 2, "pick": 2, "1st": 2, "valu": [2, 6, 7, 8, 10, 19, 20, 21, 31, 32, 35, 38, 39, 51, 53, 56, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 76, 77, 80, 81, 82, 84, 89, 93, 94, 103, 106, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 128, 129, 137, 138, 139, 141, 142, 144, 150, 156, 157, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 178, 181, 182, 189, 190, 194, 195, 196, 197, 198, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 295, 325, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 362, 364, 373, 377, 378, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 440, 442, 445, 450], "1d": [2, 18, 35, 48, 49, 50, 55, 58, 59, 76, 77, 79, 80, 84, 92, 93, 94, 95, 98, 99, 103, 106, 109, 110, 112, 113, 114, 115, 134, 141, 142, 156, 163, 164, 176, 177, 182, 189, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 394, 419, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439], "cellvari": [2, 17, 20, 21, 31, 32, 33, 34, 35, 38, 39, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 76, 77, 80, 81, 82, 84, 89, 93, 94, 103, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 129, 138, 141, 156, 157, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 178, 181, 182, 189, 190, 223, 233, 321, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 377, 387, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 432, 433, 434, 436, 437, 438, 440], "611": 2, "coeffici": [2, 4, 17, 20, 32, 35, 48, 49, 50, 58, 59, 66, 70, 76, 80, 93, 107, 109, 113, 118, 137, 138, 139, 144, 161, 162, 163, 164, 174, 175, 177, 189, 197, 198, 276, 277, 278, 279, 280, 325, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 418, 440, 442, 443, 445], "cannot": [2, 6, 8, 9, 11, 16, 17, 21, 32, 73, 118, 163, 190, 218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 325, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 442], "610": 2, "anisotropi": [2, 6, 7, 8, 17, 19, 20, 162, 174, 175], "contour": [2, 18, 90, 139, 141, 142, 161, 439], "displai": [2, 17, 18, 20, 21, 35, 71, 72, 80, 95, 112, 114, 137, 138, 139, 141, 142, 144, 161, 174, 175, 369, 377, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439], "legend": [2, 17, 425], "608": 2, "var": [2, 8, 17, 20, 31, 32, 33, 34, 35, 38, 39, 46, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 84, 85, 89, 90, 93, 94, 96, 98, 99, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 128, 129, 130, 138, 141, 142, 157, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 178, 181, 182, 189, 190, 321, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 362, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438], "object": [2, 4, 6, 8, 14, 16, 17, 20, 67, 71, 72, 80, 90, 94, 122, 123, 127, 129, 136, 138, 141, 142, 156, 161, 174, 175, 177, 178, 189, 190, 192, 195, 198, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 269, 277, 280, 282, 283, 284, 285, 291, 295, 301, 302, 303, 305, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 374, 377, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439, 440, 442, 449], "callabl": 2, "603": 2, "basic": [2, 8, 11, 16, 17, 19, 21, 156, 223, 378], "602": 2, "592": 2, "590": 2, "pyamgsolv": 2, "584": 2, "anim": [2, 141, 142], "jupyt": [2, 11], "notebook": [2, 11], "566": 2, "565": 2, "empti": [2, 174, 175, 360], "env": 2, "564": 2, "board": 2, "561": 2, "cast": [2, 8, 364, 373, 442, 446], "data": [2, 16, 18, 20, 21, 35, 138, 141, 142, 162, 166, 167, 170, 171, 172, 192, 373, 374, 377, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439, 440, 449], "int64": 2, "int32": 2, "accord": [2, 177], "rule": [2, 34, 157, 163, 164], "safe": [2, 66, 362], "555": 2, "551": 2, "spew": 2, "545": 2, "543": 2, "integ": [2, 80, 190, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "539": 2, "explicit": [2, 8, 17, 20, 32, 44, 73, 80, 138, 162, 163, 164, 167, 170, 171, 172, 177, 181, 190, 191, 325, 334, 341, 342, 345, 349, 350, 356, 357, 442, 445], "mixedel": [2, 20], "538": 2, "534": 2, "physicalfield": [2, 20, 110, 112, 364, 423], "533": 2, "531": 2, "drop_tol": 2, "spars": [2, 11, 16, 177, 192, 269, 291, 439, 442], "linalg": [2, 269, 291], "splu": [2, 269, 291], "gone": 2, "530": 2, "instruct": [2, 7, 9, 11, 17, 449, 450], "528": 2, "525": [2, 111], "guyer": [2, 4, 14, 107, 446], "osx": 2, "513": 2, "give": [2, 8, 11, 16, 17, 21, 112, 114, 144, 176, 177, 223, 330, 360, 394], "510": 2, "weav": [2, 8, 11, 17, 21, 439], "509": 2, "unabl": 2, "506": 2, "spatial": [2, 8, 20, 31, 33, 34, 80, 118, 440], "vari": [2, 8, 20, 21, 71, 72, 80, 89, 166, 440], "anisotrop": [2, 4, 19, 20, 70, 161, 174, 175, 440], "488": 2, "break": [2, 10, 17, 31, 112, 181, 182], "gmshgrid": 2, "435": 2, "fatal": 2, "spmatrix": 2, "h": [2, 14, 17, 174, 175, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 443, 446], "file": [2, 7, 9, 10, 11, 13, 15, 17, 20, 21, 38, 39, 40, 71, 72, 76, 77, 79, 92, 93, 94, 95, 96, 98, 99, 103, 137, 138, 139, 141, 142, 144, 162, 166, 167, 170, 171, 172, 223, 362, 364, 374, 379, 387, 395, 399, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438, 449], "found": [2, 7, 9, 11, 17, 21, 48, 49, 50, 58, 59, 80, 90, 118, 139, 161, 163, 164, 174, 175, 177, 189, 190, 191, 439, 447, 448, 449, 451], "434": 2, "ez_setup": 2, "502": 2, "gmane": [2, 3, 8], "defunct": [2, 3, 439], "recvobj": 2, "allgath": 2, "sendobj": 2, "492": 2, "restor": 2, "trail": 2, "whitespac": 2, "expect": [2, 7, 8, 17, 76, 77, 80, 163, 164, 177, 377, 442], "485": 2, "pep": [2, 10, 439], "440": 2, "483": 2, "provid": [2, 3, 6, 8, 9, 11, 12, 15, 16, 17, 19, 21, 85, 89, 109, 110, 111, 134, 138, 192, 223, 317, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 377, 379, 432, 439, 442, 449, 450], "_facetocelldistanceratio": [2, 17], "why": [2, 17, 20, 360, 440], "scalar": [2, 17, 190, 218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "481": 2, "strip": 2, "white": 2, "space": [2, 21, 49, 59, 80, 139, 144, 157, 163, 164, 177, 190, 221, 222, 251, 252, 401, 443], "eof": 2, "r": [2, 14, 19, 31, 32, 33, 34, 38, 39, 48, 49, 58, 59, 67, 70, 80, 118, 138, 139, 141, 144, 150, 157, 161, 163, 164, 174, 175, 176, 181, 182, 223, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 426, 427, 446], "479": 2, "uniformgrid3d": [2, 20, 222], "_celltocellid": 2, "concaten": [2, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "478": 2, "pkgw": 2, "incorrect": [2, 80, 325, 377], "axi": [2, 8, 19, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 64, 65, 125, 189, 190, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 373, 377, 381, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "477": 2, "472": 2, "471": 2, "sort": 2, "entri": [2, 17, 196, 197, 373], "469": 2, "syntax": [2, 11, 15, 17, 21, 163, 164, 189, 190, 191], "466": 2, "465": 2, "implement": [2, 6, 11, 14, 15, 16, 17, 20, 118, 144, 162, 163, 164, 192, 199, 227, 243, 253, 295, 318, 325, 362, 420, 424, 428, 430, 435, 440, 441], "cahnhilliard": [2, 6, 7, 8, 17, 20], "mesh2dcoupl": [2, 7, 8, 17, 20], "463": [2, 14], "typeset": 2, "analyt": [2, 8, 35, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 70, 71, 72, 74, 76, 77, 80, 84, 90, 106, 112, 113, 114, 115, 134, 177, 189, 354], "solut": [2, 6, 8, 15, 16, 17, 21, 35, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 74, 76, 77, 79, 80, 81, 82, 84, 85, 89, 90, 93, 94, 103, 107, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 127, 129, 134, 150, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 177, 189, 190, 192, 198, 295, 325, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 439, 442, 444, 445], "460": 2, "pdflatex": 2, "head": [2, 6, 359], "459": [2, 373], "purg": 2, "gist": 2, "456": [2, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 356, 357], "duplic": [2, 3, 360, 364, 373, 390, 394, 398, 403, 414, 417, 418, 419, 423], "ufunc": [2, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "454": 2, "452": 2, "getter": [2, 191], "setter": [2, 191], "450": 2, "448": 2, "render": [2, 8, 15, 21, 80, 192, 419, 434, 436, 437, 438], "ipython": [2, 17, 439], "447": 2, "proper": [2, 118], "446": 2, "robust": [2, 253], "distutil": [2, 382], "strictvers": 2, "442": 2, "compar": [2, 6, 11, 17, 35, 46, 70, 80, 90, 134, 139, 161, 162, 166, 167, 170, 171, 172, 177, 223, 354, 364, 373, 377, 387, 395, 399, 401], "tupl": [2, 8, 109, 110, 111, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 374, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 442], "441": 2, "two": [2, 8, 10, 11, 17, 19, 21, 31, 32, 73, 81, 82, 98, 109, 110, 111, 112, 114, 118, 127, 128, 130, 161, 163, 164, 166, 167, 170, 174, 175, 176, 181, 189, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 373, 377, 394, 418, 442, 446, 449], "439": 2, "alfrenardi": 2, "issue426": 2, "typo": 2, "431": 2, "raybsmith": 2, "429": 2, "matplotlibview": [2, 8, 20, 174, 175], "428": 2, "period": [2, 46, 89, 167, 233, 234, 235], "3d": [2, 18, 33, 112, 157, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 439], "424": 2, "419": 2, "498": 2, "nonlinear": [2, 8], "496": 2, "linearbicgstabsolv": [2, 20], "take": [2, 6, 17, 20, 21, 76, 80, 112, 125, 161, 163, 164, 174, 175, 176, 177, 181, 190, 191, 219, 223, 229, 231, 234, 240, 248, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 440], "494": 2, "493": 2, "review": [2, 14, 20, 440, 446], "io": [2, 11, 13, 16, 364, 379, 439], "access": [2, 17, 19, 21, 161, 174, 175, 190, 364, 379, 449], "leav": [2, 11, 19, 80, 118, 163, 164], "comment": [2, 11, 17, 21], "491": 2, "mpi4pi": [2, 11, 16, 17, 439], "484": 2, "482": 2, "compliant": 2, "476": 2, "setuptool": 2, "suit": [2, 3, 11, 16, 17, 138, 192, 257, 258, 269, 285, 291, 295, 319, 320, 439, 442], "475": 2, "grid3d": [2, 20, 33, 101, 102, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 426, 427], "470": 2, "mesh3d": [2, 20], "celltocellid": 2, "467": 2, "sequenc": [2, 21, 364, 373, 377], "462": 2, "incorrectli": 2, "455": 2, "445": 2, "dendriteview": [2, 161], "put": [2, 17, 20, 31, 33, 34, 190, 364, 373, 377, 381, 440], "over": [2, 10, 17, 21, 31, 32, 33, 34, 35, 62, 80, 89, 109, 118, 129, 161, 163, 164, 176, 177, 190, 191, 278, 280, 377, 415, 442, 444, 445], "bar": [2, 174, 175, 176, 181, 362, 373, 425], "443": 2, "api": [2, 8], "nice": [2, 439], "438": 2, "437": 2, "mislead": 2, "433": 2, "430": 2, "427": 2, "425": [2, 174, 175], "warren": [2, 4, 14, 107, 161, 162, 166, 167, 174, 175, 446], "421": 2, "matplotlib2dgridview": [2, 161, 174, 175], "function": [2, 8, 10, 11, 17, 19, 21, 31, 32, 35, 71, 72, 80, 107, 111, 122, 123, 129, 136, 138, 139, 144, 149, 163, 164, 166, 176, 177, 181, 190, 191, 192, 201, 219, 222, 223, 229, 231, 234, 240, 248, 321, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 364, 368, 369, 373, 374, 376, 377, 378, 379, 381, 394, 415, 424, 425, 434, 442, 443, 444, 449], "416": 2, "reflect": [2, 364, 373, 390, 394, 398, 403, 414, 417, 418, 419, 423], "415": 2, "matplotlibgrid2dview": 2, "414": 2, "periodicgrid3d": [2, 20], "413": 2, "remind": 2, "user": [2, 3, 8, 9, 11, 13, 15, 16, 17, 19, 21, 31, 32, 33, 34, 80, 161, 174, 175, 177, 189, 190, 191, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 419, 422, 423, 445], "differ": [2, 8, 9, 11, 16, 17, 19, 21, 31, 32, 33, 34, 46, 71, 72, 76, 79, 80, 93, 94, 95, 98, 99, 103, 107, 109, 110, 111, 114, 137, 139, 144, 163, 164, 166, 167, 177, 178, 189, 190, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 325, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 429, 442, 444, 446], "conserv": [2, 8, 17, 20, 31, 32, 73, 80, 138, 150, 151, 161, 163, 164, 174, 175, 181, 415, 419, 440, 444], "412": 2, "pickl": [2, 8, 166, 227, 253, 295, 325, 374, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424], "commun": [2, 3, 15, 16, 17, 21, 70, 123, 125, 127, 129, 138, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 299, 364, 366, 374, 379, 394], "unnecessari": 2, "grid": [2, 17, 80, 118, 163, 164, 167, 177, 218, 219, 220, 221, 222, 230, 231, 233, 234, 235, 240, 241, 242, 250, 251, 252, 418, 439, 444], "408": 2, "407": 2, "strang": 2, "loop": [2, 34, 71, 72, 76, 79, 80, 81, 82, 94, 118, 138, 157, 176, 223], "reshap": [2, 20, 161, 174, 175, 364, 373, 377], "404": 2, "never": [2, 9, 11, 177, 449], "401": 2, "sweep": [2, 17, 20, 66, 70, 73, 80, 112, 113, 118, 163, 164, 177, 181, 182, 190, 191, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 440], "instead": [2, 3, 8, 9, 11, 17, 19, 21, 80, 118, 137, 163, 164, 167, 177, 189, 190, 191, 369, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 449], "295": 2, "must": [2, 6, 10, 11, 16, 17, 21, 31, 32, 50, 74, 80, 110, 113, 115, 118, 161, 163, 164, 166, 167, 174, 175, 177, 189, 190, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 325, 334, 341, 342, 345, 349, 356, 357, 362, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 432, 442, 445, 450], "zizou": 2, "signific": [2, 6, 9, 11, 16, 192], "level": [2, 4, 15, 17, 20, 122, 123, 125, 127, 128, 129, 130, 192, 310, 311, 314, 315, 364, 379, 383, 394, 439, 440, 441, 446], "handl": [2, 11, 21, 48, 49, 50, 58, 59, 163, 164, 189], "lsmlib": [2, 10, 17, 20, 394, 440], "scikit": [2, 17, 20, 394, 440], "fmm": [2, 17, 20, 394, 440], "librari": [2, 11, 16, 17, 21, 22, 48, 49, 58, 59, 71, 72, 77, 80, 163, 164, 177, 378, 439, 442], "These": [2, 6, 7, 8, 10, 11, 17, 19, 21, 31, 32, 71, 72, 114, 118, 443, 447, 448, 449, 451], "magnitud": [2, 17, 31, 32, 80, 107, 330, 344, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "faster": [2, 6, 17, 21, 177, 445], "than": [2, 3, 6, 8, 10, 15, 16, 17, 21, 46, 64, 65, 80, 90, 139, 163, 164, 166, 177, 189, 190, 191, 223, 330, 344, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 442, 449], "prototyp": 2, "streamplot": 2, "control": [2, 14, 19, 31, 32, 33, 34, 138, 139, 144, 156, 181, 322, 323, 442], "git": [2, 20, 190, 191, 440, 441, 446], "much": [2, 3, 7, 8, 17, 21, 31, 32, 80, 163, 164, 177, 189, 190, 449], "particip": 2, "398": [2, 446], "home": [2, 22], "redirect": [2, 8], "397": 2, "sphinxcontrib": [2, 17], "bibtex": [2, 17], "396": 2, "googl": [2, 3, 16, 439], "395": 2, "ubuntu": 2, "393": 2, "cylindricalnonuniformgrid2d": [2, 20, 222], "exteriorfac": [2, 17, 20, 71, 72, 103, 118, 181, 182, 190, 220, 233, 234, 235, 242, 250], "392": 2, "exit_nist": 2, "cgi": 2, "391": 2, "p\u00e9clet": [2, 50, 62, 189, 190], "inequ": [2, 445], "sign": [2, 3, 20, 190, 364, 373, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "388": 2, "64": 2, "int": [2, 122, 125, 138, 156, 166, 181, 198, 219, 222, 223, 229, 231, 234, 240, 248, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 278, 279, 285, 288, 289, 290, 291, 292, 295, 301, 302, 303, 304, 305, 317, 318, 319, 320, 322, 325, 364, 377, 379, 390, 398, 403, 414, 415, 417, 423], "384": 2, "382": 2, "381": 2, "377": 2, "vanleerconvectionterm": [2, 20, 46, 181, 182, 442, 445], "minmod": 2, "slope": 2, "376": 2, "committicketupdat": 2, "375": [2, 111, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 446], "_formatinteg": 2, "373": 2, "372": 2, "cylindr": [2, 48, 49, 58, 59, 218, 219, 220, 221, 222], "371": 2, "binari": [2, 6, 7, 9, 10, 11, 14, 20, 21, 114, 164, 176, 201, 223, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 446], "370": 2, "368": 2, "well": [2, 3, 8, 9, 11, 15, 17, 21, 31, 32, 107, 163, 164, 176, 177, 189, 190, 192, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 443], "367": 2, "promot": 2, "366": 2, "unop": [2, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "365": 2, "renam": [2, 189, 190], "instanc": [2, 7, 17, 50, 190, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 434], "364": 2, "factori": [2, 80, 176, 189, 222, 424, 425, 434], "360": 2, "css": 2, "356": 2, "353": 2, "ohloh": 2, "repo": 2, "352": 2, "getvers": 2, "350": 2, "element": [2, 6, 15, 35, 71, 72, 77, 107, 136, 156, 223, 227, 228, 229, 322, 330, 364, 373, 377, 381, 383, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 442, 444, 446], "347": 2, "activ": [2, 9, 11, 17, 21], "frame": [2, 8, 426, 427], "front": [2, 101, 161, 174, 175, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 419], "339": 2, "loki": 2, "337": 2, "interact": [2, 3, 7, 11, 15, 17, 19, 21, 35, 48, 49, 50, 55, 58, 59, 64, 74, 76, 80, 84, 109, 110, 111, 112, 113, 114, 115, 138, 162, 163, 164, 166, 167, 176, 177, 189, 364, 373, 431], "between": [2, 17, 20, 21, 31, 32, 80, 107, 109, 137, 139, 161, 163, 164, 167, 170, 174, 175, 177, 181, 189, 190, 222, 240, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 362, 373, 377, 394, 414, 439, 440, 442, 445], "336": 2, "clash": 2, "334": 2, "citat": [2, 17], "go": [2, 21, 109, 110, 111, 161, 162, 163, 164, 166, 167, 174, 175], "doi": [2, 14, 446], "333": 2, "seem": [2, 17, 189, 449], "331": 2, "330": 2, "facevalu": [2, 20, 163, 164, 176, 181, 182, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "facecent": [2, 17, 71, 72, 80, 81, 82, 103, 118, 163, 164, 176, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "329": 2, "background": [2, 8, 20, 21, 223, 440, 441], "326": 2, "gmsh2d": [2, 17, 20, 70, 71, 72, 94, 136, 191, 223], "323": 2, "getfacecent": [2, 190], "return": [2, 17, 32, 71, 72, 80, 81, 82, 109, 110, 111, 112, 113, 114, 115, 127, 128, 130, 163, 164, 166, 174, 175, 176, 177, 181, 182, 189, 190, 194, 195, 196, 197, 198, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 276, 277, 278, 279, 280, 285, 288, 289, 290, 291, 292, 295, 299, 300, 301, 302, 303, 304, 305, 317, 318, 319, 320, 321, 325, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 364, 366, 367, 369, 373, 374, 377, 378, 379, 383, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 434], "319": 2, "transientterm": [2, 8, 17, 20, 31, 32, 33, 34, 35, 38, 39, 62, 70, 71, 72, 73, 76, 77, 80, 81, 82, 89, 109, 110, 111, 112, 113, 114, 122, 123, 125, 127, 129, 138, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 181, 182, 190, 191, 325, 334, 341, 342, 345, 349, 356, 357, 442], "dt": [2, 8, 17, 31, 32, 33, 34, 35, 38, 39, 46, 62, 70, 71, 72, 73, 76, 77, 79, 80, 81, 82, 89, 109, 110, 111, 112, 113, 114, 122, 123, 125, 134, 138, 149, 150, 151, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 181, 182, 191, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 387, 399], "318": 2, "311": 2, "305": 2, "mpirun": [2, 17], "np": [2, 17], "wd": 2, "hang": 2, "sandbox": 2, "buildbot": [2, 4, 439], "297": 2, "gnuplot": 2, "291": [2, 330, 333, 334, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 356, 357], "efficiency_test": 2, "choke": 2, "liquidvapor2d": [2, 20], "289": [2, 446], "diffusionterm": [2, 8, 17, 20, 21, 31, 32, 33, 34, 35, 38, 39, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 71, 72, 73, 74, 80, 81, 82, 84, 89, 90, 93, 94, 96, 98, 99, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 118, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 181, 182, 189, 190, 330, 333, 334, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 354, 356, 357, 442], "_test": 2, "287": 2, "275": 2, "274": 2, "norm2": 2, "272": 2, "269": 2, "gridxd": 2, "255": 2, "5": [2, 6, 8, 11, 14, 15, 17, 21, 31, 32, 33, 34, 35, 56, 66, 70, 71, 72, 73, 74, 80, 89, 94, 101, 112, 113, 114, 115, 118, 123, 125, 127, 129, 138, 139, 144, 150, 157, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 178, 181, 182, 185, 192, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 318, 330, 333, 334, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 356, 357, 364, 373, 377, 381, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 432, 442, 445, 446], "mask": [2, 8, 17, 127, 190, 194, 196, 197, 198, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "253": 2, "promin": 2, "245": [2, 144], "_binaryterm": 2, "228": 2, "attempt": [2, 11, 17, 18, 21, 80, 189, 192, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 426, 427], "mpi": [2, 16, 20, 222, 299, 364, 366, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 439, 440], "225": 2, "mostli": [2, 222], "209": [2, 118], "rhie": [2, 118], "chow": [2, 118], "180": [2, 174, 175], "arithmet": [2, 8, 21, 167, 174, 175, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 439], "face": [2, 8, 17, 21, 31, 33, 34, 35, 67, 71, 72, 80, 84, 118, 156, 163, 164, 166, 167, 174, 175, 181, 189, 190, 194, 196, 197, 198, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 442], "cell": [2, 6, 8, 14, 17, 19, 20, 21, 31, 33, 34, 49, 59, 66, 70, 71, 72, 80, 81, 82, 106, 118, 139, 144, 156, 163, 164, 181, 190, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 432, 440, 444, 446], "distanc": [2, 17, 122, 123, 129, 138, 149, 181, 394, 442], "calcul": [2, 6, 8, 11, 13, 17, 18, 19, 21, 31, 33, 34, 50, 71, 72, 80, 89, 90, 118, 129, 138, 163, 164, 181, 189, 190, 192, 227, 228, 229, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442], "128": 2, "123": [2, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 356, 357, 377], "numerix": [2, 8, 17, 20, 31, 32, 33, 34, 35, 38, 39, 46, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 76, 77, 80, 81, 82, 94, 102, 106, 110, 113, 114, 115, 118, 122, 123, 125, 127, 128, 129, 130, 134, 138, 149, 150, 151, 156, 157, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 181, 182, 189, 190, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 381, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 426, 427, 442], "dot": [2, 17, 20, 70, 112, 113, 114, 118, 137, 138, 139, 150, 162, 190, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "tensor": [2, 20, 93, 161, 174, 175, 440], "103": 2, "subscrib": [2, 3], "_markstal": 2, "attributeerror": [2, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "61": 2, "implicitdiffusionterm": [2, 20, 189, 190, 198, 442], "simpl": [2, 7, 8, 17, 19, 20, 21, 31, 32, 71, 72, 80, 106, 109, 112, 113, 115, 118, 139, 163, 164, 166, 167, 176, 330, 344, 373, 394, 418, 419, 444], "mesh1d": [2, 7, 8, 15, 17, 20, 51, 56, 60, 61, 65, 77, 79, 92, 93, 94, 98, 99, 103, 110, 111, 114, 163, 164, 442], "346": 2, "text": [2, 7, 8, 15, 17, 21, 32, 35, 48, 50, 55, 58, 59, 74, 80, 84, 107, 109, 113, 114, 115, 125, 128, 130, 134, 138, 141, 142, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 189, 197, 321, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 379, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439, 442, 443, 445], "trunk": 2, "342": 2, "transient": [2, 15, 17, 20, 71, 72, 76, 77, 80, 81, 82, 107, 162, 176, 177, 192, 440, 443, 444], "implicit": [2, 8, 11, 17, 32, 45, 80, 81, 82, 84, 162, 163, 164, 166, 167, 176, 177, 189, 325, 442], "338": 2, "svntogit": 2, "bump": [2, 14], "increas": [2, 8, 21, 31, 32, 33, 34, 62, 73, 80, 181, 223, 442, 445], "capabl": [2, 6, 8, 11, 16, 17, 18, 21, 299, 366, 442], "eas": 2, "few": [2, 17, 19, 21, 74, 137, 394, 447, 448, 449, 451], "exist": [2, 3, 9, 10, 11, 21, 138, 144, 161, 174, 175, 189, 190, 192, 223, 360, 364, 373, 414, 439, 443, 449], "A": [2, 8, 9, 11, 12, 14, 17, 18, 21, 31, 32, 66, 70, 76, 79, 89, 90, 106, 109, 113, 115, 118, 138, 139, 141, 142, 144, 156, 161, 162, 163, 164, 166, 167, 174, 175, 177, 182, 190, 191, 192, 208, 223, 311, 322, 330, 354, 360, 364, 373, 374, 377, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439, 442, 443, 444, 446], "mechan": [2, 8, 14, 17, 21, 137, 144, 166, 439, 446], "specifi": [2, 5, 10, 17, 19, 77, 79, 80, 190, 191, 196, 197, 222, 223, 280, 325, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 439, 442, 449, 450], "most": [2, 6, 7, 8, 9, 11, 16, 17, 18, 21, 48, 49, 50, 58, 59, 70, 80, 137, 189, 190, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 334, 341, 342, 345, 349, 356, 357, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 442, 449], "partit": [2, 4, 17, 190, 223], "pyamg": [2, 17, 20, 439, 440], "pervas": [2, 4, 10], "full": [2, 4, 11, 21, 107, 139, 176, 189, 192, 449], "namespac": [2, 17, 190, 191, 364, 383], "update2_0to3_0": [2, 7, 20], "detail": [2, 8, 11, 15, 16, 17, 21, 48, 49, 50, 58, 59, 71, 72, 118, 163, 164, 166, 167, 174, 175, 189, 257, 318, 334, 341, 342, 345, 349, 356, 360, 378], "contain": [2, 7, 8, 11, 21, 22, 114, 118, 138, 178, 190, 191, 227, 228, 229, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 447, 448, 451], "timestep": [2, 20, 80, 84, 112, 161, 163, 164, 174, 175, 177, 181, 182, 189, 190, 191, 322, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 401, 440], "brought": 2, "unavoid": 2, "guidanc": [2, 8], "332": 2, "x86_64": [2, 11], "324": 2, "constrain": [2, 17, 20, 35, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 71, 72, 73, 74, 76, 77, 80, 81, 82, 84, 93, 94, 103, 112, 115, 118, 138, 176, 181, 182, 191, 195, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424], "implicitsourceterm": [2, 17, 20, 31, 32, 38, 39, 66, 67, 112, 113, 114, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 181, 182, 190, 354, 442], "317": [2, 14], "gmshimport": [2, 10], "due": [2, 6, 8, 16, 66, 71, 72, 85, 139, 161, 163, 164, 174, 175, 181, 360, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 442], "share": [2, 19, 364, 379], "316": 2, "313": 2, "307": 2, "306": [2, 446], "302": 2, "301": 2, "pycomm": 2, "debian": 2, "300": [2, 118, 399], "mesh2d": [2, 6, 20, 33, 34, 219, 223, 231, 234, 240, 248], "299": 2, "298": [2, 112, 138, 139, 144], "consumpt": [2, 137, 139], "growth": [2, 6, 19, 21, 162, 174, 175, 446], "repeat": [2, 177], "especi": [2, 19, 21, 445], "294": 2, "293": 2, "sphere": [2, 7, 8, 20], "segfault": 2, "292": 2, "290": 2, "improv": [2, 4, 6, 11, 16, 17, 73, 118, 177, 189, 191, 377, 439, 442, 445], "inconsequenti": 2, "288": 2, "themselv": 2, "286": 2, "285": 2, "284": 2, "transpos": [2, 70], "281": 2, "nthorderdiffusionterm": 2, "280": 2, "convectionterm": [2, 8, 17, 62, 67, 163, 181, 182, 189, 190], "277": 2, "step": [2, 6, 8, 11, 13, 17, 20, 21, 31, 32, 33, 34, 35, 38, 39, 46, 71, 72, 73, 76, 77, 79, 80, 81, 82, 90, 111, 112, 113, 122, 123, 125, 134, 137, 138, 139, 144, 149, 150, 151, 161, 162, 163, 164, 166, 167, 170, 171, 172, 177, 181, 182, 189, 190, 223, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 278, 279, 285, 288, 289, 290, 291, 292, 295, 301, 302, 303, 304, 305, 317, 318, 319, 320, 323, 354, 394, 401, 442], "273": 2, "diffusiontermnocorrect": [2, 20], "270": [2, 174, 175], "too": [2, 8, 11, 17, 31, 33, 34], "267": [2, 446], "reduc": [2, 6, 21, 80, 113, 163, 164, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 442, 444], "time": [2, 6, 8, 9, 11, 15, 17, 19, 21, 22, 31, 32, 33, 34, 70, 73, 76, 77, 79, 80, 81, 82, 90, 109, 113, 122, 123, 134, 137, 138, 139, 144, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 177, 181, 182, 190, 197, 219, 223, 229, 231, 234, 240, 248, 354, 401, 424, 442, 443, 445], "chemotaxi": [2, 20], "264": 2, "input2d": [2, 20], "261": 2, "260": 2, "259": 2, "shorthand": [2, 449], "cellcent": [2, 8, 20, 35, 38, 39, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 74, 76, 77, 79, 80, 84, 85, 89, 90, 93, 94, 96, 98, 99, 103, 106, 109, 110, 111, 112, 113, 114, 115, 122, 123, 125, 127, 129, 138, 141, 142, 150, 157, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 178, 190, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 426, 427], "etc": [2, 190, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "258": [2, 446], "gmshexport": 2, "252": 2, "benni": [2, 118], "interpol": [2, 31, 33, 34, 118, 139, 163, 164, 177, 181, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442, 444], "patch": [2, 3, 8, 81, 82], "250": [2, 138, 139, 144], "tex": 2, "quaternari": [2, 7, 20, 114], "247": 2, "var1": [2, 17, 46, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "var0": [2, 17, 432], "sensibli": 2, "243": [2, 374], "reconstrain": 2, "242": 2, "240": 2, "profil": [2, 38, 74, 76, 77, 80, 115], "merg": [2, 9, 11, 20, 360, 440], "237": 2, "236": 2, "mix": [2, 227, 228, 229, 325, 439], "235": 2, "propag": 2, "231": [2, 322], "factorymesh": [2, 20], "keyword": [2, 8, 139, 141, 142, 144, 360, 362, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438], "223": [2, 425], "218": 2, "absenc": [2, 16], "enthought": [2, 10, 18, 439], "216": 2, "fresh": [2, 9, 11, 17], "213": 2, "206": 2, "gnuplot1d": 2, "205": 2, "normal": [2, 17, 138, 234, 235, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442], "203": 2, "help": [2, 3, 7, 8, 11, 16, 17, 189, 190, 191, 192, 360], "202": 2, "manipul": [2, 7, 190, 449], "lead": [2, 17, 137, 161, 174, 175, 442, 445], "201": [2, 322], "veloc": [2, 8, 14, 67, 118, 122, 123, 125, 138, 150, 163, 164, 177, 181, 442], "faq": [2, 3, 8, 190], "200": [2, 62, 74, 80, 112, 115, 125, 139, 141, 174, 175], "195": 2, "multipl": [2, 6, 8, 10, 17, 21, 71, 72, 80, 115, 176, 198, 373, 424, 439, 442], "result": [2, 6, 7, 8, 10, 12, 16, 17, 18, 31, 32, 33, 34, 35, 46, 48, 49, 50, 53, 55, 58, 59, 60, 64, 67, 71, 72, 74, 76, 77, 79, 80, 81, 82, 84, 89, 90, 94, 96, 98, 99, 103, 106, 109, 110, 111, 112, 114, 115, 118, 122, 123, 127, 129, 134, 137, 138, 139, 144, 149, 161, 163, 164, 174, 175, 177, 178, 181, 189, 190, 192, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 354, 364, 373, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 439, 442, 445], "163": [2, 446], "infinit": [2, 8, 35, 74, 77, 80, 115, 177], "162": [2, 118], "ones": [2, 8, 11, 156, 174, 175, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "130": 2, "86": 2, "ly": [2, 125, 127, 141, 142, 190, 222], "lz": [2, 222], "77": [2, 6, 46, 377], "hasold": [2, 8, 38, 39, 70, 73, 80, 112, 114, 122, 123, 125, 127, 129, 138, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 181, 182, 354, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "self": [2, 10, 11, 107, 109, 110, 111, 112, 113, 114, 115, 141, 142, 161, 174, 175, 194, 195, 196, 197, 198, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 276, 277, 278, 279, 280, 285, 288, 289, 290, 291, 292, 295, 299, 300, 301, 302, 303, 304, 305, 317, 318, 319, 320, 325, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 362, 364, 366, 367, 373, 383, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438, 449, 450], "old": [2, 8, 17, 20, 32, 80, 161, 162, 163, 164, 166, 167, 174, 177, 181, 182, 190, 191, 321, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 374, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442], "44": [2, 364, 373], "282": 2, "279": 2, "nummesh": [2, 191], "submodul": 2, "278": 2, "form": [2, 15, 17, 20, 21, 31, 32, 33, 34, 35, 70, 73, 80, 89, 113, 118, 136, 139, 163, 164, 167, 176, 177, 181, 190, 191, 336, 350, 364, 373, 440, 442, 443, 445, 449], "268": 2, "slave": 2, "262": 2, "grid1d": [2, 17, 20, 35, 38, 50, 53, 55, 62, 64, 66, 67, 73, 74, 76, 80, 84, 90, 109, 110, 112, 113, 114, 115, 123, 129, 163, 164, 167, 176, 177, 181, 189, 190, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 374, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 426, 427, 432], "251": 2, "241": 2, "238": 2, "predict": [2, 14, 118, 163, 164, 445, 446], "233": 2, "treat": [2, 8, 21, 177, 429], "upwind": [2, 17, 44, 45, 330, 341, 344, 356, 445], "224": [2, 425], "align": [2, 8, 17, 35, 73, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "222": 2, "__add__": [2, 20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 373], "221": [2, 425], "219": 2, "matforg": 2, "hammer": 2, "208": 2, "207": 2, "ndarrai": [2, 377, 423], "196": 2, "won": [2, 9, 11, 17, 161, 174, 175, 450], "152": 2, "re": [2, 8, 21, 66, 70, 80, 114, 115, 164, 176, 177, 323, 364, 373], "138": 2, "100": [2, 6, 10, 19, 31, 32, 33, 34, 35, 38, 39, 48, 49, 58, 59, 66, 73, 76, 77, 80, 112, 118, 134, 141, 156, 157, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 181, 182, 364, 373, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 425, 426, 427], "80": [2, 118], "idl": [2, 17], "46": [2, 446], "45": [2, 109, 110, 111, 138, 144, 364, 373, 432, 446], "slice": [2, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "produc": [2, 8, 17, 378, 403, 439], "effici": [2, 16, 17, 20, 21, 48, 49, 50, 58, 59, 189, 440, 441, 442], "diagnost": [2, 17], "232": 2, "becaus": [2, 8, 10, 11, 17, 21, 31, 32, 33, 34, 62, 74, 80, 114, 115, 118, 161, 163, 164, 167, 174, 175, 177, 181, 189, 190, 252, 330, 360, 394], "sighup": 2, "230": 2, "226": 2, "backend": [2, 8], "flush_ev": 2, "217": 2, "unpickl": [2, 374], "191": 2, "spheredaemon": [2, 34], "miss": [2, 10], "187": 2, "garbl": 2, "complet": [2, 11, 16, 17, 20, 21, 139, 190, 191, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 440, 442], "independ": [2, 8, 11, 17, 21, 163, 164, 181, 442], "199": 2, "dummi": [2, 17, 114], "notimplementederror": [2, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "instanti": [2, 16, 17, 21, 65, 138, 189, 201, 325, 373, 387, 390, 394, 395, 399, 401, 403, 415, 419, 422], "abstract": [2, 8, 21, 189, 194, 283, 285, 295, 316, 317, 320, 325, 333, 343, 351, 352, 415, 433, 449], "198": 2, "cylindricalgrid1d": [2, 20, 48, 49, 222], "197": 2, "tell": [2, 20, 31, 32, 33, 34, 138, 189, 440], "194": [2, 446], "larg": [2, 6, 8, 11, 16, 17, 21, 80, 134, 136, 163, 164, 330, 360, 378, 401], "valueerror": [2, 8, 10, 218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "193": 2, "192": 2, "typeerror": [2, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 373], "small": [2, 8, 31, 32, 80, 138, 144, 161, 162, 174, 175, 181, 364, 373, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "beli": 2, "advanc": [2, 8, 80], "did": [2, 161, 174, 175], "increment": [2, 189], "er": 2, "older": [2, 3, 8], "simul": [2, 6, 11, 14, 17, 19, 31, 32, 33, 34, 89, 137, 138, 139, 144, 161, 166, 167, 174, 175, 192, 222, 223, 322, 401, 446], "entir": [2, 17, 34, 157, 161, 174, 175, 181], "avail": [2, 5, 9, 11, 12, 13, 16, 17, 18, 34, 71, 72, 77, 80, 138, 163, 164, 177, 192, 439, 442, 445, 449], "our": [2, 3, 8, 9, 11, 16, 17, 80, 177, 189, 190, 191, 192], "itself": [2, 17, 189, 190, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "190": 2, "rang": [2, 8, 35, 38, 39, 46, 70, 71, 72, 73, 76, 77, 79, 80, 81, 82, 109, 110, 111, 112, 113, 114, 118, 122, 123, 125, 134, 138, 141, 142, 149, 150, 151, 161, 162, 163, 164, 166, 167, 170, 171, 172, 176, 177, 178, 223, 354, 398, 401, 417, 418, 422, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439, 443], "182": 2, "binop": [2, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "2_0": [2, 190], "179": [2, 118], "easy_instal": 2, "177": 2, "169": 2, "webpag": 2, "internet": 2, "explor": [2, 11, 21], "156": 2, "153": [2, 14, 446], "math": [2, 3, 162], "direct": [2, 10, 12, 16, 17, 31, 32, 33, 34, 92, 190, 198, 221, 222, 223, 240, 248, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 439, 449], "symmetri": [2, 19, 20, 161, 174, 175, 221], "getcel": [2, 190], "enforc": 2, "both": [2, 7, 8, 11, 13, 17, 18, 21, 48, 49, 50, 58, 59, 77, 80, 114, 118, 134, 139, 163, 164, 189, 190, 253, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 443], "clearer": [2, 8, 189, 190], "levelset": [2, 6, 7, 8, 20], "distancefunct": [2, 7, 20, 141, 142], "comparison": [2, 20, 118, 162, 163, 164, 440], "subtl": 2, "unlik": [2, 80, 189, 449], "affect": [2, 8, 17], "veri": [2, 6, 8, 9, 11, 16, 17, 21, 136, 163, 164, 174, 175, 176, 177, 190, 191, 360, 394, 449], "188": 2, "smtpsenderrefus": 2, "553": 2, "trac": [2, 439], "matdl": 2, "osi": 2, "org": [2, 3, 8, 11, 16, 17, 71, 72, 378, 439, 446], "sender": 2, "address": [2, 3, 11, 21], "184": [2, 373], "exportasmesh": 2, "183": 2, "linearjorsolv": [2, 20], "__init__": [2, 10, 109, 110, 111, 112, 114, 115, 161, 174, 175, 450], "rather": [2, 8, 10, 17, 21, 64, 65, 80, 90, 166, 177, 189, 190, 364, 373, 419, 442, 447, 448, 449, 451], "pysparsesolv": [2, 20], "181": 2, "151": [2, 446], "mayavi2": 2, "13": [2, 6, 109, 161, 162, 167, 174, 175, 177, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 373, 446], "176": 2, "win32": 2, "175": [2, 322], "offset": [2, 190, 364, 373, 401, 403, 422], "170": 2, "__invert__": [2, 20, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "154": [2, 14], "update1_0to2_0": [2, 7, 20], "hold": [2, 12, 17, 80, 138, 195, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "rank": [2, 8, 20, 70, 118, 182, 190, 334, 341, 342, 345, 349, 356, 357, 364, 377, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 432, 434, 440, 442], "simpler": [2, 21, 189], "determin": [2, 8, 21, 31, 32, 177, 181, 336, 373, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442, 443], "diagon": [2, 8, 17, 118, 177, 181, 190, 248, 253], "hand": [2, 8, 21, 31, 32, 67, 80, 113, 190, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "side": [2, 17, 19, 67, 74, 80, 101, 113, 115, 163, 164, 223, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "simplifi": [2, 10, 115, 163, 164, 176, 190, 191], "167": 2, "166": 2, "vectorcel": 2, "vectorfac": 2, "165": 2, "section": [2, 6, 8, 11, 12, 17, 71, 72, 80, 162, 181, 189, 323, 442], "149": 2, "143": 2, "141": 2, "toolset": 2, "140": [2, 446], "136": 2, "135": 2, "127": 2, "fragil": 2, "54": [2, 364, 373], "161": 2, "160": 2, "157": 2, "temp": 2, "widow": 2, "155": 2, "appear": [2, 3, 8, 12, 15, 17, 80, 90, 137, 141, 142, 144, 177, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438, 442], "150": [2, 446], "pythonxi": 2, "148": 2, "147": 2, "cg": [2, 255, 276, 289, 292, 302, 305], "145": [2, 14, 446], "144": 2, "intermitt": 2, "142": [2, 364, 373], "139": 2, "bitten": 2, "137": [2, 14], "backport": 2, "manuscript": 2, "131": [2, 17], "extens": [2, 8, 11, 16, 138, 166, 192, 374, 390, 394, 439], "126": 2, "125": [2, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "emb": [2, 21], "obsolet": 2, "124": 2, "121": [2, 174, 175], "simpletrenchsystem": [2, 6, 20, 137, 138, 139], "120": [2, 422], "118": [2, 181, 182], "117": 2, "getfacesbottom": [2, 189], "getfacestop": [2, 189], "lack": 2, "descript": [2, 139, 144, 223], "115": 2, "view": [2, 8, 11, 15, 17, 18, 34, 48, 49, 50, 55, 58, 59, 64, 74, 76, 80, 84, 115, 141, 156, 161, 166, 189, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439], "cahn": [2, 17, 19, 20, 31, 32, 33, 34, 35, 161, 174, 175, 177, 336, 441, 442, 443, 446], "hilliard": [2, 17, 20, 31, 32, 33, 34, 35, 161, 174, 175, 336, 441, 442, 443, 446], "113": [2, 446], "macbook": 2, "pro": [2, 9, 11, 446], "intel": 2, "112": 2, "111": [2, 112], "grid2d": [2, 20, 31, 32, 39, 60, 65, 77, 81, 82, 92, 93, 111, 118, 122, 125, 127, 136, 138, 141, 142, 156, 161, 162, 166, 174, 175, 178, 182, 189, 190, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 334, 341, 342, 344, 345, 349, 356, 357, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 426, 427, 432], "110": 2, "numer": [2, 4, 6, 8, 10, 14, 16, 20, 35, 48, 49, 50, 58, 59, 73, 80, 90, 134, 162, 177, 181, 189, 190, 192, 199, 322, 323, 334, 341, 342, 345, 349, 356, 364, 373, 381, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 420, 422, 423, 428, 435, 439, 440, 441, 442, 446], "dimensionless": [2, 74, 110, 115, 134, 161, 174, 175, 364, 373], "elphf": [2, 20], "109": [2, 446], "doctest": [2, 7, 10, 15, 17, 21, 80, 192, 360], "__array__": [2, 20, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "108": 2, "107": [2, 446], "106": [2, 14], "105": [2, 12], "useless": 2, "102": 2, "dict": [2, 141, 142, 272, 318, 360, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439], "99": [2, 223, 364, 373], "97": 2, "nan": [2, 71, 72, 432], "correctli": [2, 32, 46, 118, 330, 354], "96": [2, 118], "95": 2, "code": [2, 4, 6, 7, 9, 10, 11, 12, 16, 17, 18, 20, 21, 67, 71, 72, 73, 80, 118, 123, 149, 156, 161, 162, 163, 164, 166, 167, 170, 171, 172, 178, 189, 317, 362, 364, 373, 377, 439, 440], "92": 2, "pygist": 2, "dead": 2, "offici": [2, 9, 11], "84": 2, "83": 2, "zerodivisionerror": 2, "cellterm": [2, 20], "getold": 2, "79": [2, 6, 14, 377], "67": [2, 373], "unstructur": [2, 18, 439, 442, 446], "43": [2, 6, 446], "tsvviewer": [2, 8, 20, 71, 72, 112], "shape": [2, 20, 21, 32, 46, 161, 174, 175, 218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "34": [2, 373], "infin": [2, 8, 377], "122": [2, 174, 175], "119": 2, "116": 2, "104": 2, "matplotlibvectorview": 2, "_plot": [2, 161, 174, 175], "101": 2, "autoscal": [2, 141, 142, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438], "93": 2, "91": [2, 446], "76": [2, 138, 144], "75": [2, 17, 364, 373, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 418, 419, 422, 432], "auto": 2, "docstr": [2, 360, 369], "74": [2, 14], "combin": [2, 8, 15, 17, 21, 114, 181, 192, 364, 373, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442, 443], "51": [2, 94, 446], "__pos__": 2, "50": [2, 14, 38, 39, 80, 89, 99, 118, 161, 425, 426, 427], "39": [2, 163, 164], "72": [2, 432], "19": [2, 6, 80, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 373, 443, 446], "98": [2, 14], "case": [2, 6, 8, 10, 11, 13, 15, 17, 21, 38, 39, 46, 48, 49, 50, 55, 58, 59, 62, 70, 73, 74, 76, 77, 79, 80, 101, 102, 105, 106, 114, 115, 128, 130, 134, 138, 139, 153, 158, 161, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 181, 183, 187, 189, 190, 191, 222, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 369, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 445, 447, 448, 449, 450, 451], "94": [2, 241], "90": [2, 80, 118, 174, 175, 425, 426, 427], "87": [2, 6, 446], "length": [2, 10, 21, 71, 72, 80, 84, 90, 162, 177, 222, 223, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "convert": [2, 8, 21, 161, 174, 175, 189, 364, 373, 377, 378, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "needless": 2, "rebuild": [2, 17], "66": 2, "guid": [2, 6], "variou": [2, 9, 11, 17, 21, 107, 138, 445], "62": [2, 6, 139], "unrecogn": 2, "token": 2, "13c": 2, "55": [2, 112, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "intern": [2, 20, 21, 190, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 440], "52": [2, 14, 446], "facevectorvari": 2, "48": 2, "inherit": [2, 10, 21, 190, 449], "hidden": [2, 21], "42": [2, 17, 163, 164], "model": [2, 4, 6, 7, 9, 11, 14, 15, 16, 19, 20, 21, 31, 32, 38, 39, 107, 114, 137, 138, 139, 141, 142, 144, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 192, 439, 440, 443, 446], "addoverfacesvari": [2, 20], "gross": 2, "41": [2, 432], "iter": [2, 6, 16, 20, 21, 35, 46, 51, 53, 55, 56, 60, 65, 80, 81, 82, 109, 110, 111, 112, 114, 118, 161, 162, 166, 167, 174, 175, 176, 177, 189, 190, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 278, 279, 285, 288, 289, 290, 291, 292, 295, 301, 302, 303, 304, 305, 317, 318, 319, 320, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 401, 439, 440, 442], "norm": [2, 321, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 377], "21": [2, 112, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 373, 443, 446], "dimens": [2, 11, 20, 21, 32, 50, 71, 72, 74, 80, 82, 110, 118, 123, 127, 128, 129, 130, 161, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 190, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 377, 390, 394, 398, 401, 414, 415, 417, 418, 423, 424, 425, 434, 442, 445], "wai": [2, 7, 11, 12, 17, 19, 20, 21, 35, 73, 79, 80, 94, 96, 98, 99, 103, 112, 113, 138, 156, 161, 162, 163, 164, 166, 167, 174, 175, 177, 190, 192, 232, 234, 235, 248, 252, 330, 364, 373, 440, 442, 449], "significantli": [2, 6, 8, 11, 190], "cach": [2, 17, 20, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 423, 440], "intermedi": [2, 6, 8, 16, 31, 32, 118], "uniformgrid": [2, 20, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "geometr": [2, 31, 33, 34, 197], "fly": [2, 21], "present": [2, 6, 7, 8, 11, 17, 19, 20, 110, 137, 139, 149, 163, 164, 171, 172, 377, 440, 441, 445], "made": [2, 8, 11, 12, 13, 15, 21, 118, 125, 177, 190, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 373, 390, 394, 398, 403, 414, 417, 418, 419, 423], "consider": [2, 3, 17, 189, 192], "construct": [2, 7, 16, 17, 21, 71, 72, 122, 123, 127, 129, 137, 139, 161, 162, 163, 164, 167, 174, 175, 176, 223, 330, 344, 362, 364, 373, 394, 439, 442], "execut": [2, 6, 9, 10, 11, 16, 17, 21, 22, 76, 79, 90, 122, 123, 129, 360], "subclass": [2, 8, 34, 194, 283, 285, 295, 316, 317, 320, 333, 343, 351, 352, 415, 433, 449], "sensibl": [2, 17], "answer": [2, 3, 20, 35, 77, 79, 80, 85, 106, 122, 123, 125, 149, 150, 177, 330, 344, 387, 390, 394, 395, 399, 401, 403, 414, 415, 418, 419, 422, 440], "For": [2, 7, 8, 9, 11, 16, 17, 21, 31, 33, 34, 62, 71, 72, 80, 84, 107, 144, 156, 163, 164, 176, 177, 190, 192, 318, 330, 334, 341, 342, 345, 349, 356, 377, 401, 424, 439, 442, 443, 444, 449], "vectorcellvari": [2, 190], "periodicgrid": 2, "howev": [2, 6, 8, 17, 80, 90, 118, 442, 445], "rewritten": [2, 35, 181], "serv": [2, 7, 21, 223], "tutori": [2, 11, 13, 17, 138, 189, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 446], "sever": [2, 11, 15, 16, 17, 21, 113, 190, 191, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "elabor": [2, 8], "multicompon": [2, 109], "multidimension": 2, "superfil": [2, 14, 137, 138, 139, 144, 446], "better": [2, 3, 8, 17, 18, 21, 46, 162, 163, 164, 176, 177, 189, 191, 394, 439, 443], "fluid": [2, 20, 21, 118, 312, 322, 441, 443, 444, 446], "classic": [2, 163, 164, 176, 181, 264, 311, 313], "lid": [2, 118], "distinct": [2, 20, 21, 31, 32, 190, 440], "linear": [2, 8, 16, 17, 20, 21, 31, 32, 33, 34, 35, 80, 112, 113, 118, 139, 161, 163, 164, 166, 167, 174, 175, 177, 181, 190, 269, 276, 277, 278, 279, 280, 291, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 439, 440, 444], "explan": [2, 8, 17, 138, 144, 360, 369], "concept": [2, 17, 446, 449], "involv": [2, 6, 20, 21, 80, 166, 167, 174, 175, 177, 440, 443, 449], "frequent": [2, 6, 15, 16, 20, 163, 164, 177, 377, 439, 440, 441], "question": [2, 3, 15, 20, 114, 321, 440, 441], "multiview": [2, 20, 138, 161, 174, 175, 425], "group": [2, 3, 4, 8], "togeth": [2, 8, 17, 136, 181, 360, 373, 429], "couldn": 2, "abbrevi": 2, "promis": 2, "actual": [2, 8, 21, 80, 118, 177, 189, 253, 318, 360, 419, 449], "fulli": [2, 11, 17, 21, 80, 177, 181, 444], "qualifi": 2, "cv": [2, 334, 341, 342, 345, 349, 356, 357, 442], "subvers": 2, "sourceforg": [2, 8, 16, 18, 439], "materi": [2, 4, 14, 20, 21, 80, 107, 118, 137, 139, 144, 161, 174, 175, 192, 440, 441, 446], "digit": [2, 377], "pathwai": 2, "pde": [2, 8, 11, 14, 15, 21, 32, 161, 174, 175, 177, 190, 192, 443, 444], "subtract": [2, 6, 20, 113, 167, 189, 364, 373, 414], "job": [2, 10, 46, 118], "suppli": [2, 8, 15, 16, 21, 163, 164, 189, 190, 223, 360, 364, 373, 403, 442, 449, 450], "fipy_view": [2, 17, 424], "them": [2, 3, 8, 10, 11, 13, 17, 21, 32, 73, 80, 95, 111, 113, 166, 189, 190, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 450], "choic": [2, 8, 16, 17, 18, 163, 164, 177, 181, 257], "noisevari": [2, 20, 387, 395, 399, 401, 422], "pyx": 2, "layout": 2, "getlaplacian": 2, "effect": [2, 3, 6, 17, 31, 32, 80, 161, 174, 175, 176, 177, 198, 354, 446], "getfacegrad": [2, 190], "getdiverg": 2, "which": [2, 3, 6, 8, 9, 10, 11, 13, 15, 16, 17, 18, 21, 22, 74, 77, 80, 92, 112, 113, 115, 118, 138, 163, 164, 166, 177, 181, 189, 190, 197, 222, 257, 360, 364, 369, 373, 377, 378, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 439, 442, 444, 449, 450], "deepli": 2, "nest": [2, 8], "find": [2, 8, 9, 11, 16, 17, 80, 90, 163, 164, 190, 191, 377, 424, 425, 434], "situat": 2, "earlier": [2, 71, 72, 163, 164, 189, 377], "update0_1to1_0": [2, 7, 8, 20], "49": [2, 112], "47": [2, 322], "coeff": [2, 8, 17, 31, 32, 33, 34, 35, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 71, 72, 73, 74, 76, 77, 80, 81, 82, 84, 89, 93, 106, 109, 110, 111, 112, 113, 114, 115, 118, 139, 163, 164, 175, 176, 177, 181, 182, 189, 190, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 442], "40": [2, 35, 109, 110, 111, 139, 162, 167], "38": 2, "one": [2, 3, 8, 10, 11, 14, 16, 17, 19, 21, 46, 50, 71, 72, 74, 80, 84, 90, 109, 110, 111, 112, 113, 114, 115, 123, 129, 161, 163, 164, 167, 170, 172, 174, 175, 176, 177, 190, 194, 223, 252, 283, 285, 295, 316, 320, 333, 343, 350, 351, 352, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 432, 433, 439, 442, 447, 448, 449, 450, 451], "37": [2, 6], "electrochem": [2, 4, 6, 8, 14, 15, 20, 21, 107, 192, 446], "35": [2, 114, 118, 432], "33": [2, 163, 164, 177, 446], "32": [2, 17, 22, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 446], "conflict_handl": 2, "valid": [2, 17, 439], "31": [2, 177, 373, 446], "notat": [2, 8, 17, 20, 118, 181, 439, 440, 449], "29": [2, 144, 446], "invok": [2, 7, 8, 15, 17, 21, 156, 278, 295, 449, 450], "26": [2, 118, 138, 144, 364, 373, 446], "extract": [2, 71, 72, 80, 162, 166, 167, 170, 171, 172], "distancevari": [2, 20, 122, 123, 125, 127, 129, 138, 141, 142, 149, 150, 151, 418, 419], "reconcil": 2, "crystal": [2, 14, 21, 443, 446], "surfact": [2, 20, 138, 139, 144, 419], "depositionratevar": 2, "extensionveloc": 2, "axisymmetr": 2, "2d": [2, 17, 18, 19, 58, 59, 60, 96, 111, 113, 127, 141, 142, 157, 161, 162, 166, 174, 175, 182, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 394, 419, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439, 442], "wizard": 2, "xp": 2, "other": [3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 21, 31, 32, 80, 101, 112, 138, 139, 163, 164, 176, 178, 190, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 263, 264, 265, 266, 267, 268, 272, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 362, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 443], "encourag": 3, "follow": [3, 6, 7, 9, 10, 11, 15, 16, 17, 35, 67, 71, 72, 73, 107, 111, 115, 122, 123, 125, 127, 129, 137, 138, 139, 144, 149, 150, 156, 162, 166, 167, 170, 171, 172, 174, 175, 178, 181, 189, 190, 191, 330, 354, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 443], "mode": [3, 11, 15, 223, 360, 364, 379], "monitor": 3, "post": [3, 8, 223, 439], "want": [3, 9, 11, 17, 19, 20, 71, 72, 80, 163, 164, 177, 440], "http": [3, 8, 9, 11, 13, 16, 17, 18, 34, 46, 71, 72, 174, 175, 318, 373, 378, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 439, 446], "catb": 3, "esr": 3, "smart": 3, "troubl": [3, 16], "abl": [3, 11, 161, 223, 253], "offer": [3, 15, 21], "reproduc": [3, 11, 13], "com": [3, 8, 9, 11, 13, 16, 17, 18, 34, 174, 175, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 439, 446], "suitabl": [3, 17, 80, 189, 312, 313, 364, 373, 439], "open": [3, 10, 11, 14, 17, 20, 118, 162, 166, 167, 170, 171, 172, 223, 364, 379, 439, 440], "convers": [3, 16, 17, 21, 190, 364, 373], "troubleshoot": 3, "off": [3, 8, 118], "highlight": [3, 10, 118], "easi": [3, 16, 18, 31, 33, 34, 80, 439], "submiss": 3, "probabl": [3, 8, 10, 11, 17, 18, 66, 190, 387, 395, 399, 401, 439, 443, 449], "definit": [3, 10, 32, 190, 280, 313, 450], "back": [3, 9, 11, 17, 19, 21, 101, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 414, 446], "forth": 3, "tend": [3, 21, 31, 32, 80], "delet": [3, 80, 364, 379], "mean": [3, 17, 20, 21, 31, 32, 33, 34, 80, 364, 373, 377, 395, 401, 440], "d": [3, 14, 17, 31, 32, 33, 34, 35, 48, 49, 50, 55, 58, 59, 66, 71, 72, 76, 77, 80, 81, 82, 113, 125, 127, 128, 134, 138, 139, 144, 149, 161, 162, 163, 164, 174, 175, 177, 178, 181, 189, 222, 330, 344, 360, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 442, 446], "expend": 3, "effort": [3, 8, 15, 17], "inferior": 3, "ve": [3, 80, 163, 164], "written": [3, 6, 7, 8, 10, 11, 17, 21, 73, 80, 118, 127, 161, 162, 163, 164, 166, 167, 170, 171, 172, 176, 181, 189, 190, 191, 192, 439, 442], "serious": 3, "subscript": 3, "email": 3, "mailto": 3, "simpli": [3, 8, 11, 16, 17, 80, 109, 110, 111, 163, 164, 181, 189, 449], "To": [3, 7, 8, 10, 11, 13, 17, 80, 90, 118, 137, 138, 139, 144, 156, 161, 163, 164, 174, 175, 177, 181, 190, 442, 445], "unsubscrib": 3, "learn": [3, 9, 11, 17], "chang": [3, 10, 11, 17, 20, 21, 31, 32, 80, 137, 138, 139, 144, 163, 164, 189, 190, 191, 232, 252, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 440, 441], "host": 3, "sent": 3, "store": [3, 32, 138, 156, 166, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 378, 439, 442], "histor": [3, 9, 11, 73], "dir": [3, 364, 379], "comp": [3, 8], "jon": 4, "member": [4, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "research": [4, 14, 21, 446], "staff": 4, "scienc": [4, 14, 17, 21, 80, 192], "engin": [4, 14, 192, 439], "divis": [4, 38, 39, 192, 377], "measur": [4, 6, 21, 80, 163, 164, 192], "laboratori": [4, 20, 192, 440, 441], "nation": [4, 5, 12, 21, 192], "institut": [4, 5, 12, 21, 192], "standard": [4, 5, 11, 12, 15, 16, 21, 71, 72, 107, 176, 181, 192, 248, 330, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 439], "technologi": [4, 5, 12, 21, 192], "comput": [4, 8, 11, 14, 16, 17, 19, 21, 95, 139, 144, 189, 192, 439, 445, 446], "interest": [4, 8, 9, 11, 15, 21, 31, 32, 33, 34, 80, 109, 111, 113, 115, 157, 177, 223, 295, 442, 443], "orient": [4, 14, 19, 20, 70, 161, 166, 167, 174, 175, 192, 377, 425, 440, 449], "design": [4, 6, 7, 8, 9, 11, 17, 20, 109, 110, 111, 440, 441], "electrochemistri": [4, 446], "daniel": [4, 446], "wheeler": [4, 14, 181, 446], "guest": 4, "finit": [4, 11, 14, 20, 21, 66, 80, 163, 164, 177, 192, 322, 439, 440, 444, 446], "volum": [4, 11, 14, 20, 21, 66, 118, 138, 139, 144, 156, 163, 164, 176, 181, 192, 223, 322, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 440, 444, 446], "techniqu": [4, 8, 21, 162, 167, 170, 171, 172, 444], "treatment": [4, 15, 17, 176, 192], "jim": 4, "leader": 4, "thermodynam": [4, 31, 32, 112, 114, 163, 164, 181], "kinet": [4, 8, 20, 134, 177, 440, 441], "director": 4, "center": [4, 8, 14, 17, 20, 21, 31, 33, 34, 66, 70, 71, 72, 80, 112, 118, 141, 142, 161, 162, 174, 175, 181, 190, 192, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438, 440, 444], "theoret": [4, 8, 20, 21, 192, 440, 441], "varieti": [4, 8, 9, 11, 17, 21, 163, 164, 192], "solidif": [4, 19, 161, 162, 166, 174, 175, 177, 446], "polycrystallin": [4, 15, 19, 192, 446], "solid": [4, 19, 112, 114, 161, 162, 163, 164, 166, 167, 170, 174, 175, 176], "alex": 4, "mont": 4, "pyxview": [4, 439], "he": [4, 19], "student": 4, "montgomeri": 4, "blair": 4, "school": 4, "kati": 4, "travi": [4, 439], "optim": [4, 17, 21, 80, 163, 164, 177], "she": [4, 19], "surf": 4, "smith": 4, "colleg": 4, "gibianski": 4, "harvei": 4, "mudd": 4, "andrew": 4, "reev": 4, "sabbat": 4, "univers": [4, 14, 19, 443, 446], "main": [4, 9, 11, 17, 21, 166, 167, 174, 175, 442, 447, 448, 449, 451], "olivia": 4, "buzek": 4, "maryland": 4, "stile": 4, "jame": [4, 446], "beirn": 4, "greatli": [4, 6, 11, 16], "deploy": 4, "server": 4, "certain": [5, 7, 21, 223, 449, 450], "commerci": [5, 8, 11, 21], "firm": 5, "trade": 5, "identifi": [5, 17, 21], "procedur": [5, 21, 176], "adequ": [5, 16, 222, 223], "Such": 5, "identif": 5, "intend": [5, 15, 17, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253], "impli": [5, 12], "recommend": [5, 16, 17, 20, 190, 191, 373, 440, 442, 450], "endors": [5, 11], "nor": [5, 8], "relat": [5, 17, 21, 163, 164, 177, 394], "necessarili": [5, 11], "best": [5, 8, 11, 16, 17, 18, 177, 190, 257, 318], "purpos": [5, 8, 9, 11, 12, 48, 49, 58, 59, 222, 442], "evalu": [6, 17, 21, 118, 163, 164, 166, 167, 174, 175, 177, 181, 330, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "program": [6, 20, 80, 189, 439, 440, 444, 449], "greater": [6, 10, 223, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "intrins": [6, 21, 163, 164, 167], "ineffici": [6, 21], "dure": [6, 17, 21, 138, 446], "languag": [6, 11, 20, 176, 192, 439, 440, 449], "hous": 6, "grain": [6, 19, 166, 167, 174, 175], "subsequ": [6, 17, 19, 134, 174, 175], "imping": [6, 7, 8, 19, 20, 174, 175], "mesh20x20": [6, 7, 8, 17, 20], "numberofel": [6, 138, 156, 166], "10000": [6, 46, 51, 53, 55, 56, 60, 77, 109, 111, 114, 138, 161, 162, 176, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "numberofstep": [6, 137, 138, 139, 144, 166], "1000": [6, 31, 33, 34, 35, 51, 53, 55, 56, 62, 64, 65, 84, 110, 127, 176, 189, 257, 258, 269, 278, 291, 295, 301, 302, 303, 305, 317, 319, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 426, 427], "ryo": [6, 162, 166, 167, 170, 171, 172, 177, 446], "kobayashi": [6, 161, 162, 166, 167, 170, 171, 172, 174, 175, 177, 446], "raw": [6, 166], "cpu": [6, 17], "10": [6, 14, 17, 20, 31, 32, 33, 35, 39, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 71, 72, 73, 77, 79, 80, 81, 82, 85, 90, 94, 101, 106, 112, 113, 118, 122, 123, 128, 129, 137, 138, 139, 141, 144, 149, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 178, 181, 182, 189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 257, 258, 263, 264, 265, 266, 267, 268, 269, 272, 278, 279, 291, 295, 301, 302, 303, 304, 305, 314, 315, 317, 318, 319, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 377, 381, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 426, 427, 432, 440, 445, 446], "tabl": [6, 118, 139, 144, 373], "second": [6, 8, 118, 136, 163, 164, 181, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 426, 427], "kilobyt": 6, "kib": 6, "30": [6, 17, 20, 107, 111, 112, 113, 114, 141, 163, 164, 176, 177, 364, 373, 399, 401, 440, 446], "0009": 6, "39316": 6, "772": 6, "0031": 6, "39664": 6, "1600": 6, "1": [6, 8, 10, 11, 14, 15, 16, 17, 18, 20, 21, 31, 32, 33, 34, 35, 38, 39, 46, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 84, 85, 89, 90, 93, 94, 96, 98, 99, 102, 103, 106, 107, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 128, 129, 130, 134, 137, 138, 139, 141, 142, 144, 149, 150, 151, 156, 157, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 181, 182, 189, 190, 191, 192, 198, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 263, 264, 265, 266, 267, 268, 278, 321, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 377, 379, 381, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 440, 442, 443, 445, 446], "4": [6, 8, 9, 11, 14, 15, 17, 20, 21, 34, 35, 46, 55, 62, 66, 70, 71, 72, 73, 80, 84, 94, 106, 109, 111, 112, 113, 114, 118, 122, 125, 127, 128, 130, 134, 138, 139, 141, 142, 144, 149, 157, 161, 162, 163, 164, 170, 172, 174, 175, 176, 177, 178, 181, 185, 192, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 344, 360, 364, 373, 377, 381, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 426, 427, 432, 440, 442, 446], "65": 6, "017": 6, "40656": 6, "1044": 6, "6400": 6, "3": [6, 8, 9, 11, 13, 14, 15, 16, 17, 20, 21, 31, 34, 35, 46, 48, 49, 58, 59, 62, 66, 67, 71, 72, 73, 76, 80, 84, 94, 106, 109, 110, 111, 112, 114, 118, 122, 125, 127, 128, 130, 136, 138, 139, 141, 142, 144, 149, 150, 157, 163, 164, 166, 172, 174, 175, 176, 177, 181, 182, 190, 191, 192, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 310, 330, 344, 360, 364, 373, 377, 381, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 426, 427, 432, 439, 440, 442, 443, 445, 446], "46124": 6, "1880": 6, "25600": 6, "60840": 6, "5188": 6, "102400": 6, "145820": 6, "18436": 6, "plain": [6, 17, 80, 138], "oper": [6, 9, 10, 11, 17, 21, 161, 166, 167, 174, 175, 190, 240, 364, 366, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 442], "around": [6, 10, 21, 46, 80, 136, 414, 442], "17": [6, 12, 20, 235, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 440, 444, 446], "slower": [6, 21, 190], "penalti": 6, "hope": [6, 190, 191], "futur": [6, 9, 11, 17, 162, 166, 167, 170, 171, 172, 189, 439], "gain": [6, 17], "particular": [6, 7, 8, 9, 11, 12, 17, 21, 74, 80, 85, 189], "analysi": [6, 8, 17, 439, 446], "shown": [6, 7, 8, 19, 107, 163, 164, 177, 189], "As": [6, 7, 8, 10, 17, 21, 71, 72, 73, 80, 144, 163, 164, 176, 181, 189, 190, 192, 364, 373, 379, 450], "record": 6, "each": [6, 7, 8, 17, 21, 31, 33, 34, 48, 49, 50, 58, 59, 71, 72, 77, 79, 80, 92, 95, 109, 110, 111, 139, 163, 164, 166, 176, 178, 189, 190, 232, 248, 252, 354, 360, 364, 373, 377, 390, 398, 414, 415, 417, 432, 442, 444, 447, 448, 451], "approxim": [6, 8, 17, 77, 118, 176, 177, 442, 444], "maximum": [6, 10, 35, 138, 163, 164, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 278, 279, 285, 288, 289, 290, 291, 292, 295, 301, 302, 303, 304, 305, 314, 315, 317, 318, 319, 320, 330, 377, 422], "spike": 6, "hard": [6, 21, 161, 174, 175, 190, 439], "dynam": [6, 11, 22, 177, 444, 446], "alloc": [6, 21], "rough": [6, 163, 164], "exact": [6, 80, 118, 162, 177, 445], "complex": [6, 16, 17, 21, 137, 144, 163, 164, 364, 373, 439, 443], "largest": [6, 80, 364, 373, 424], "mainli": [6, 21, 46], "below": [6, 8, 11, 17, 118, 137, 144, 161, 174, 175, 189], "per": [6, 11, 17, 80, 163, 164, 177, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 426, 427], "multigrid": [6, 16, 85], "benefici": 6, "overhead": [6, 17], "cost": 6, "perform": [6, 8, 11, 17, 19, 21, 31, 32, 33, 34, 84, 150, 163, 164, 177, 253, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 278, 279, 285, 288, 289, 290, 291, 292, 295, 301, 302, 303, 304, 305, 317, 318, 319, 320, 364, 373, 377, 439], "equival": [6, 15, 17, 21, 80, 192, 196, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 373, 442, 444], "precondit": [6, 16, 266, 277, 280, 288, 289, 290, 292, 439], "enough": [6, 17, 134, 161, 174, 175, 223], "speedup": [6, 17], "specif": [6, 8, 12, 16, 21, 32, 71, 72, 191, 192, 415, 424, 439, 449], "someth": [7, 8, 15, 17, 19, 80, 138, 161, 174, 175, 190, 191, 373, 432, 450], "least": [7, 8, 11, 17, 177, 191, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "four": [7, 17, 19, 112, 166, 176, 178, 248], "demonstr": [7, 17, 21, 46, 66, 71, 72, 81, 82, 107, 110, 122, 123, 127, 129, 137, 138, 139, 144, 156, 157, 166, 167, 442], "applic": [7, 9, 11, 16, 19, 21, 71, 72, 439, 442, 444], "finish": [7, 38, 39, 67, 77, 90, 94, 137, 138, 139, 144, 166, 177, 181, 182], "left": [7, 8, 15, 17, 20, 31, 32, 33, 34, 35, 48, 49, 50, 55, 58, 59, 66, 67, 70, 74, 80, 81, 82, 84, 107, 113, 115, 118, 122, 125, 128, 130, 134, 137, 138, 139, 149, 156, 161, 162, 163, 164, 167, 174, 175, 176, 177, 178, 181, 189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 336, 344, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 440, 443, 444], "shell": [7, 11, 13, 15, 17, 34, 157, 439], "At": [7, 11, 17, 21, 77, 138, 192], "enter": [7, 15], "queri": [7, 415], "session": [7, 14, 15, 17, 21], "directli": [7, 8, 17, 19, 21, 71, 72, 80, 81, 82, 181, 189, 190, 191, 278, 360, 449, 450], "block": [7, 15, 73, 80, 181], "final": [7, 8, 74, 80, 90, 112, 114, 115, 163, 164, 167, 181, 223, 252, 354, 362], "importantli": 7, "templat": 7, "emphasi": [7, 10], "comprehens": [7, 21], "framework": [7, 15, 21, 192, 449], "steadyst": [7, 15, 20, 76, 79], "succinct": [7, 8, 11, 13], "prompt": [7, 15, 17, 80, 177, 192], "copy_script": [7, 80, 138], "addit": [7, 17, 20, 73, 80, 139, 364, 369, 373, 377, 383, 439], "those": [7, 8, 9, 11, 17, 21, 80, 85, 137, 138, 139, 144, 163, 164, 189, 439, 449, 450], "dozen": 7, "electrostat": [7, 20, 107, 111, 112, 113, 114, 115], "nthorder": [7, 20], "input4thorder1d": [7, 20], "exponential1d": [7, 20, 53, 55, 56, 60, 61, 64, 65, 189], "exponential1dsourc": [7, 20], "binarycoupl": [7, 8, 17, 20], "mesh40x1": [7, 8, 20, 166], "polyxtalcoupl": [7, 17, 20], "advect": [7, 20, 66, 138, 149, 151, 163, 164, 330, 344], "reactivewet": [7, 20], "liquidvapor1d": [7, 20], "canon": [8, 31, 32, 33, 34, 163, 164, 176, 377], "govern": [8, 12, 73, 80, 113, 134, 137, 138, 139, 144, 149, 150, 161, 162, 163, 164, 174, 175, 181], "underbrac": [8, 107, 176, 443], "frac": [8, 17, 31, 32, 33, 34, 35, 48, 49, 50, 55, 58, 59, 66, 67, 70, 73, 74, 76, 80, 84, 107, 109, 113, 115, 118, 122, 123, 129, 134, 137, 138, 139, 149, 150, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 181, 189, 321, 330, 339, 344, 354, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 442, 443, 445], "partial": [8, 14, 16, 17, 20, 31, 32, 33, 34, 35, 66, 67, 70, 73, 76, 80, 84, 107, 109, 113, 122, 123, 129, 138, 149, 161, 162, 163, 164, 167, 170, 171, 172, 174, 175, 176, 177, 181, 192, 279, 330, 344, 354, 439, 440, 443, 444], "rho": [8, 20, 74, 80, 115, 176, 181, 182, 354, 440, 443, 444], "_": [8, 17, 32, 70, 73, 80, 107, 118, 163, 164, 176, 177, 321, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 377, 379, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 443], "vphantom": [8, 107, 176, 443], "nabla": [8, 17, 20, 31, 32, 33, 34, 35, 48, 49, 50, 55, 58, 59, 73, 74, 76, 80, 107, 109, 113, 115, 118, 122, 123, 127, 128, 130, 138, 149, 161, 162, 163, 164, 167, 170, 171, 172, 174, 175, 176, 177, 189, 330, 334, 336, 339, 341, 342, 344, 345, 349, 356, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 440, 443, 444], "cdot": [8, 17, 20, 31, 32, 33, 34, 35, 48, 49, 50, 55, 58, 59, 74, 76, 80, 107, 109, 115, 118, 122, 123, 138, 149, 161, 162, 163, 164, 167, 174, 175, 176, 189, 334, 336, 339, 341, 342, 345, 349, 356, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 440, 443, 444], "vec": [8, 17, 20, 48, 49, 50, 51, 53, 55, 56, 58, 59, 80, 118, 122, 123, 149, 163, 164, 177, 182, 189, 321, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 440, 443, 444], "gamma_i": [8, 442, 443], "n": [8, 14, 17, 19, 74, 80, 107, 109, 110, 113, 115, 118, 122, 138, 139, 144, 156, 161, 162, 163, 164, 166, 174, 175, 176, 178, 222, 334, 341, 342, 345, 349, 356, 364, 373, 377, 381, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 442, 443, 446], "s_": [8, 177, 442, 443], "discuss": [8, 10, 15, 20, 21, 32, 440, 445], "discret": [8, 17, 20, 46, 80, 118, 161, 166, 167, 174, 175, 181, 222, 223, 339, 341, 342, 345, 349, 356, 440, 444], "pose": [8, 73], "ratio": [8, 70, 139, 144, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 445], "along": [8, 11, 17, 21, 31, 32, 80, 144, 161, 174, 175, 364, 373, 377], "coordin": [8, 71, 72, 90, 219, 223, 229, 231, 232, 234, 240, 248, 252, 432], "partial_x": 8, "notic": [8, 12, 15, 190, 449], "within": [8, 11, 13, 17, 21, 70, 118, 181, 223, 232, 248, 252, 377, 442, 447, 448, 451], "first": [8, 11, 16, 17, 21, 35, 44, 45, 71, 72, 73, 74, 80, 113, 114, 115, 118, 122, 123, 136, 138, 149, 150, 162, 163, 164, 166, 177, 178, 181, 189, 190, 191, 219, 223, 231, 232, 234, 235, 240, 248, 251, 252, 323, 330, 360, 364, 373, 374, 377, 383, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 424, 425, 434, 442, 450], "higher": [8, 16, 17, 20, 118, 163, 164, 181, 198, 222, 223, 330, 336, 443, 444, 445], "although": [8, 9, 11, 16, 17, 21, 31, 32, 80, 107, 111, 113, 162, 163, 164, 177, 189, 190, 394, 442, 443], "confus": [8, 439], "interpret": [8, 15, 17, 21, 449, 450], "examin": [8, 21, 74, 115, 163, 164, 442], "short": [8, 138], "represent": [8, 20, 80, 137, 141, 142, 177, 208, 227, 228, 229, 230, 231, 232, 248, 249, 250, 251, 252, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 356, 357, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438], "assum": [8, 15, 118, 139, 161, 163, 164, 174, 175, 181, 364, 373, 377, 394, 442], "fourth": [8, 84], "isotrop": [8, 93], "nomin": 8, "anomal": 8, "equiv": [8, 17, 163, 164, 176, 177, 445], "conveni": [8, 11, 364, 373], "appli": [8, 14, 20, 21, 66, 80, 81, 82, 118, 138, 163, 164, 177, 191, 194, 196, 197, 198, 278, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 440, 446], "rotat": [8, 34, 70, 157, 162], "realiz": [8, 189], "even": [8, 10, 17, 20, 21, 31, 33, 34, 93, 113, 164, 176, 189, 198, 330, 344, 360, 440, 443], "though": [8, 93, 113, 164, 177], "superfici": 8, "resembl": [8, 73, 137, 144], "d_1": [8, 336], "d_2": [8, 336], "xi": [8, 107, 111, 112, 113, 114, 162, 176], "third": [8, 11, 19, 136, 364, 373, 439], "d2": [8, 336], "facegrad": [8, 17, 20, 66, 67, 73, 80, 84, 109, 110, 111, 112, 114, 161, 162, 163, 164, 166, 167, 174, 175, 176, 181, 182, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 442], "diverg": [8, 17, 20, 66, 73, 118, 162, 163, 164, 166, 167, 174, 387, 395, 398, 399, 401, 415, 417, 418, 442], "grad": [8, 20, 71, 72, 112, 113, 114, 118, 166, 167, 174, 175, 181, 182, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 432], "arithmeticfacevalu": [8, 20, 31, 33, 34, 35, 118, 163, 164, 166, 167, 174, 175, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "rate": [8, 31, 32, 138, 139, 144, 150, 161, 174, 175, 177, 387, 399], "rho_1": 8, "rho_2": 8, "manner": [8, 17, 21, 166, 167, 176, 181, 442], "rho1": 8, "rho2": 8, "perspect": 8, "might": [8, 19, 21, 163, 164, 442], "mobil": [8, 107, 112, 113, 114, 163, 164, 176, 401], "counter": [8, 107, 176], "eq": [8, 31, 32, 33, 34, 38, 39, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 71, 72, 76, 79, 80, 81, 82, 84, 85, 89, 113, 163, 164, 175, 177, 181, 189, 190, 354], "d1": [8, 336], "With": [8, 21, 80, 161, 163, 164, 174, 175, 190, 449], "advent": 8, "gamma_1": [8, 20, 440, 443, 444], "gamma_0": [8, 134], "diffterm": [8, 189, 190], "gamma0": [8, 17], "converg": [8, 73, 80, 163, 164, 166, 177, 354], "plan": 8, "restart": [8, 166], "stage": [8, 9, 11, 14, 21, 80, 401, 446], "ll": [8, 11, 17, 80, 113, 134, 139, 144, 161, 163, 164, 174, 175, 176, 177, 190, 191], "illustr": [8, 21, 80, 442], "howtowriteascript": [8, 20], "On": [8, 11, 21, 22, 163, 164, 177, 442], "littl": [8, 21, 163, 164, 190, 449], "anyth": [8, 17, 21, 31, 32, 33, 34, 424], "besid": 8, "anoth": [8, 11, 13, 21, 71, 72, 80, 112, 136, 163, 164, 167, 177, 330, 344, 350, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 449], "piec": [8, 17, 21], "softwar": [8, 11, 12, 16, 19, 21, 137, 144, 439], "qualiti": [8, 18, 323, 439], "graph": [8, 95], "multiscal": 8, "ascii": 8, "tab": [8, 11, 71, 72, 432], "separ": [8, 11, 15, 17, 21, 22, 31, 32, 71, 72, 73, 109, 110, 111, 112, 113, 114, 176, 177, 181, 364, 373, 377, 383, 426, 427, 432, 442], "button": 8, "filenam": [8, 17, 71, 72, 112, 141, 142, 166, 223, 374, 390, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438], "myimag": 8, "ext": [8, 138, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "ep": [8, 166, 167, 174, 175], "jpg": 8, "joint": 8, "photograph": 8, "expert": 8, "png": [8, 17], "portabl": [8, 16, 439], "network": 8, "graphic": [8, 17, 19], "chosen": [8, 17, 21, 112, 114, 445], "yet": [8, 166, 439], "knowledg": [8, 17, 21, 449], "agg": 8, "cairo": 8, "net": [8, 16, 18, 439], "facil": [8, 110, 163, 164, 439], "previou": [8, 17, 32, 80, 161, 163, 164, 174, 175, 177, 189, 364, 373, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442], "stitch": 8, "free": [8, 12, 18, 19, 21, 31, 32, 35, 107, 163, 164, 176, 177, 181, 182, 190, 191, 439, 446], "sharewar": 8, "adapt": [8, 16, 21, 161, 174, 175, 322, 323, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 439], "utilitarian": [8, 161, 174, 175], "let": [8, 17, 80, 118, 161, 163, 164, 174, 175, 177, 189, 354], "minimum": [8, 17, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "tri": [8, 17, 80, 432], "plotter": 8, "common": [8, 17, 18, 21, 137, 177, 208, 439, 442, 449], "often": [8, 11, 17, 80, 138, 161, 174, 175, 401, 443], "supplement": 8, "underli": [8, 73, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "come": [8, 11, 17, 19, 21, 190, 373], "closest": [8, 377, 394], "overrid": [8, 16, 17], "wan": 8, "heavi": [8, 17], "lift": 8, "custom": [8, 17, 21, 34, 161, 192, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "differenti": [8, 14, 16, 192, 439, 444], "benefit": [8, 17, 21, 31, 33, 34, 48, 49, 50, 58, 59, 177, 189], "repetit": 8, "achiev": [8, 11, 17, 80, 84, 109, 111, 181, 445], "similar": [8, 80, 90], "three": [8, 10, 11, 16, 17, 19, 21, 110, 111, 114, 139, 178, 181, 190, 223, 446], "layer": [8, 136, 137, 138, 139, 144, 219, 223, 229, 231, 234, 240, 248], "lowest": 8, "spend": [8, 192], "think": [8, 10, 17, 21, 163, 164], "practic": [8, 10, 11, 17, 20, 73, 163, 164, 177, 190, 439, 440, 441, 449], "exactli": [8, 15, 17, 66, 163, 164, 177, 364, 373], "thu": [8, 21, 50, 80, 137, 139, 167, 177, 362, 442, 445], "emploi": [8, 11, 16, 17, 177, 444], "until": [8, 17, 21, 80, 321], "satisfactorili": [8, 74], "choos": [8, 11, 16, 17, 70, 80, 163, 164, 177], "toler": [8, 9, 11, 16, 17, 35, 46, 53, 55, 56, 60, 65, 80, 90, 109, 110, 112, 163, 164, 166, 176, 181, 182, 189, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 278, 279, 285, 288, 289, 290, 291, 292, 295, 301, 302, 303, 304, 305, 317, 318, 319, 320, 364, 373, 377], "desir": [8, 9, 11, 21, 163, 164, 176, 177, 189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 373], "mysolv": 8, "linearpcgsolv": [8, 20, 163, 189, 190, 266, 330], "1234": 8, "5e": [8, 32, 138, 161, 162, 163, 164, 174, 175, 177, 181, 182, 387, 395, 399, 401], "favor": 8, "role": [8, 21], "middl": [8, 163, 164, 223], "concentr": [8, 51, 53, 56, 60, 61, 64, 65, 73, 74, 76, 77, 107, 109, 110, 111, 112, 114, 115, 138, 139, 144, 163, 164, 176, 189, 419, 443], "temperatur": [8, 14, 80, 138, 139, 144, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 181, 182, 401, 443], "thermal": [8, 19, 80, 161, 174, 175, 401], "perfect": 8, "good": [8, 46, 58, 59, 80, 118, 177, 444], "elaps": [8, 31, 32, 33, 34, 112, 174, 175, 177], "despit": [8, 17], "evolv": [8, 10, 170, 171, 172], "quasi": 8, "static": [8, 201, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "steadi": [8, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 64, 65, 71, 72, 74, 80, 81, 82, 84, 90, 93, 106, 113, 177, 189], "distinguish": [8, 17], "cycl": [8, 21, 439], "done": [8, 9, 11, 17, 190, 362], "modifi": [8, 11, 12, 13, 15, 21, 144, 181, 449], "myvar": 8, "updateold": [8, 20, 38, 39, 70, 73, 80, 110, 112, 114, 122, 123, 125, 138, 149, 150, 151, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 181, 182, 354, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "repeatedli": [8, 80, 81, 82, 192, 321], "stabl": [8, 9, 11, 21, 80, 163, 164, 177, 445], "truli": 8, "desiredresidu": 8, "outermost": 8, "understand": [8, 17, 139, 190], "evolut": [8, 21, 31, 32, 33, 34, 80, 137, 161, 164, 174, 175, 176, 443, 446], "goal": [8, 21], "studi": [8, 14, 21, 107, 115], "moreov": [8, 17, 19], "equilibrium": [8, 35, 74, 76, 77, 79, 80, 109, 110, 111, 112, 113, 114, 115, 163, 164, 176, 177, 181, 189], "fundament": [8, 21, 373], "becom": [8, 11, 17, 89, 109, 110, 111, 139, 161, 174, 175, 181, 394, 442, 443], "either": [8, 9, 11, 12, 16, 17, 21, 73, 80, 157, 163, 164, 177, 190, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 394, 401, 424, 442, 449, 450], "unstabl": [8, 89, 161, 174, 175], "inaccur": [8, 85, 442], "stabil": [8, 9, 11, 73, 80, 177, 301, 442], "accuraci": [8, 17, 38, 39, 70, 80, 138, 330, 394], "distinctli": 8, "said": 8, "blow": 8, "radic": 8, "perfectli": [8, 80, 189], "disagre": 8, "smaller": [8, 163, 164], "larger": [8, 80, 177, 401, 418, 442], "interv": 8, "234e": 8, "elapsedtim": 8, "totalelapsedtim": 8, "somefunctionofvariablesandtim": 8, "myvar1": 8, "myvar2": 8, "notabl": 8, "interfaci": [8, 113, 177], "gradual": 8, "down": [8, 17, 31, 32, 80, 177], "describ": [8, 17, 21, 31, 32, 51, 53, 56, 60, 61, 64, 65, 71, 72, 80, 114, 118, 139, 161, 174, 175, 177, 181, 364, 379, 442, 444, 447, 448, 450, 451], "substitut": [8, 17, 107, 109, 110, 111, 112, 113, 114, 115, 118, 176, 181, 424], "undesir": 8, "consequ": [8, 11, 118], "averag": [8, 80, 89, 118, 163, 164, 176, 181, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442], "f": [8, 17, 31, 32, 33, 34, 35, 80, 138, 139, 144, 161, 163, 164, 166, 176, 177, 181, 182, 322, 334, 341, 342, 345, 349, 356, 364, 373, 374, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442], "neq": [8, 107, 109, 176], "smoothli": 8, "dramat": [8, 73, 80], "sharp": [8, 31, 32, 112, 114, 163, 164, 176], "drop": [8, 11, 13, 17, 80, 118, 223], "harmon": [8, 31, 33, 34, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "experi": [8, 14, 16, 17, 138, 446], "excess": [8, 445], "vice": 8, "versa": 8, "ma": [8, 377], "maerror": 8, "locat": [8, 17, 22, 223, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 442, 447, 448, 451], "pm": [8, 174, 175], "infti": [8, 17, 113, 134, 137, 138, 139, 144, 321, 377, 387, 399, 445], "repair": 8, "catalog": 8, "kei": [8, 62, 67, 74, 89, 112, 115], "flag": [8, 11, 16, 20, 161, 162, 174, 175, 360, 440], "mailinglist": 8, "mailman": 8, "fn": [8, 321, 449], "dev": [8, 439], "2005": [8, 14, 20, 322, 440], "june": [8, 14], "003010": 8, "23": [8, 17, 20, 46, 107, 176, 373, 377, 440, 446], "neither": [8, 364, 373], "sloppi": 8, "thread": [8, 20, 440], "scientif": [8, 11, 14, 16, 18, 21, 439, 446], "4349": 8, "experienc": 8, "upgrad": [8, 11], "brows": [9, 11, 17], "through": [9, 11, 17, 19, 71, 72, 80, 163, 164, 166, 177, 189, 280, 318, 401], "download": [9, 11, 20, 440], "Be": [9, 11, 16, 17, 190], "pre": [9, 20, 118, 440], "scm": [9, 11, 446], "latest": [9, 11, 17], "subject": [9, 11, 12, 17, 73, 189, 364, 373, 377], "behav": [9, 11, 80, 198], "degre": [9, 11, 17, 118, 162, 163, 164], "indic": [9, 11, 15, 16, 17, 190, 191, 364, 373, 377, 381, 442], "decid": [9, 11], "risk": [9, 11, 373], "track": [9, 11, 21], "clone": [9, 11], "shift": [9, 11, 38, 39, 163, 164, 381], "past": [9, 11], "256": [9, 11, 20, 440], "g961ca499": [9, 11, 20, 440], "x_y_z": [9, 11], "retain": [9, 11, 17, 80, 163, 164], "guarante": [9, 11, 373, 445], "kept": [9, 11], "synchron": [9, 11], "altogeth": [9, 11, 80], "who": [9, 11, 21], "wide": [9, 11, 16, 18, 439, 443], "onlin": [9, 11, 17], "book": [9, 11, 446], "cours": [10, 17, 136, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "strai": 10, "peril": 10, "forbidden": 10, "greatest": 10, "extent": [10, 12], "had": [10, 80, 177, 189, 190], "great": [10, 19, 163, 164, 190], "knew": [10, 21], "rectangl": 10, "blob": [10, 11, 13, 174, 175], "def": [10, 109, 110, 111, 112, 113, 114, 115, 127, 128, 130, 161, 163, 164, 166, 174, 175, 176, 177, 181, 182, 190], "width": [10, 174, 175, 442], "height": [10, 46, 125, 163, 164, 177], "black": [10, 189], "red": 10, "strong": 10, "sorri": 10, "lose": 10, "mixedcas": 10, "lowercas": 10, "lower_case_with_underscor": 10, "deviat": [10, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 445], "unsur": 10, "anybodi": 10, "willing": 10, "seen": [10, 80, 163, 164], "unittest": [10, 21], "heavili": 10, "care": [10, 15, 17, 80, 177, 189], "taken": [10, 15, 21, 76, 77, 79, 80, 161, 174, 175, 373, 378], "defin": [10, 21, 46, 48, 49, 50, 55, 58, 59, 66, 71, 72, 80, 112, 137, 138, 161, 163, 164, 166, 167, 174, 175, 181, 189, 223, 233, 377, 387, 390, 394, 395, 398, 399, 401, 414, 415, 417, 422, 442, 445, 449, 450], "parallel_2": 10, "processor_0": [10, 360], "id": [10, 17, 20, 35, 141, 190, 377, 381, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 446], "processor_0_of_2": [10, 360], "processor_1_of_2": [10, 360], "processor_0_of_3": [10, 360], "processor_1_of_3": [10, 360], "processor_2_of_3": [10, 360], "register_skipp": [10, 20, 360], "pertain": 10, "reli": [11, 71, 72, 442, 449], "parti": [11, 19, 439], "begin": [11, 15, 17, 21, 35, 48, 50, 55, 58, 59, 70, 73, 74, 80, 114, 115, 128, 130, 138, 139, 144, 161, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 189, 223, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 445, 450], "By": [11, 17, 118, 177, 360, 394], "select": [11, 21, 222, 322, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 377, 445], "webspac": 11, "infer": 11, "drawn": 11, "referenc": 11, "concur": 11, "fact": [11, 80, 189, 190, 360, 394], "rudimentari": [11, 18, 118], "introduct": [11, 20, 441, 444, 446], "expedi": [11, 21], "manag": [11, 13, 17, 439], "virtual": [11, 20, 440, 441], "keep": [11, 31, 32, 33, 34, 138, 162], "suffici": [11, 163, 164, 190, 191, 364, 374, 379], "privileg": 11, "channel": [11, 17], "dai": [11, 21], "everyth": [11, 190], "myfipyenv": 11, "pythonvers": 11, "popul": 11, "anaconda": 11, "mpich": 11, "traitsui": 11, "x86_32": 11, "bit": [11, 71, 72, 163, 164, 177], "rot": 11, "One": [11, 17, 80, 89, 109, 111, 156, 163, 164, 177, 181, 189, 442], "vtkviewer": [11, 20], "remedi": 11, "quit": [11, 443], "mamba": 11, "speed": [11, 118], "pretti": 11, "visual": [11, 18, 439], "fewer": [11, 177], "amongst": 11, "freeli": [11, 15, 21, 192], "mind": [11, 17], "preserv": [11, 46, 122, 123, 377], "courag": 11, "impati": 11, "quickli": [11, 18, 139, 232, 252, 439], "formal": 11, "confid": [11, 118], "requisit": 11, "alter": [11, 17, 21], "admin": 11, "termin": [11, 17, 80, 90, 137, 138, 139, 144, 177], "15": [11, 14, 20, 35, 53, 55, 56, 60, 65, 66, 80, 112, 114, 163, 164, 166, 174, 175, 176, 177, 189, 235, 255, 256, 259, 288, 289, 290, 292, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 432, 440, 444, 446], "copyright": [11, 12], "credit": 11, "geuz": [11, 439], "creation": [11, 71, 72, 189, 449], "irregular": [11, 71, 72, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425], "analyz": [11, 71, 72], "judici": [11, 17], "compon": [11, 19, 31, 32, 73, 74, 109, 110, 111, 112, 113, 114, 115, 163, 164, 176, 181, 446], "fast": [11, 16, 21, 394, 446], "march": [11, 14, 394, 446], "ktchu": 11, "serendipityresearch": 11, "surfac": [11, 17, 19, 34, 71, 72, 94, 139, 157, 161, 174, 175, 177, 223, 442], "curv": [11, 177], "addition": [11, 19, 118], "pylsmlib": 11, "tree": [11, 424, 425, 434], "violat": 11, "tamper": 11, "util": [11, 20, 162, 166, 167, 170, 171, 172, 381, 439], "stow": 11, "virtualenv": 11, "buildout": 11, "cd": [11, 373], "power": [11, 13, 17, 21, 176, 192, 349, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 445, 449], "unix": [11, 13, 17], "reliabl": [11, 13, 190], "blog": [11, 13], "hpc": [11, 13], "team": [11, 13], "gricad": [11, 13], "tuto": [11, 13], "2017": [11, 13, 20, 440], "07": [11, 13, 373], "04": [11, 13, 20, 150, 440, 446], "my": [11, 13, 17, 20, 190, 440], "md": [11, 13], "pure": [11, 13, 17, 73, 107, 163, 164, 176], "nativebuildinput": [11, 13], "know": [11, 13, 17, 21, 113, 189, 190], "toolz": [11, 13], "persist": [11, 13, 19, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "employe": 12, "agenc": 12, "feder": [12, 21], "pursuant": 12, "protect": 12, "foreign": 12, "permiss": 12, "countri": 12, "deriv": [12, 15, 17, 31, 32, 33, 34, 67, 73, 80, 163, 164, 176, 181, 198, 322, 373, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442, 443, 444, 445, 449, 450], "fee": 12, "herebi": 12, "grant": [12, 19], "exclus": [12, 17], "basi": [12, 446], "disclaim": 12, "warranti": 12, "THE": 12, "AS": 12, "OF": 12, "kind": 12, "OR": 12, "statutori": 12, "BUT": 12, "NOT": 12, "TO": 12, "THAT": 12, "WILL": 12, "conform": 12, "merchant": 12, "fit": [12, 21, 177], "FOR": 12, "AND": [12, 377], "freedom": 12, "infring": 12, "BE": 12, "IN": 12, "NO": 12, "event": [12, 163, 164, 415], "shall": 12, "liabl": 12, "damag": 12, "indirect": 12, "consequenti": 12, "aris": 12, "connect": [12, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "WITH": 12, "contract": 12, "tort": 12, "otherwis": [12, 89, 141, 142, 161, 174, 175, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438], "injuri": 12, "sustain": 12, "BY": 12, "person": 12, "loss": [12, 16], "aros": 12, "hereund": 12, "cite": 14, "j": [14, 21, 74, 80, 107, 109, 112, 113, 115, 137, 138, 139, 144, 149, 163, 164, 166, 167, 174, 175, 176, 177, 178, 322, 364, 373, 377, 446], "11": [14, 17, 20, 46, 70, 71, 72, 94, 112, 118, 127, 141, 142, 181, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 373, 377, 440, 446], "pp": [14, 330], "2009": [14, 20, 440, 446], "1109": 14, "mcse": 14, "w": [14, 113, 139, 144, 163, 164, 167, 174, 175, 177, 223, 364, 373, 379, 446], "boetting": [14, 107, 446], "earli": [14, 21, 77, 446], "reactiv": [14, 15, 20, 192, 441, 446], "wet": [14, 15, 20, 166, 167, 192, 441, 446], "82": [14, 181, 182, 446], "051601": [14, 446], "2010": [14, 20, 440, 446], "1103": [14, 446], "physrev": [14, 446], "mohanti": 14, "sohn": 14, "gradient": [14, 20, 31, 32, 38, 81, 82, 107, 113, 118, 161, 163, 164, 166, 167, 174, 175, 177, 181, 276, 280, 301, 330, 344, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 440, 442], "journal": [14, 322, 446], "034912": 14, "1063": [14, 446], "3190607": 14, "pusztai": 14, "l": [14, 17, 35, 38, 39, 50, 51, 53, 55, 56, 60, 61, 62, 64, 65, 67, 74, 77, 80, 81, 82, 84, 106, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 127, 128, 129, 130, 134, 139, 144, 149, 150, 163, 164, 166, 170, 171, 172, 176, 177, 178, 181, 189, 222, 321, 322, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 446], "k": [14, 17, 21, 80, 107, 109, 112, 134, 138, 139, 144, 150, 163, 164, 176, 177, 354, 373, 425, 426, 427, 446], "\u00f6": [14, 443], "rnyei": 14, "gr": 14, "\u00e1": 14, "sy": [14, 360, 377, 387, 395, 399, 401], "approach": [14, 19, 20, 80, 163, 164, 177, 192, 223, 440, 442, 443], "heterogen": 14, "nucleat": [14, 31, 32], "alloi": [14, 31, 32, 163, 164, 446], "014204": 14, "physrevb": 14, "p": [14, 16, 17, 66, 107, 112, 113, 118, 163, 164, 167, 174, 175, 176, 177, 181, 322, 354, 364, 373, 439, 442, 445, 446], "moffat": [14, 446], "kim": [14, 446], "josel": [14, 446], "curvatur": [14, 138, 139, 446], "enhanc": [14, 439, 446], "adsorb": [14, 139, 446], "coverag": [14, 137, 138, 139, 144, 149, 150, 446], "bottom": [14, 81, 82, 118, 174, 175, 178, 189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "damascen": 14, "electrochimica": 14, "acta": [14, 446], "53": 14, "2007": [14, 20, 440], "1016": [14, 446], "electacta": 14, "03": [14, 20, 71, 77, 426, 427, 440, 446], "025": [14, 93, 94, 113, 114, 161, 174, 175, 177], "campbel": 14, "mcfadden": [14, 107, 446], "kirkendal": [14, 446], "displac": [14, 177, 219, 223, 229, 231, 234, 240, 248, 373], "dimension": [14, 19, 80, 81, 98, 110, 167, 177, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 446], "proceed": 14, "royal": 14, "societi": [14, 446], "mathemat": [14, 17, 423, 439, 442, 446], "2088": 14, "3347": 14, "3373": 14, "1098": 14, "rspa": 14, "1904": 14, "cickovski": 14, "ara": 14, "swat": 14, "merk": 14, "glimm": 14, "hentschel": 14, "alber": 14, "glazier": 14, "newman": 14, "izaguirr": 14, "gene": 14, "organ": 14, "multicellular": 14, "60": [14, 112, 113, 114, 139, 177, 364, 373], "saylor": [14, 446], "theori": [14, 46], "letter": [14, 446], "035703": 14, "physrevlett": [14, 446], "mazur": 14, "soil": 14, "solar": [14, 446], "radiat": 14, "de": 14, "physiqu": 14, "iv": 14, "franc": 14, "320": 14, "2006": [14, 20, 440, 446], "1051": 14, "jp4": 14, "2006137061": 14, "electrodeposit": [14, 15, 144, 176, 192, 446], "c127": [14, 446], "c132": [14, 446], "1149": [14, 446], "2165580": [14, 446], "gold": [14, 20, 446], "submicromet": [14, 446], "trench": [14, 20, 136, 137, 138, 139, 144, 446], "c11": [14, 446], "c18": [14, 446], "2128765": [14, 446], "were": [14, 17, 21, 360, 377], "honor": 14, "invit": 14, "deliv": 14, "keynot": 14, "confer": 14, "caltech": 14, "august": 14, "talk": 14, "georg": 14, "mason": 14, "depart": 14, "octob": 14, "devic": 14, "radiolog": 14, "health": 14, "food": 14, "drug": [14, 15, 192, 446], "ge": [14, 125, 330], "siam": 14, "tm": [14, 38, 39, 177], "annual": [14, 446], "meet": [14, 138], "februari": 14, "educ": 14, "luncheon": 14, "roundtabl": 14, "transform": [14, 15, 107, 163, 164, 176, 177, 192, 442], "microstructologi": 14, "iii": [14, 223, 446], "birmingham": 14, "al": [14, 166, 167, 174, 175, 181], "2004": [14, 20, 112, 440, 446], "mr": 14, "fall": [14, 118], "novemb": 14, "arbitrari": [15, 17, 19, 109, 110, 111, 190, 192, 257, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 443], "ellipt": [15, 192], "hyperbol": [15, 177, 192, 364, 373], "parabol": [15, 192], "dendrit": [15, 19, 21, 161, 162, 174, 175, 192, 446], "elut": [15, 192, 446], "stent": [15, 192], "photovolta": [15, 192], "redistribut": 15, "bear": 15, "welcom": [15, 21], "collabor": [15, 19], "project": [15, 18, 71, 72, 364, 383, 439], "driven": 15, "editor": 15, "tcsh": 15, "bash": 15, "throughout": [15, 138, 162], "keyboard": 15, "denot": [15, 107, 118, 166, 181, 442], "12": [15, 17, 20, 21, 46, 80, 112, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 373, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 423, 440, 446], "twelv": 15, "primari": [15, 21], "secondari": 15, "remain": [15, 17, 34, 80, 112, 114, 118, 157, 162, 163, 164, 176, 190, 191, 377, 445], "margin": [15, 17], "sensit": 15, "indent": 15, "posix": 15, "seriou": [15, 16, 32, 122, 123], "less": [16, 80, 163, 164, 330, 344, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 442], "popular": [16, 444], "viabl": 16, "defaultsolv": [16, 20, 33, 34, 35, 253], "lineargmressolv": [16, 20, 62], "fipy_solv": [16, 17], "linearlusolv": [16, 20, 31, 35, 62, 110, 112, 164, 189, 344], "regardless": [16, 161, 174, 175, 222], "mc": [16, 163, 164, 439], "anl": [16, 439], "toolkit": [16, 439], "structur": [16, 18, 20, 80, 439, 440, 442, 446], "routin": [16, 177, 192, 439], "scalabl": [16, 439], "precodition": 16, "pctype": 16, "precon": [16, 33, 34, 84, 109, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 276, 277, 279, 280, 282, 284, 285, 288, 289, 290, 291, 292, 295, 301, 302, 303, 304, 305, 317, 319, 320], "declar": [16, 33, 34, 80, 118, 163, 164, 401, 449], "storag": [16, 161, 174, 175, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 439, 442], "precondition": [16, 17, 20, 85, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 276, 277, 279, 280, 285, 288, 289, 290, 291, 292, 295, 301, 302, 303, 305, 317, 318, 319, 320, 439], "factor": [16, 17, 32, 118, 163, 218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 269, 279, 291, 373, 442], "krylov": 16, "conjunct": [16, 17, 21, 198], "readthedoc": [16, 439], "nvidia": [16, 439], "amgx": [16, 263, 264, 265, 266, 267, 268, 272, 439], "sandia": [16, 318, 439], "difficult": [16, 18, 80, 190, 192, 439], "alongsid": 16, "compil": [16, 17, 21, 439], "suppress": [16, 377], "commonli": [16, 190], "encount": [16, 378], "gen_prolong": 16, "eigen": 16, "aztec": [16, 315, 318], "az_loss": 16, "precis": [16, 364, 373, 377], "difficulti": 16, "usual": [16, 21, 177, 181, 189, 232, 234, 235, 248, 252, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 377], "az_ill_cond": 16, "gmre": [16, 256, 268, 277, 290, 303], "hessenberg": 16, "ill": 16, "accur": [16, 31, 33, 34, 80, 85, 122, 177, 330], "az_breakdown": 16, "breakdown": 16, "reach": [16, 17, 21, 76, 77, 79, 139, 163, 164, 177], "restrict": [16, 17, 373, 442], "sens": 17, "strongli": [17, 189], "proce": [17, 32, 71, 72, 80, 81, 82, 163, 164, 177, 181], "assumpt": [17, 139, 163, 164], "seri": 17, "familiar": 17, "yourself": [17, 449, 450], "excel": 17, "dive": [17, 446], "Into": [17, 446], "deeper": [17, 394], "insight": 17, "getlogg": 17, "consol": 17, "streamhandl": 17, "setlevel": 17, "info": 17, "addhandl": 17, "verbos": [17, 360], "save": [17, 20, 138, 141, 142, 166, 374, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438, 439, 440], "logfil": 17, "filehandl": 17, "filter": [17, 190, 295], "addfilt": 17, "fipy_log_config": 17, "mpilog": 17, "mpiscatteredfilehandl": 17, "filepattern": 17, "mpirank": 17, "d_of_": 17, "mpisiz": 17, "uniqu": [17, 21], "egg_info": 17, "investig": [17, 95], "tracker": 17, "dashboard": 17, "core": [17, 21], "behavior": [17, 20, 21, 139, 191, 377, 440, 449, 450], "insensit": 17, "myfipyscript": 17, "someflag": 17, "lazili": [17, 423], "recalcul": [17, 129, 181, 182, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 423], "skfmm": 17, "compos": [17, 21, 163, 164, 449], "fipy_inlin": 17, "fipy_inline_com": 17, "context": [17, 227, 253, 295, 325, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424], "json": [17, 439], "config": [17, 362], "dictconfig": 17, "fipy_verbose_solv": 17, "lineargeneralsolv": [17, 20], "fipy_include_numerix_al": [17, 191], "fipy_cach": 17, "petsc_opt": 17, "tri2d": [17, 20, 77, 90, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 249, 250, 251, 252, 425, 426, 427], "skewedgrid2d": [17, 20, 92, 95], "advis": 17, "myscript": [17, 138, 295], "slurm": 17, "task": [17, 21], "manufactur": 17, "allen": [17, 161, 174, 175, 177], "hire": 17, "bigger": 17, "versu": 17, "style": 17, "observ": [17, 162], "exhibit": [17, 107, 401, 443], "law": [17, 21, 163, 164, 181, 349, 445], "slab": 17, "compact": 17, "carri": 17, "fairli": [17, 161, 166, 167, 174, 175], "lag": 17, "wors": 17, "discrep": 17, "obviou": [17, 163, 177], "endeavor": 17, "20": [17, 20, 21, 31, 32, 46, 70, 81, 82, 93, 94, 103, 111, 112, 144, 161, 162, 164, 174, 175, 178, 181, 182, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 373, 394, 423, 440, 443, 446], "modest": 17, "caveat": 17, "architectur": [17, 439], "easiest": 17, "confirm": [17, 80, 112, 114, 166, 176, 253], "half": [17, 166, 191], "look": [17, 20, 80, 163, 164, 440], "69815": 17, "freed": 17, "69814": 17, "69813": 17, "essenti": [17, 48, 49, 50, 58, 59, 80, 138, 163, 164, 189, 364, 373, 377, 442, 444], "sub": [17, 248, 442, 447, 448, 451], "somewhat": [17, 21, 31, 33, 34, 330, 344], "xterm": 17, "ipdb": 17, "spawn": 17, "intent": 17, "node": [17, 364, 383], "cluster": 17, "child": [17, 364, 383], "compet": [17, 31, 32, 163, 164], "ghost": [17, 223], "exchang": [17, 138, 139, 144], "lock": 17, "gil": 17, "bind": [17, 429, 439, 449], "parent": 17, "suffer": 17, "launch": [17, 80], "minut": [17, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "unrestrict": [17, 21], "degrad": 17, "conceiv": 17, "unfett": 17, "slot": 17, "msg03393": 17, "notfun": 17, "polygon": 17, "wrapper": [17, 269, 276, 277, 279, 280, 282, 284, 291, 299, 366, 374, 378, 439], "gmsh3d": [17, 20, 191, 223], "geometri": [17, 21, 71, 72, 137, 138, 139, 144, 157, 189, 197, 223, 233, 249, 250, 390, 394, 398, 414, 415, 417], "geo": [17, 223], "msh": [17, 70, 223], "occur": [17, 34, 166, 177, 181, 189, 364, 373, 394], "whenev": [17, 295, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "compromis": [17, 80], "highli": [17, 21, 312], "orthogon": [17, 21, 92, 94, 95, 248, 442], "tighter": 17, "tempor": 17, "eqn0": [17, 73], "eqn1": [17, 73], "coupledeqn": [17, 181, 182], "quadrant": [17, 178], "act": [17, 21], "term00": 17, "term01": 17, "source0": 17, "term10": 17, "term11": 17, "source1": 17, "ttfamili": 17, "hline": [17, 139, 144], "decis": 17, "regard": 17, "column": [17, 71, 72], "upper": [17, 424], "revers": [17, 51, 56, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "decompos": [17, 31, 33, 34, 73], "2nd": [17, 32, 323, 336, 446], "pair": [17, 73, 107, 377], "4th": [17, 85, 336], "phi": [17, 20, 21, 31, 32, 33, 34, 35, 48, 49, 50, 55, 58, 59, 67, 70, 71, 72, 74, 76, 77, 80, 81, 82, 84, 107, 111, 112, 113, 114, 115, 122, 123, 125, 127, 128, 129, 130, 138, 149, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 189, 190, 330, 334, 336, 339, 341, 342, 344, 345, 347, 349, 354, 356, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 440, 443, 444], "kappa_c": [17, 163, 164], "kappa_": [17, 107, 113, 163, 164, 176, 177], "mu": [17, 118, 166, 167, 174, 175, 176, 181, 182, 373, 395, 401], "hat": [17, 50, 80, 138, 398, 417, 418, 442], "qquad": [17, 35, 66, 107, 113, 130, 134, 163, 164, 170, 171, 172, 176, 330], "facestop": [17, 20, 51, 56, 81, 82, 118, 138, 182, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "fixedvalu": [17, 20, 189, 190, 191, 198], "facenorm": [17, 233, 234, 235], "exterior": [17, 67, 71, 72, 80, 156, 223], "firstli": [17, 71, 72, 122, 123, 127, 129, 156, 181, 394], "diffcoeff": [17, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 106, 189, 190], "convcoeff": [17, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 189, 190], "extra": [17, 360], "eqn": [17, 38, 39, 70, 73, 77], "diffusioncoeff": [17, 35, 38, 39, 66, 76, 138, 166, 167, 189], "exteriorflux": 17, "fixedflux": [17, 20, 189, 191, 198], "unless": [17, 19, 31, 32, 33, 34, 222, 364, 379], "xy": [17, 232, 252, 330], "quad": [17, 84, 177], "elsewher": 17, "repres": [17, 20, 21, 31, 32, 48, 49, 58, 59, 67, 73, 76, 80, 109, 111, 112, 113, 114, 129, 138, 139, 150, 161, 162, 174, 175, 177, 189, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 334, 336, 347, 354, 373, 387, 390, 395, 399, 401, 422, 440, 442, 443], "portion": [17, 21], "s_r": 17, "int_v": [17, 334, 339, 341, 342, 345, 347, 349, 354, 356, 442], "dv": [17, 163, 164, 181, 334, 339, 341, 342, 345, 347, 349, 354, 356, 442], "int_": [17, 163, 164, 442], "notin": 17, "setvalu": [17, 20, 21, 31, 33, 34, 66, 71, 72, 74, 80, 84, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 129, 138, 141, 142, 150, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 178, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 426, 427], "powerlawconvectionterm": [17, 20, 48, 49, 50, 58, 59, 62, 64, 65, 66, 67, 109, 110, 111, 112, 114, 163, 175, 176, 189, 190, 330, 333, 334, 341, 342, 343, 344, 345, 347, 350, 351, 354, 356, 357, 442], "onto": [17, 31, 33, 34, 134, 190], "natur": [17, 73, 139, 190, 364, 373, 442], "interven": [17, 80], "neighbor": [17, 330, 394, 442, 445], "phi_f": [17, 334, 341, 342, 345, 349, 356, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442], "approx": [17, 163, 164, 177, 398, 417, 418], "phi_p": [17, 330, 334, 339, 341, 342, 344, 345, 347, 349, 354, 356, 442, 445], "fp": [17, 20, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 426, 427], "_f": [17, 118, 181, 334, 341, 342, 345, 349, 356, 398, 417, 418, 442], "adjoin": 17, "g_f": 17, "b_f": 17, "turn": [17, 189], "gamma": [17, 70, 134, 144, 166, 167, 174, 175, 190, 339, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 442, 443], "sum_f": [17, 118, 339, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 442], "gamma_f": [17, 339, 442], "a_f": [17, 118, 181, 182, 334, 339, 341, 342, 345, 349, 356, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 442], "sum_": [17, 74, 107, 109, 113, 115, 139, 176, 334, 341, 342, 345, 349, 356, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442], "modif": 17, "dpf": 17, "celldistancevector": 17, "robincoeff": 17, "similarli": [17, 139], "heat": [17, 80, 161, 163, 164, 174, 175, 177, 446], "t_": 17, "posit": [17, 71, 72, 80, 125, 129, 138, 150, 151, 190, 280, 313, 403, 445], "largevalu": 17, "paramet": [17, 20, 21, 31, 32, 38, 39, 71, 72, 77, 79, 80, 112, 114, 118, 122, 123, 127, 129, 134, 137, 138, 139, 141, 142, 144, 162, 163, 164, 166, 167, 177, 181, 189, 194, 196, 197, 198, 219, 222, 223, 229, 231, 234, 240, 248, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 276, 277, 278, 279, 280, 285, 288, 289, 290, 291, 292, 295, 301, 302, 303, 304, 305, 317, 318, 319, 320, 321, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 362, 364, 369, 373, 374, 377, 378, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 443, 445, 449, 450], "domin": 17, "rh": [17, 35, 118, 196, 197, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "typic": [17, 118, 163, 164, 336], "boolean": [17, 177, 364, 373], "noth": [17, 109, 110, 111, 157, 360], "believ": [17, 189], "intuit": 17, "pathologi": 17, "attent": [17, 223], "implicitli": [17, 90, 177, 181], "nx": [17, 31, 32, 33, 35, 38, 39, 46, 50, 51, 53, 55, 56, 60, 61, 62, 64, 65, 66, 67, 73, 74, 76, 77, 79, 80, 81, 82, 84, 89, 90, 93, 96, 98, 99, 103, 106, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 129, 138, 141, 142, 156, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 178, 181, 182, 189, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 374, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 426, 427, 432], "rvert_": [17, 80, 177], "facesright": [17, 20, 35, 48, 49, 50, 53, 55, 58, 59, 60, 61, 62, 64, 65, 66, 67, 73, 77, 80, 81, 82, 84, 93, 94, 112, 118, 182, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "1e": [17, 33, 34, 35, 38, 39, 46, 48, 49, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 73, 79, 80, 81, 82, 84, 89, 90, 96, 98, 99, 106, 109, 110, 111, 112, 113, 114, 125, 128, 134, 138, 149, 150, 163, 164, 166, 167, 174, 175, 176, 177, 178, 181, 182, 189, 190, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 278, 279, 288, 289, 290, 291, 292, 295, 301, 302, 303, 304, 305, 317, 318, 319, 330, 344, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "unexpect": [17, 360], "everywher": [17, 111, 113, 138, 166, 167, 177], "januari": [17, 112], "2020": [17, 20, 440], "pledg": 17, "later": [17, 19, 111, 166, 390], "priorit": 17, "awar": 17, "rapidli": [17, 21], "impract": 17, "hopefulli": 17, "latexpdf": 17, "plu": [17, 80, 442], "v7": 17, "bibliograph": 17, "numpydoc": 17, "embed": [17, 19, 21, 157], "imagemagick": 17, "siunit": 17, "sty": 17, "texliv": 17, "pyspel": 17, "hunspel": 17, "libreoffic": 17, "wget": 17, "aff": 17, "cgit": 17, "freedesktop": 17, "en": [17, 439], "a4473e06b56bfe35187e302754f6baaa8d75e54f": 17, "dic": 17, "far": [18, 80, 112, 114, 138, 139, 144, 176, 394], "vkml": 19, "aspect": [19, 118, 139, 144, 167, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "semin": 19, "michael": 19, "water": 19, "prof": 19, "edwin": 19, "garcia": 19, "purdu": 19, "coarsen": 19, "random": [19, 31, 32, 33, 34, 92, 161, 174, 175, 181, 182, 240, 387, 395, 399, 401, 415, 422], "crystallograph": 19, "nuclei": [19, 174, 175], "radiu": [19, 34, 71, 72, 122, 150, 157, 161, 162, 174, 175, 223], "size": [19, 20, 32, 77, 79, 99, 112, 138, 139, 144, 181, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 379, 403, 442], "homogen": [19, 31, 32], "dispers": 19, "wall": [19, 118], "seed": [19, 161, 162, 174, 175, 181, 182, 387, 395, 399, 401, 415], "fold": 19, "undercool": [19, 161, 174, 175, 177], "liquid": [19, 112, 114, 161, 162, 163, 164, 166, 174, 175, 176, 181], "strength": [19, 442, 445], "tension": 19, "spinod": [19, 31, 32, 33, 34], "decomposit": [19, 31, 32, 307, 310, 311, 442], "segreg": [19, 31, 32, 74, 112, 114, 115, 176], "chemic": [19, 107, 163, 164, 176, 181, 443, 446], "john": [19, 446], "browser": 19, "assess": 19, "potenti": [19, 74, 107, 111, 112, 113, 114, 115, 163, 164, 176, 181, 182, 443], "word": [19, 90, 137, 138, 139, 144, 177], "michigan": 19, "boston": 19, "japan": 19, "england": 19, "wherev": 19, "cowork": 19, "planet": 19, "him": 19, "temporari": [19, 364, 374, 379, 381], "travel": 19, "privat": [19, 360], "publicli": 19, "peopl": 19, "world": 19, "regist": 19, "registr": 19, "nanohub": 19, "overview": [20, 21, 360, 440, 441], "client": [20, 440], "submit": [20, 440], "feedstock": [20, 440], "announc": [20, 440], "openmp": [20, 439, 440], "v": [20, 34, 73, 118, 137, 138, 139, 141, 144, 149, 163, 164, 176, 177, 181, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 432, 440, 446], "dirichlet": [20, 81, 82, 197, 440], "outlet": [20, 440], "inlet": [20, 440], "partial_i": [20, 70, 181, 440], "gamma_": [20, 70, 440], "ij": [20, 70, 440], "partial_j": [20, 70, 181, 440], "imag": [20, 137, 139, 141, 142, 144, 174, 175, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438, 440], "screen": [20, 137, 139, 144, 377], "movi": [20, 440], "oh": [20, 190, 440], "anymor": [20, 440], "here": [20, 21, 38, 39, 51, 56, 80, 90, 118, 128, 130, 134, 137, 139, 162, 166, 167, 170, 171, 172, 190, 191, 223, 330, 344, 377, 394, 440, 445], "fvm": [20, 21, 440, 444], "cc": [20, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 127, 128, 130, 189, 440, 444], "vc": [20, 440, 444], "scheme": [20, 44, 45, 48, 49, 50, 58, 59, 80, 122, 123, 174, 175, 177, 181, 334, 341, 342, 345, 349, 356, 394, 440, 442, 444], "2022": [20, 440], "06": [20, 373, 440], "08": [20, 70, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 440], "01": [20, 31, 32, 33, 34, 73, 74, 77, 109, 112, 113, 114, 115, 125, 166, 167, 174, 175, 176, 181, 182, 223, 322, 364, 373, 387, 422, 425, 426, 427, 440], "02": [20, 79, 150, 161, 162, 166, 167, 174, 175, 223, 440, 446], "14": [20, 181, 182, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 432, 440, 442, 444, 446], "2019": [20, 440], "28": [20, 38, 139, 163, 164, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 373, 440, 446], "22": [20, 107, 176, 440, 446], "2016": [20, 440], "24": [20, 80, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 373, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 440, 446], "2015": [20, 440], "2013": [20, 440], "09": [20, 373, 440, 446], "2012": [20, 182, 440], "16": [20, 181, 182, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 323, 440, 444, 446], "2011": [20, 181, 440, 446], "05": [20, 71, 72, 112, 161, 174, 175, 181, 182, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 432, 440], "2008": [20, 440], "glossari": [20, 440, 441], "subpackag": [20, 447, 451], "method1": [20, 449, 450], "method2": [20, 449, 450], "doctest_raw_input": [20, 192], "serialcomm": [20, 70, 123, 125, 127, 129, 138, 222, 364, 394], "boundarycondit": [20, 21, 35, 84, 85, 189, 190, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 398, 418, 423], "nthorderboundarycondit": [20, 35, 84], "offsetsparsematrix": 20, "pysparsematrix": 20, "scipymatrix": 20, "sparsematrix": [20, 201, 330, 344], "trilinosmatrix": 20, "abstractmesh": [20, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "vtkcelldataset": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "vtkfacedataset": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "__div__": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 373], "__radd__": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 373], "__sub__": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 373], "__truediv__": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 373], "aspect2d": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "cellfaceid": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "facesback": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "facesbottom": [20, 51, 56, 81, 82, 118, 182, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "facesdown": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "facesfront": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "facesleft": [20, 35, 48, 49, 50, 53, 55, 58, 59, 60, 61, 62, 64, 65, 66, 67, 73, 74, 76, 77, 80, 81, 82, 84, 93, 94, 112, 115, 118, 156, 182, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "facesup": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "builder": [20, 230], "abstractgridbuild": 20, "grid1dbuild": [20, 230], "grid2dbuild": 20, "grid3dbuild": 20, "periodicgrid1dbuild": 20, "utilityclass": 20, "cylindricalgrid2d": [20, 58, 59, 222], "cylindricalnonuniformgrid1d": [20, 222], "__mul__": [20, 218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 330, 333, 334, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 356, 357, 364, 373], "__rmul__": [20, 218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 330, 333, 334, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 356, 357, 364, 373], "extrud": [20, 34, 157, 219, 223, 229, 231, 234, 240, 248], "cylindricaluniformgrid1d": [20, 222], "cylindricaluniformgrid2d": [20, 222], "sphericalgrid1d": [20, 222], "gmsh2din3dspac": [20, 34, 157, 191, 223], "gmshgrid2d": [20, 223], "gmshgrid3d": [20, 103, 223], "openmshfil": [20, 223], "openposfil": [20, 223], "meshadditionerror": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "__cause__": [20, 227, 253, 295, 325, 424], "__context__": [20, 227, 253, 295, 325, 424], "__delattr__": [20, 227, 253, 295, 325, 424], "__getattribute__": [20, 227, 253, 295, 325, 424], "__reduce__": [20, 227, 253, 295, 325, 424], "__setattr__": [20, 227, 253, 295, 325, 424], "__str__": [20, 227, 253, 295, 325, 364, 373, 383, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424], "with_traceback": [20, 227, 253, 295, 325, 424], "nonuniformgrid2d": [20, 219, 222, 223, 229, 234, 240, 248], "nonuniformgrid3d": [20, 222], "periodicgrid1d": [20, 89], "periodicgrid2d": 20, "periodicgrid2dleftright": [20, 234], "periodicgrid2dtopbottom": [20, 234], "periodicgrid3dfrontback": [20, 235], "periodicgrid3dleftright": [20, 235], "periodicgrid3dleftrightfrontback": [20, 235], "periodicgrid3dleftrighttopbottom": [20, 235], "periodicgrid3dtopbottom": [20, 235], "periodicgrid3dtopbottomfrontback": [20, 235], "abstractrepresent": [20, 208, 249], "gridrepresent": [20, 230, 231, 232, 248, 250, 251, 252], "meshrepresent": [20, 227, 228, 229], "physicalshap": [20, 240, 248], "sphericalnonuniformgrid1d": [20, 222], "sphericaluniformgrid1d": [20, 222], "topologi": [20, 208, 227, 228, 229, 230, 231, 232, 248, 249, 250, 251, 252, 442, 446], "abstracttopologi": [20, 208, 249], "gridtopologi": [20, 230, 231, 232, 250, 251, 252], "meshtopologi": [20, 227, 228, 229, 248], "uniformgrid1d": [20, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 251, 252, 334, 341, 342, 345, 349, 356, 357], "uniformgrid2d": [20, 222, 334, 341, 342, 345, 349, 356, 357], "defaultasymmetricsolv": [20, 46, 51, 53, 55, 56, 60, 65, 109, 163, 176, 253], "dummysolv": [20, 177, 253, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "generalsolv": [20, 84, 138, 166, 167, 253], "serialsolvererror": [20, 253], "linearcgssolv": [20, 62], "smoothedaggregationprecondition": [20, 255, 256, 259], "aggregationamgsolv": 20, "classicalamgsolv": 20, "linearcgsolv": 20, "linearfgmressolv": 20, "pyamgxsolv": 20, "smoother": [20, 263, 264, 272, 315, 318], "jacobiprecondition": [20, 277, 301, 317], "ssorprecondition": [20, 280], "pysparsematrixsolv": 20, "scipykrylovsolv": 20, "scipysolv": 20, "illconditionedpreconditionerwarn": [20, 295], "matrixillconditionedwarn": [20, 295], "maximumiterationwarn": [20, 295], "preconditionernotpositivedefinitewarn": [20, 295], "preconditionerwarn": [20, 295], "scalarquantityoutofrangewarn": [20, 295], "solverconvergencewarn": [20, 295], "stagnatedsolverwarn": [20, 295], "comm": 20, "epetracommwrapp": 20, "serialepetracommwrapp": 20, "domdecompprecondition": 20, "icprecondition": 20, "multilevelddmlprecondition": 20, "multilevelddprecondition": [20, 302, 303, 305], "multilevelnssaprecondition": 20, "multilevelsaprecondition": 20, "multilevelsgsprecondition": [20, 302, 305], "multilevelsolversmootherprecondition": 20, "trilinosaztecoosolv": 20, "trilinosmltest": 20, "trilinosnonlinearsolv": 20, "trilinossolv": 20, "stepper": 20, "l1error": [20, 321], "l2error": [20, 321], "linferror": [20, 321], "sweepmonoton": [20, 321], "pidstepp": 20, "pseudorkqsstepp": 20, "abstractbaseclasserror": [20, 325], "explicitvariableerror": [20, 325], "incorrectsolutionvari": [20, 325], "solutionvariablenumbererror": [20, 325], "solutionvariablerequirederror": [20, 325], "termmultiplyerror": [20, 325], "transienttermerror": [20, 325, 334, 341, 342, 345, 349, 356, 357], "vectorcoefferror": [20, 325, 334, 341, 342, 345, 349, 356, 357], "abstractbinaryterm": 20, "abstractconvectionterm": 20, "abstractdiffusionterm": 20, "abstractupwindconvectionterm": 20, "advectionterm": [20, 122, 123, 125, 127, 129, 138], "rhsvector": [20, 118, 321, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "__eq__": [20, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__hash__": [20, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__neg__": [20, 330, 333, 334, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 356, 357, 364, 373], "cachematrix": [20, 118, 181, 182, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "cacherhsvector": [20, 118, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "justresidualvector": [20, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "residualvectorandnorm": [20, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "asymmetricconvectionterm": 20, "binaryterm": 20, "centraldiffconvectionterm": 20, "centraldifferenceconvectionterm": [20, 181, 182, 334, 442], "coupledbinaryterm": 20, "diffusiontermcorrect": [20, 70], "explicitdiffusionterm": [20, 76, 77, 80, 162, 166, 167, 442], "explicitsourceterm": 20, "explicitupwindconvectionterm": [20, 334, 342, 345, 349, 356, 357, 442], "exponentialconvectionterm": [20, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 64, 65, 189, 442], "faceterm": 20, "firstorderadvectionterm": [20, 122, 123, 125, 127, 129, 330], "hybridconvectionterm": [20, 442], "nondiffusionterm": 20, "residualterm": 20, "sourceterm": [20, 350], "unaryterm": 20, "upwindconvectionterm": [20, 442], "testfipi": 20, "doctestplu": 20, "report_skip": [20, 360], "testmod": [20, 360], "lateimporttest": 20, "finalize_opt": [20, 362], "initialize_opt": [20, 362], "testprogram": 20, "parallelcomm": [20, 222, 223, 364, 379], "__abs__": [20, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__array_wrap__": [20, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__bool__": [20, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__float__": [20, 364, 373], "__ge__": [20, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__getitem__": [20, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__gt__": [20, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__le__": [20, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__lt__": [20, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__mod__": [20, 364, 373], "__ne__": [20, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__nonzero__": [20, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__pow__": [20, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__setitem__": [20, 364, 373], "allclos": [20, 32, 35, 38, 39, 46, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 71, 72, 74, 76, 77, 79, 80, 81, 82, 84, 85, 89, 90, 93, 94, 96, 98, 99, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 128, 129, 130, 134, 138, 149, 150, 151, 156, 162, 163, 164, 166, 167, 170, 171, 172, 176, 177, 178, 181, 189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 344, 354, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "allequ": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "arcco": [20, 364, 373], "arccosh": [20, 364, 373], "arcsin": [20, 71, 72, 364, 373], "arctan": [20, 161, 162, 174, 175, 364, 373], "arctan2": [20, 161, 162, 174, 175, 364, 373], "arctanh": [20, 364, 373], "ceil": [20, 364, 373], "conjug": [20, 81, 82, 276, 280, 364, 373, 442], "converttounit": [20, 364, 373], "co": [20, 38, 70, 71, 72, 141, 364, 373, 425, 426, 427], "cosh": [20, 112, 364, 373], "floor": [20, 364, 373], "getsctyp": [20, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "inbaseunit": [20, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "indimensionless": [20, 364, 373], "inradian": [20, 364, 373], "insiunit": [20, 364, 373], "inunitsof": [20, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "itemset": [20, 364, 373], "log10": [20, 364, 373], "numericvalu": [20, 364, 373], "sin": [20, 70, 80, 141, 190, 364, 373, 425, 426, 427, 442], "sinh": [20, 364, 373], "sqrt": [20, 35, 39, 66, 70, 71, 72, 76, 77, 80, 113, 122, 125, 127, 128, 130, 138, 149, 150, 156, 157, 166, 177, 223, 330, 344, 354, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "sum": [20, 70, 149, 150, 151, 222, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "tan": [20, 161, 162, 174, 175, 364, 373, 377], "tanh": [20, 113, 177, 364, 373], "tostr": [20, 364, 373, 377], "vital": [20, 364], "appendinfo": [20, 364, 383], "documentel": [20, 364, 383], "firstchild": [20, 364, 383], "lastchild": [20, 364, 383], "localnam": [20, 364, 383], "commwrapp": [20, 222, 364, 374, 379], "dummycomm": [20, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 234, 235, 241, 242, 250, 251, 252, 364, 374, 379], "decor": 20, "dictwithdefault": 20, "numberdict": 20, "physicalunit": [20, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__rdiv__": [20, 373], "__rtruediv__": [20, 373], "conversionfactorto": [20, 373], "conversiontupleto": [20, 373], "isangl": [20, 373], "iscompat": [20, 373], "isdimensionless": [20, 373], "isdimensionlessorangl": [20, 373], "isinverseangl": [20, 373], "setnam": [20, 373], "l1norm": [20, 377], "l2norm": [20, 377], "linfnorm": [20, 377], "getshap": [20, 377], "isclos": [20, 377], "nearest": [20, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "sqrtdot": [20, 377], "parser": [20, 138, 156, 166], "pars": [20, 138, 156, 166, 378], "sharedtempfil": 20, "prune": [20, 381], "putadd": [20, 381], "arithmeticcelltofacevari": 20, "betanoisevari": 20, "__and__": [20, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__call__": [20, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__getstate__": [20, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__new__": [20, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__or__": [20, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__setstate__": [20, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "cellvolumeaverag": [20, 38, 39, 70, 163, 164, 181, 182, 223, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "constraintmask": [20, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "gaussgrad": [20, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "harmonicfacevalu": [20, 109, 110, 111, 112, 114, 163, 164, 176, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "leastsquaresgrad": [20, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "minmodfacevalu": [20, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "rdot": [20, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "scrambl": [20, 387, 395, 399, 401, 415, 422], "std": [20, 223, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "binaryoperatorvari": [20, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "celltofacevari": 20, "constant": [20, 31, 32, 49, 55, 56, 59, 67, 80, 111, 138, 139, 144, 163, 164, 176, 190, 221, 251, 360, 373, 377, 442], "coupledcellvari": 20, "calcdistancefunct": [20, 123, 125, 127, 128, 129, 130, 138, 141, 142, 151, 394], "cellinterfacearea": [20, 149, 394], "extendvari": [20, 138, 150, 394], "exponentialnoisevari": 20, "facegradcontributionsvari": 20, "facegradvari": [20, 118], "gammanoisevari": 20, "gausscellgradvari": 20, "gaussiannoisevari": [20, 31, 32, 33, 34], "harmoniccelltofacevari": 20, "histogramvari": [20, 387, 395, 399, 401, 422], "interfaceareavari": 20, "interfaceflagvari": 20, "leastsquarescellgradvari": 20, "levelsetdiffusionvari": 20, "meshvari": [20, 190, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 432, 434, 436, 437, 438], "minmodcelltofacevari": 20, "modcellgradvari": 20, "modcelltofacevari": 20, "modfacegradvari": 20, "modphysicalfield": 20, "modularvari": [20, 166, 167, 174, 175], "facegradnomod": [20, 166, 167, 174, 175, 414], "operatorvari": 20, "scharfettergummelfacevari": 20, "surfactantconvectionvari": 20, "surfactantvari": [20, 138, 149, 150, 151], "interfacevar": [20, 134, 138, 150, 419], "unaryoperatorvari": [20, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "uniformnoisevari": 20, "dummyview": [20, 424], "plotmesh": [20, 71, 72, 141, 142, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438], "setlimit": [20, 141, 142, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438], "meshdimensionerror": [20, 424], "mayaviview": 20, "testinteract": 20, "abstractview": [20, 424, 433], "vtkcellview": [20, 434], "vtkfaceview": [20, 434], "tanh1d": 20, "explicitupwind": 20, "implicitupwind": 20, "vanleerupwind": 20, "cylindricalmesh1d": 20, "cylindricalmesh1dnonuniform": 20, "exponential1dback": 20, "exponential2d": 20, "cylindricalmesh2d": 20, "cylindricalmesh2dnonuniform": 20, "peclet": 20, "powerlaw1d": 20, "mesh20x20coupl": 20, "input4thorder_lin": 20, "inputperiod": 20, "tri2dinput": 20, "gmshinput": 20, "isotropi": 20, "modifiedmeshinput": 20, "orthoerror": 20, "mesh50x50": 20, "othermesh": 20, "cubicalproblem": 20, "grid3dinput": 20, "prism": [20, 232, 252], "mesh1ddimension": 20, "phasediffus": 20, "poisson": [20, 74, 107, 112], "interior": [20, 92, 162], "squar": [20, 44, 45, 46, 77, 81, 118, 177, 178, 223, 276, 364, 373, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "adsorbingsurfactantequ": [20, 138], "adsorpt": [20, 138, 139], "gapfilldistancevari": 20, "gapfillmesh": 20, "matplotlibsurfactantview": [20, 138], "cmap": [20, 141, 161, 174, 175, 425], "fig": [20, 141, 174, 175, 425], "mayavisurfactantview": [20, 138], "metaliondiffusionequ": [20, 138], "surfactantbulkdiffusionequ": [20, 138], "trenchmesh": 20, "expandingcircl": 20, "gmshrefin": 20, "inputgrid2d": 20, "anisotropyold": 20, "missorient": 20, "modcircl": 20, "riemann": 20, "acoust": 20, "customiz": 21, "poli": 21, "deposit": [21, 138, 139, 144], "unusu": 21, "philosophi": 21, "algorithm": [21, 118, 178, 323, 446], "deform": 21, "tractabl": 21, "li": [21, 446], "encapsul": [21, 144, 208, 299, 366, 442, 449], "tight": 21, "extend": [21, 163, 164, 394, 446], "reus": [21, 166], "overridden": [21, 362], "categori": [21, 248], "lower": [21, 163, 164, 398, 417, 418, 424], "aim": [21, 442], "tier": 21, "batteri": 21, "reassur": 21, "breakag": 21, "aid": 21, "dissemin": 21, "year": [21, 190, 191, 322], "movement": [21, 177], "matter": [21, 31, 32], "furthermor": 21, "broadli": 21, "lump": 21, "human": [21, 364, 373], "readabl": [21, 191, 364, 373, 390, 398, 414, 415, 417, 423], "provok": 21, "happen": [21, 46, 80], "real": [21, 161, 174, 175, 377], "low": [21, 442, 445], "closer": 21, "programm": 21, "awai": [21, 118, 394], "extern": 21, "acol": 21, "brow": 21, "malloc": 21, "sizeof": 21, "bcol": 21, "arow": 21, "worri": [21, 190], "needn": 21, "paramount": 21, "concern": [21, 295], "scenario": 21, "draft": 21, "hundr": 21, "recompil": 21, "relink": 21, "eventu": [21, 137, 144, 162], "imposs": 21, "rememb": [21, 401], "scientist": [21, 192, 439], "begun": 21, "unfortun": [21, 190, 378], "expertis": 21, "spent": 21, "contrast": [21, 31, 32], "tcl": 21, "java": 21, "rubi": 21, "vener": 21, "immedi": [21, 139], "someon": 21, "fledg": 21, "ground": 21, "runtim": 21, "unquestion": 21, "proport": [21, 138, 161, 174, 175, 322], "month": 21, "diagnos": 21, "critic": [21, 31, 32], "palat": 21, "prove": 21, "acknowledg": 21, "remark": [21, 443], "usabl": 21, "mathematician": 21, "scientificpython": [21, 373, 439], "easili": [21, 80, 114, 176, 439], "blitz": 21, "pyrex": [21, 439], "brief": [21, 360], "terminologi": 21, "quantiti": [21, 71, 72, 107, 110, 137, 177, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 443], "relationship": [21, 95, 177], "assign": [21, 80, 362, 364, 373, 450], "lazi": 21, "elimin": [21, 73, 80, 181], "entiti": 21, "beyond": 21, "bound": [21, 190], "vertic": [21, 71, 72, 118, 219, 222, 227, 228, 229, 231, 232, 234, 235, 240, 248, 251, 252, 377, 425, 442], "_sparsematrix": 21, "invert": 21, "fashion": 21, "footnot": [21, 163, 164], "neglect": [21, 163, 164], "byte": 21, "prefix": [22, 80, 364, 373, 379], "ld_library_path": 22, "colon": 22, "search": [22, 190, 424, 425, 434], "elf": 22, "dyld_library_path": 22, "linker": 22, "phenomenon": [31, 32, 34], "spontan": [31, 32, 177], "mixtur": [31, 32, 80], "region": [31, 32, 128, 129, 136, 138, 151, 161, 162, 166, 174, 175, 177, 178], "spin": [31, 32], "barrierless": [31, 32], "fluctuat": [31, 32, 33, 34, 161, 174, 175], "grow": [31, 32, 161, 174, 175], "exce": [31, 32], "surviv": [31, 32], "ginsberg": [31, 32, 161, 174, 175], "landau": [31, 32, 161, 174, 175], "hohenberg": [31, 32, 161, 174, 175], "halperin": [31, 32, 161, 174, 175], "epsilon": [31, 32, 33, 34, 35, 74, 107, 113, 115, 166, 167, 170, 171, 172, 174, 175, 181, 182], "possibli": [31, 32, 364, 366, 383, 424], "composit": [31, 32, 136, 163, 164], "doubl": [31, 32, 107, 176, 177], "energi": [31, 32, 35, 107, 113, 163, 164, 176, 177, 181, 182, 312, 446], "penal": [31, 32], "abrupt": [31, 32], "smooth": [31, 32, 138, 141, 142, 161, 174, 175, 311, 312, 313, 314], "transit": [31, 32, 136, 446], "weight": [31, 32, 163, 164, 166, 196, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442, 444], "augment": [31, 32, 377], "__name__": [31, 32, 33, 34, 35, 38, 39, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 74, 76, 77, 80, 81, 82, 84, 89, 93, 94, 106, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 129, 138, 156, 157, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 178, 181, 182, 189, 360, 387, 395, 399, 401, 422], "__main__": [31, 32, 33, 34, 35, 38, 39, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 74, 76, 77, 80, 81, 82, 84, 89, 93, 94, 106, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 127, 129, 138, 156, 157, 161, 162, 163, 164, 166, 167, 174, 175, 176, 177, 178, 181, 182, 189, 387, 395, 399, 401, 422], "ny": [31, 32, 33, 39, 51, 56, 60, 61, 77, 79, 81, 82, 93, 99, 103, 111, 118, 122, 125, 127, 138, 141, 142, 156, 161, 162, 166, 174, 175, 178, 182, 189, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 334, 341, 342, 344, 345, 349, 356, 357, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 426, 427, 432], "els": [31, 32, 33, 34, 35, 38, 39, 66, 77, 84, 111, 112, 118, 138, 161, 163, 164, 174, 175, 177, 181, 182, 360], "dy": [31, 32, 33, 39, 51, 56, 77, 79, 81, 82, 103, 111, 118, 122, 125, 127, 128, 130, 138, 141, 142, 156, 161, 162, 166, 174, 175, 178, 182, 190, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 334, 341, 342, 344, 345, 349, 356, 357, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 425, 426, 427, 432], "varianc": [31, 32, 33, 34, 401], "microstructur": [31, 32, 33, 34, 446], "exponenti": [31, 32, 33, 34, 137, 342, 373, 395, 445], "dexp": [31, 32, 33, 34, 35], "durat": [31, 32, 33, 34], "exp": [31, 32, 33, 34, 35, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 138, 139, 163, 164, 166, 167, 174, 175, 189, 190, 191, 395, 399, 401, 445], "elif": 31, "formul": [32, 73, 445], "trivial": [32, 330, 344], "enorm": [32, 80], "amount": [32, 240], "psi": [32, 74, 115, 161, 162, 174, 175, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "nois": [32, 161, 174, 175, 181, 387, 395, 399, 401, 415, 422], "taylor": [32, 177, 446], "expans": [32, 150, 177], "phi_": [32, 177, 330, 354, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442], "dfdphi": 32, "dfdphi_": 32, "d2fdphi2": 32, "eq1": [32, 46, 73], "eq2": [32, 46], "eq3": 32, "press": [32, 62, 67, 71, 72, 74, 80, 81, 82, 89, 112, 115, 163, 164, 177, 181, 446], "elementshap": [32, 73, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "v0": [32, 73, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "impcoeff": 32, "cube": 33, "nz": [33, 58, 59, 103, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 426, 427, 439], "dz": [33, 58, 59, 103, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 426, 427], "vesicl": 34, "youtub": 34, "watch": 34, "kdsfp67_zse": 34, "cellsiz": [34, 71, 72, 94, 138, 139, 144, 157, 223], "inner": [34, 80, 157, 223], "t1": [34, 157], "pi": [34, 38, 70, 157, 161, 162, 166, 167, 172, 174, 175, 364, 373, 394, 401, 414, 425, 426, 427], "duplicata": [34, 157], "t2": [34, 157], "t3": [34, 157], "t4": [34, 157], "t5": [34, 157], "t6": [34, 157], "t7": [34, 157], "outer": [34, 157, 163, 164, 223], "overlap": [34, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 442], "extrudefunc": [34, 157, 219, 223, 229, 231, 234, 240, 248], "lambda": [34, 157, 219, 223, 229, 231, 234, 240, 248], "mayavidaemon": [34, 426, 427], "daemon_fil": [34, 426, 427], "xmin": [34, 118, 141, 142, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438], "zmax": [34, 141, 142, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438], "asq": 35, "facevar": 35, "freeenergydoublederiv": 35, "diffterm2": 35, "diffterm4": 35, "eqch": 35, "progress": [35, 401], "builtin": [35, 38, 39, 46, 62, 70, 71, 72, 73, 76, 77, 79, 80, 81, 82, 109, 110, 111, 112, 113, 114, 118, 122, 123, 125, 134, 138, 141, 149, 150, 151, 161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 223, 354, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425, 426, 427], "maxarg": 35, "argmax": 35, "atol": [35, 38, 39, 46, 48, 49, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 71, 72, 74, 76, 77, 80, 81, 82, 85, 93, 94, 99, 103, 106, 109, 110, 111, 112, 113, 114, 115, 122, 125, 128, 163, 164, 166, 176, 177, 178, 189, 330, 344, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__future__": [38, 39], "param": [38, 39], "kmvar": [38, 39], "km": [38, 39, 364, 373], "kcvar": [38, 39], "kc": [38, 39], "tmvar": [38, 39], "tcvar": [38, 39], "tc": [38, 39], "p3var": [38, 39], "p3": [38, 39], "p2var": [38, 39], "p2": [38, 39], "rvar": [38, 39], "pn": [38, 39], "kmsccoeff": [38, 39], "chik": [38, 39], "kmspcoeff": [38, 39], "lambdak": [38, 39], "kappak": [38, 39], "kmeq": [38, 39], "tmsccoeff": [38, 39], "chit": [38, 39], "tmspcoeff": [38, 39], "lambdat": [38, 39], "zetat": [38, 39], "tmeq": [38, 39], "tcsccoeff": [38, 39], "tcspcoeff": [38, 39], "lambdatstar": [38, 39], "tceq": [38, 39], "pip2pitp": [38, 39], "kappam": [38, 39], "kappac": [38, 39], "zetapitp": [38, 39], "p3spcoeff": [38, 39], "lambda3": [38, 39], "zeta3t": [38, 39], "p3sccoeff": [38, 39], "chi3": [38, 39], "kappa3": [38, 39], "zeta3pitp": [38, 39], "zeta3": [38, 39], "p3eq": [38, 39], "p2sccoeff": [38, 39], "sccoeff": [38, 39], "chi2": [38, 39], "p2spcoeff": [38, 39], "lambda2": [38, 39], "zeta2t": [38, 39], "p2eq": [38, 39], "kcsccoeff": [38, 39], "alphakstar": [38, 39], "kcspcoeff": [38, 39], "lambdakstar": [38, 39], "kappakstar": [38, 39], "kceq": [38, 39], "pnview": [38, 39], "kmview": [38, 39], "tmview": [38, 39], "naem": [38, 39], "kmviewer": [38, 39], "stimulu": 38, "pnviewer": 39, "tmviewer": 39, "puls": [44, 45], "gre": [46, 446], "ac": [46, 439, 446], "uk": [46, 446], "physica": 46, "phy2": 46, "node173": 46, "htm": 46, "wave": [46, 73], "van": [46, 181, 446], "leer": 46, "twice": 46, "wrap": [46, 249, 414], "var2": [46, 102, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 432], "lost": 46, "annulu": [48, 49, 58, 59], "r0": [48, 49, 58, 59], "r1": [48, 49, 58, 59, 125], "nr": [48, 49, 58, 59, 222], "dr": [48, 49, 58, 59, 222], "valueleft": [48, 49, 50, 53, 55, 58, 59, 60, 61, 62, 64, 65, 76, 77, 79, 80, 89, 90, 93, 94, 96, 98, 99, 103, 189], "valueright": [48, 49, 50, 53, 55, 58, 59, 60, 61, 62, 64, 65, 77, 79, 80, 89, 90, 93, 94, 96, 98, 99, 103, 189], "impos": [48, 49, 50, 55, 58, 59, 84, 122, 149, 189, 194, 196, 197, 198, 330], "r_0": [48, 49, 58, 59, 150], "r_1": [48, 49, 58, 59], "drawback": [48, 49, 50, 58, 59, 189], "ei": [48, 49, 58, 59], "expi": [48, 49, 58, 59], "aa": [48, 49, 55, 56, 58, 59, 127, 128, 130, 330], "bb": [48, 49, 55, 56, 58, 59, 127, 128, 130], "analyticalarrai": [48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 76, 90, 93, 94, 96, 98, 99, 103, 113, 115, 177, 189], "rratio": [49, 59], "arang": [49, 59, 112, 125, 174, 175, 330, 344, 381, 387, 394, 395, 399, 401, 426, 427], "imath": 50, "u_x": [50, 55, 182, 189], "dd": [50, 51, 53, 55, 56, 60, 61, 62, 64, 65, 189], "valuebottom": [51, 56], "valuetop": [51, 56], "rtol": [51, 53, 55, 60, 61, 62, 64, 65, 66, 74, 79, 80, 84, 89, 96, 98, 106, 109, 110, 111, 112, 113, 114, 115, 134, 138, 166, 176, 177, 189, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "s_0": [55, 177, 442], "sourcecoeff": [55, 56, 166, 167], "s_c": 56, "pseudo": [58, 59], "allcloselist": 62, "str": [62, 112, 141, 142, 223, 227, 253, 295, 325, 360, 364, 369, 373, 374, 377, 378, 379, 383, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438], "1e4": 62, "arg0": 62, "arg1": [62, 449, 450], "append": [62, 192, 223, 364, 374, 378, 383], "2000": [65, 166, 189, 255, 256, 259, 263, 264, 265, 266, 267, 268, 272, 288, 289, 290, 292], "4d": 66, "precaut": 66, "convectioncoeff": [66, 109, 110, 111, 112, 114, 176, 189], "canalyt": 66, "c_": [66, 74, 107, 113, 115, 134, 138, 144, 163, 164, 176], "restol": 66, "anstol": 66, "alpha": [67, 80, 138, 144, 161, 162, 166, 167, 170, 171, 172, 174, 175, 190, 387, 399], "outflow": 67, "artifici": 67, "unitari": 67, "5000": 67, "phi0": [67, 354], "fake": 67, "circular": [70, 71, 72, 122, 149, 150, 161, 162, 166, 174, 175, 330], "pmatrix": 70, "theta": [70, 134, 137, 138, 144, 149, 150, 161, 162, 166, 167, 170, 171, 172, 174, 175, 442], "q": [70, 139, 174, 175, 178, 185, 446], "00": 70, "mass": [70, 118, 163, 164, 181], "previous": [70, 137, 139, 144, 181, 223, 394], "splitext": [70, 162, 166, 167, 170, 171, 172], "__file__": [70, 138, 162, 166, 167, 170, 171, 172], "argmin": [70, 125], "rotationmatrix": 70, "gamma_prim": 70, "001": [70, 112, 373], "cellvolum": [70, 118, 149, 150, 156, 218, 223, 241, 401], "00025": 70, "triangl": [71, 248], "edg": [71, 72, 118], "plane": [71, 72, 94, 223], "timestepdur": [71, 72, 76, 77, 79, 80, 81, 82, 122, 123, 125, 149, 150, 151, 162, 166, 167, 170, 171, 172], "mytsv": [71, 72], "tsv": [71, 72, 112, 424], "variable_grad_x": [71, 72], "variable_grad_i": [71, 72], "975559734792414": [71, 72], "0755414402612554": [71, 72], "964844363287199": [71, 72], "229687917881182": [71, 72], "00757854476106331": [71, 72], "0442864953037566": [71, 72], "79191893162384": [71, 72], "0375859836421991": [71, 72], "773936613923853": [71, 72], "205560697612547": [71, 72], "0246775505084069": [71, 72], "771959648896982": [71, 72], "020853932412869": [71, 72], "723540342405813": [71, 72], "182589694334729": [71, 72], "223345558247991": [71, 72], "807931073108895": [71, 72], "203035857140125": [71, 72], "777466238738658": [71, 72], "0401235242511506": [71, 72], "00726763301939488": [71, 72], "775978916110686": [71, 72], "00412895434496877": [71, 72], "650055516507232": [71, 72], "183112882869288": [71, 72], "0220279064527904": [71, 72], "187563765977912": [71, 72], "012771874945585": [71, 72], "35707168379437": [71, 72], "056072788439713": [71, 72], "111223320911545": [71, 72], "679586798311355": [71, 72], "0911595298310758": [71, 72], "613455176718145": [71, 72], "0256182541329463": [71, 72], "78996770899909": [71, 72], "0173672729866294": [71, 72], "693887874335319": [71, 72], "00671109050419": [71, 72], "127611490372511": [71, 72], "703545986179876": [71, 72], "435813500559859": [71, 72], "635004192597412": [71, 72], "896203033957194": [71, 72], "00855563518923689": [71, 72], "888641841567831": [71, 72], "408558914368324": [71, 72], "877939107374768": [71, 72], "32195762184087": [71, 72], "22696791637322": [71, 72], "38212257821916": [71, 72], "51732949653553": [71, 72], "292889724306196": [71, 72], "854466141879776": [71, 72], "199715815696975": [71, 72], "359068256998365": [71, 72], "757882581524374": [71, 72], "323541041763627": [71, 72], "870534227755687": [71, 72], "0792631912863636": [71, 72], "459673905457569": [71, 72], "701526587772079": [71, 72], "417577664032421": [71, 72], "725460726303266": [71, 72], "119132299176163": [71, 72], "338256179134518": [71, 72], "523565732643067": [71, 72], "254030052182524": [71, 72], "923505840608445": [71, 72], "192224240688976": [71, 72], "87498754712638": [71, 72], "174119064688993": [71, 72], "836057900916614": [71, 72], "11590500805745": [71, 72], "211010116496191": [71, 72], "484106960369249": [71, 72], "0705987421869745": [71, 72], "319827850867342": [71, 72], "867894407968447": [71, 72], "051246727010685": [71, 72], "0221203060940465": [71, 72], "216026820080053": [71, 72], "0152729438559779": [71, 72], "341246696530392": [71, 72], "0538476142281317": [71, 72], "complic": [71, 72, 144], "horizont": [71, 72, 219, 222, 231, 234, 235, 240, 248, 251, 377], "phianalyt": [71, 72, 80], "x0": [71, 72, 163, 164], "erf": [71, 72, 76, 77, 80], "ticket": [71, 72, 330, 333, 334, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 356, 357, 374], "325": [71, 72], "7e": [71, 72, 80, 122, 163, 164, 177], "equal": [71, 72, 156, 163, 164, 176, 181, 248, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 442, 444], "quadrangl": 72, "recombin": 72, "035": 72, "biharmon": 73, "v_0": 73, "v_1": 73, "cross": [73, 394], "v1": [73, 127, 128, 130, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "eq0": 73, "vi": 73, "res0": 73, "res1": 73, "1e100": 73, "uncoupl": 73, "advantag": [73, 163, 164, 176, 190, 192, 442, 449], "simultan": [73, 161, 164, 174, 175, 429], "dictat": 73, "speci": [73, 107, 109, 112, 113, 114, 115, 138, 163, 164, 176, 443], "obvious": 73, "permitt": [74, 112, 115], "c_j": [74, 107, 109, 113, 115, 176], "th": [74, 109, 115], "valenc": [74, 107, 109, 110, 111, 112, 114, 115], "z_j": [74, 107, 115], "z_": [74, 107, 115], "electron": [74, 107, 112, 115, 176], "charg": [74, 107, 112, 115, 138, 139, 144], "densiti": [74, 80, 115, 137, 138, 139, 144, 163, 164, 176, 181, 182, 223, 419, 446], "admit": [74, 115], "2x": [74, 115], "2e": [74, 76, 80, 109, 114, 115, 163, 164, 177], "next": [74, 80, 112, 115, 150, 377], "le": [74, 80, 114, 115, 125, 128, 130, 138, 167, 170, 171, 172, 174, 175, 176, 177, 178, 330, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "verifi": [74, 109, 110, 111, 113, 115, 163, 164, 181, 354], "attain": [74, 113, 115, 181], "initialvalu": 76, "epsi": 76, "triangular": [77, 94, 96, 103, 248], "gridmesh": 77, "trimesh": [77, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "othergridmesh": 77, "bigmesh": 77, "semi": [77, 80, 166, 167, 176, 177, 223], "late": [77, 362], "straight": [77, 80], "varanalyt": 77, "explicitdiffusionequ": 79, "assembl": [80, 177, 189], "uniti": [80, 444], "somefac": 80, "ever": [80, 190, 450], "differenc": [80, 334, 387, 390, 394, 395, 399, 401, 403, 415, 419, 422, 445], "phi_new": 80, "phi_old": 80, "eqx": 80, "delta": [80, 107, 113, 139, 144, 161, 163, 164, 174, 175, 177, 181, 354, 401, 442], "accomplish": 80, "tester": 80, "eqi": 80, "rerun": [80, 111], "crank": [80, 442], "nicholson": 80, "eqcn": 80, "drive": 80, "3e": [80, 112, 114, 138, 161, 162, 174, 175, 176, 181, 182], "omit": [80, 139, 177, 450], "del": [80, 141, 142, 398, 417, 418, 423], "faceconstraint": 80, "lie": [80, 432, 442], "n_i": 80, "satisfi": [80, 118, 394, 444, 445], "satisfactori": 80, "fluxright": 80, "9l": 80, "And": [80, 112, 118, 364, 373], "transfer": [80, 138, 139, 144, 446], "_p": [80, 118, 330, 344, 442], "capac": 80, "phit": 80, "phif": 80, "relev": 80, "alpha_fals": 80, "eqf": 80, "eqt": 80, "forward": 80, "told": [80, 189], "d_0": 80, "d0": 80, "exit": 80, "criteria": 80, "balanc": 80, "art": [80, 446], "pitfal": 80, "dissip": [80, 181], "stead": 80, "uniformli": 80, "vmatrix": 80, "1em": 80, "ddot": 80, "vdot": 80, "legitim": 80, "1e6": [80, 138], "myexampl": 80, "valuetopleft": [81, 82], "valuebottomright": [81, 82], "top": [81, 82, 138, 141, 142, 189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 383, 394, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438], "corner": [81, 82, 111, 118, 166, 223, 248], "facestopleft": [81, 82], "facesbottomright": [81, 82], "500": [84, 112, 161, 162], "alpha_1": 84, "alpha_2": 84, "alpha_3": 84, "alpha_4": 84, "alpha1": 84, "alpha2": 84, "alpha3": 84, "alpha4": 84, "total": [85, 107, 176, 248, 364, 373, 377], "initialarrai": [89, 122, 190], "gather": 90, "errorvar": 94, "nonorthovar": 94, "_nonorthogon": 94, "errorview": 94, "noview": 94, "rm": 95, "ravel": [102, 125], "xface": 103, "000000000000001": 103, "027": 103, "mesh2x1": 106, "paper": 107, "m_": [107, 113, 163, 164, 176, 177], "overbrac": [107, 176], "mu_j": [107, 176], "circ": [107, 113, 176], "w_j": [107, 176], "dielectr": 107, "ldot": [107, 176, 442], "d_": [107, 109, 118, 138, 144, 163, 164, 176, 330, 339, 344, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442], "substack": [107, 109, 176], "c_k": [107, 109, 176], "c_i": [107, 109, 139, 176], "c_n": [107, 176], "mu_": [107, 113], "jn": [107, 113], "w_": [107, 113], "electromigr": [107, 111, 112, 114], "electrod": [107, 113, 138], "electrolyt": [107, 113, 137, 138, 139], "barrier": [107, 109, 110, 111, 112, 113, 114, 115, 163, 164, 176, 177, 364, 379], "solvent": [107, 109, 110, 111, 112, 113, 114, 176], "unresolv": 107, "stiff": 107, "intract": 107, "jj": 109, "summat": [109, 442], "exclud": [109, 161], "ternari": [109, 110, 111, 114], "componentvari": [109, 110, 111, 112, 113, 114, 115], "standardpotenti": [109, 110, 111, 112, 113, 114, 115, 176], "__class__": [109, 110, 111, 112, 113, 114, 115], "cn": [109, 110, 111, 113, 114, 176], "c1": [109, 110, 111, 114, 176, 398, 417, 418, 423], "c2": [109, 110, 111, 114, 176], "interstiti": [109, 110, 111, 112, 113, 114, 115, 176], "regim": [109, 110, 111, 113, 134], "cj": [109, 110, 111, 112, 114, 115, 176], "cksum": [109, 110, 111, 112, 114, 176], "ckfacesum": [109, 110, 111, 112, 114], "ck": [109, 110, 111, 112, 114, 176], "3200": 109, "h82b89f7_0": 109, "ceas": 109, "ok": [109, 323], "tsupport": 110, "incomplet": [110, 308], "tit": 110, "mm": [110, 127, 128, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "mol": [110, 112, 139, 144, 163, 164, 176, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "pprime": [111, 112, 114, 163, 164, 176], "gprime": [111, 112, 114, 163, 164, 176], "counterdiffus": [111, 112, 114, 176], "phasetransform": [111, 112, 114, 176], "tol": 111, "input1dphasebinari": 112, "elphf0214": 112, "pf": 112, "rt": 112, "nav": [112, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "kb": [112, 373], "molarvolum": [112, 138, 139, 144], "80000006366754e": 112, "faradai": [112, 138, 139, 144], "nm": 112, "1200": 112, "gradientenergi": [112, 113, 114, 176], "6e": [112, 138], "h2o": 112, "cnstandardpotenti": 112, "34139": 112, "7265625": 112, "cnbarrier": 112, "6e5": 112, "cnvalenc": 112, "so4": 112, "24276": 112, "6640625": 112, "000010414586295976": 112, "cu": 112, "7231": 112, "81396484375": 112, "5553718417909": 112, "33225": 112, "9453125": 112, "110723815414": 112, "78": 112, "eps0": [112, 373], "permittivityprim": [112, 113, 114], "rich": [112, 114, 176], "000111111503177394": 112, "249944439430068": 112, "249999982581341": 112, "input1d": 112, "setscal": 112, "enthalpi": [112, 113, 114, 163, 164, 176, 177], "mxi": [112, 113, 114, 190], "dmxidxi": [112, 113, 114], "s1": [112, 113, 114, 163, 164, 176, 177, 190], "s0": [112, 113, 114, 163, 164, 176, 177, 190], "phaseview": [112, 162, 166, 167], "concview": 112, "ylog": 112, "potentialview": 112, "residualview": 112, "maxerror": 112, "safeti": [112, 323], "errcon": [112, 323], "89e": 112, "desiredtimestep": 112, "thistimestep": 112, "raw_input": [112, 192], "succeed": 112, "floatingpointerror": 112, "underflow": 112, "rearrang": [113, 190], "mu_n": [113, 176], "w_n": [113, 176], "inf": 113, "equilibr": [113, 177], "thick": [113, 177], "2w_n": 113, "makeequ": 114, "c_1": 114, "recreat": 114, "c3": 114, "reiniti": [114, 138], "c_2": 114, "c_3": 114, "malengi": 118, "bm": 118, "cage": 118, "ugent": 118, "rework": 118, "colloc": 118, "pressur": [118, 181, 446], "viscos": [118, 181, 182], "momentum": [118, 181], "ferzig": [118, 446], "peric": 118, "rossow": [118, 446], "extrapol": 118, "dolfyn": 118, "frequenc": 118, "band": [118, 442], "ident": [118, 162, 163, 164, 373, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "dl": [118, 122, 163, 164, 166, 373], "relax": [118, 177, 181, 182, 278, 280, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "pressurerelax": 118, "velocityrelax": 118, "pressurecorrect": 118, "xveloc": 118, "yveloc": 118, "decoupl": [118, 181], "xvelocityeq": 118, "yvelocityeq": 118, "guess": 118, "ast": 118, "That": 118, "a_p": [118, 442], "a_a": [118, 445], "_a": [118, 442], "v_p": [118, 347, 354, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 442], "somehow": 118, "ap": [118, 330, 339, 344, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442], "_facearea": [118, 181, 182], "_celldist": [118, 181, 182, 233, 234, 235], "pressurecorrectioneq": 118, "stagger": 118, "coloc": 118, "oscil": 118, "diamond": 118, "_l": 118, "_r": 118, "mathrm": 118, "avg": 118, "adjac": [118, 181, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422, 442], "expand": [118, 150, 163, 164], "arriv": 118, "formula": [118, 330, 344, 364, 373], "unphys": 118, "_facegradvari": 118, "contrvolum": 118, "slip": 118, "xmax": [118, 141, 142, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438], "ymin": [118, 141, 142, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438], "ymax": [118, 141, 142, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438], "underrelax": [118, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "star": 118, "xre": 118, "xmat": 118, "yre": 118, "asarrai": [118, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "takediagon": [118, 181, 182], "presgrad": 118, "facepresgrad": 118, "790867927": 118, "265072740929": 118, "150290488304": 118, "cfl": [122, 125, 138, 150, 163, 164, 181, 182], "distancetotravel": [122, 149], "adveqn": [122, 123, 125], "distancetravel": [122, 123], "1001": 122, "02e": 122, "interfaceposit": 123, "advectionequ": [123, 138, 149, 150, 151], "l_y": 125, "l_x": [125, 167], "r2": 125, "len": [125, 141, 142, 156, 218, 230, 241, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438], "logical_and": 125, "distancemov": 125, "m1": [127, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "evalcel": [127, 128, 130], "phix": [127, 128, 130], "phii": [127, 128, 130], "sqr": [127, 128, 130, 138], "v2": [127, 128, 130, 377, 394, 414], "v3": [127, 130, 377], "v4": [127, 130], "v5": 127, "trialvalu": 127, "succinctli": 129, "neg": [129, 138, 177, 364, 373, 377, 418, 442], "val": 130, "arr": [130, 364, 373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "deplet": 134, "c_t": 134, "xx": 134, "c_x": 134, "intertext": 134, "gg": 134, "cinf": 134, "ln": [134, 163, 164, 176, 181], "rateconst": [134, 138], "currenttim": 134, "totaltimestep": 134, "surfeqn": 134, "surfactantvar": [134, 138, 141, 142], "bulkeqn": 134, "bulkvar": [134, 138], "currenttimefunc": 134, "concentrationfunc": 134, "glue": 136, "fine": 136, "area": [136, 149, 181, 196, 419, 442, 444], "ceac": [137, 144], "roughli": [137, 139, 144, 181], "publish": [137, 139, 144], "27": [137, 373, 446], "rungold": 137, "displayview": [137, 139, 144], "fals": [137, 139, 141, 142, 144, 177, 318, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 364, 373, 374, 377, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 445], "realist": [137, 144, 445], "depth": [137, 138, 139, 144, 222], "metal": [137, 138, 144], "ion": [137, 138, 139, 144, 174, 175, 425], "catalyst": [137, 138, 139, 144], "c_m": [137, 138, 139, 144, 176], "b_0": [137, 138, 144], "b_1": [137, 138, 144], "buri": 137, "k_c": 137, "consumptionrateconst": 137, "slight": 137, "taper": 137, "taperangl": 137, "Their": 138, "faradaysconst": [138, 139, 144], "6e4": 138, "gasconst": [138, 139, 144, 181, 182], "314": [138, 139, 144, 163, 164, 176, 181, 182], "transfercoeffici": [138, 144], "rateconstant0": [138, 144], "rateconstant3": [138, 144], "245e": 138, "catalystdiffus": [138, 139, 144], "sitedens": [138, 139, 144], "8e": 138, "cupric": 138, "metaldiffusioncoeffici": 138, "overpotenti": [138, 139, 144], "bulkmetalconcentr": 138, "catalystconcentr": [138, 144], "catalystcoverag": [138, 144], "flat": [138, 166, 364, 373], "copper": [138, 139], "currentdensity0": [138, 144], "currentdensity1": [138, 144], "cflnumber": 138, "numberofcellsinnarrowband": 138, "cellsbelowtrench": 138, "trenchdepth": [138, 139, 144], "aspectratio": [138, 139, 144], "trenchspac": [138, 139, 144], "boundarylayerdepth": [138, 139, 144], "hydrodynam": 138, "intention": [138, 144], "po": [138, 223], "ycell": 138, "xcell": 138, "buildmetaliondiffusionequ": 138, "narrowbandwidth": 138, "distancevar": [138, 141, 142, 418, 419], "bottomheight": 138, "trenchheight": 138, "trenchwidth": 138, "sidewidth": 138, "mark": [138, 446], "influenc": 138, "catalystvar": 138, "bulkcatalystvar": 138, "metalvar": 138, "depositionratevari": 138, "omega": [138, 139, 144], "molar": [138, 139, 144, 163, 164, 176], "i_0": [138, 139, 144], "eta": [138, 139, 144, 401], "ga": [138, 139, 144, 163, 164, 176], "empir": 138, "expoconst": 138, "tmp": [138, 364, 379, 394], "exchangecurrentdens": 138, "expo": [138, 166, 167, 174, 175], "currentdens": 138, "v_": [138, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "extensionequ": 138, "spread": [138, 177], "extensionvelocityvari": 138, "k_0": [138, 144], "k_3": [138, 144], "surfactantequ": [138, 149, 150, 151], "d_m": [138, 144], "metalequ": 138, "ionvar": 138, "depositionr": 138, "metalionmolarvolum": 138, "jump": 138, "langmuir": 138, "abil": 138, "buildsurfactantbulkdiffusionequ": 138, "bulkcatalystequ": 138, "zoomfactor": [138, 141, 142], "levelsetupdatefrequ": 138, "distanceequ": 138, "whole": [138, 364, 373], "filepath": 138, "join": [138, 442], "split": 138, "savetxt": 138, "loadtxt": [138, 162, 166, 167, 170, 171, 172], "acceler": [139, 446], "runlevel": 139, "25e": 139, "suppressor": 139, "absorb": 139, "unoccupi": 139, "cover": 139, "affin": 139, "preferenti": 139, "i_j": 139, "theta_j": 139, "alpha_j": 139, "vacant": 139, "substrat": 139, "theta_": 139, "kappa": [139, 163, 164, 177, 442], "theta_l": 139, "k_l": 139, "c_l": [139, 163, 164], "theta_a": 139, "k_a": 139, "c_a": 139, "theta_v": 139, "i_l": 139, "i_": 139, "rise": 139, "k_": 139, "a0": 139, "alpha_k": 139, "b_d": 139, "b_a": 139, "v_d": 139, "b_b": 139, "symbol": [139, 144], "mbox": [139, 144], "tabular": [139, 144], "rllr": [139, 144], "multicolumn": [139, 144], "i_a": 139, "texttt": [139, 144], "i0acceler": 139, "i0level": 139, "alpha_a": 139, "alphaacceler": 139, "alpha_": 139, "alphalevel": 139, "ionconcentr": 139, "d_i": 139, "iondiffus": 139, "acceleratorcoverag": 139, "acceleratorconcentr": 139, "d_a": 139, "gamma_a": 139, "kaccelerator0": 139, "alphaadsorpt": 139, "bd": 139, "levelsetvalu": [141, 142], "kwlimit": [141, 142, 161, 174, 175, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438], "_promptforopinion": [141, 142, 425, 426, 427], "bool": [141, 142, 194, 196, 197, 198, 318, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 360, 364, 374, 377, 379, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 425], "zmin": [141, 142, 424, 426, 427, 429, 432, 433, 434, 436, 437, 438], "colormap": [141, 425], "logarithm": [141, 364, 373], "runsimpletrenchsystem": 144, "schemat": 144, "metalconcentr": 144, "metaldiffus": 144, "surfactantbefor": [149, 150], "surfactantaft": [149, 150], "initialsurfactantvalu": [149, 150], "initialradiu": [149, 150], "00813776069241": 149, "theta_0": 150, "totaltim": 150, "finalradiu": 150, "outward": 151, "initialsurfact": 151, "getcellvolum": 156, "vol": [156, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "numberofcel": [156, 162, 181, 182, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 374], "insid": [157, 223], "cool": [161, 174, 175], "melt": [161, 163, 164, 174, 175, 177], "supercool": [161, 174, 175], "circumst": [161, 174, 175, 181, 450], "pattern": [161, 174, 175], "lobkovski": [161, 162, 167, 174, 175, 446], "carter": [161, 162, 167, 174, 175, 446], "crystallin": [161, 174, 175], "regular": [161, 163, 164, 174, 175], "latent": [161, 163, 164, 174, 175, 177], "d_t": [161, 162, 174, 175], "heateq": [161, 174, 175], "tau_": [161, 162, 167, 170, 171, 172, 174, 175], "mathsf": [161, 174, 175, 177, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "kappa_1": [161, 162, 174, 175], "kappa_2": [161, 162, 174, 175], "beta": [161, 162, 166, 167, 174, 175, 177, 190, 387, 399], "015": [161, 162, 166, 167, 174, 175], "phisq": [161, 162, 174, 175], "dbetadpsi": [161, 174, 175], "ddia": [161, 174, 175], "doff": [161, 174, 175], "i0": [161, 174, 175], "i1": [161, 174, 175], "tau": [161, 162], "kappa1": [161, 162, 174, 175], "kappa2": [161, 162, 174, 175], "phaseeq": [161, 162, 163, 164, 166, 167, 170, 171, 172, 174, 175], "solidifi": [161, 162, 163, 164, 174, 175], "quench": [161, 163, 164, 174, 175, 177], "induc": [161, 163, 164, 174, 175], "granular": [161, 174, 175], "strive": [161, 174, 175, 189], "pylab": 161, "cm": [161, 163, 164, 174, 175, 177, 364, 373, 425], "hot": [161, 174, 175], "arm": [161, 174, 175], "fastest": [161, 174, 175], "steepest": [161, 174, 175], "lucid": 161, "seedcent": 162, "initialtemperatur": 162, "beta_": 162, "phi_i": [162, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "phi_x": [162, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "xi_x": 162, "xi_i": 162, "tempdiffusioncoeff": 162, "mvar": 162, "phasei": 162, "phasex": 162, "betapsi": 162, "dxi": 162, "nineti": 162, "anisotropysourc": 162, "temperatureeq": 162, "temperatureview": 162, "text_to_native_str": [162, 166, 167, 170, 171, 172], "testdata": [162, 166, 167, 170, 171, 172], "straightforward": [163, 164], "helmholtz": [163, 164, 177], "mathcal": [163, 164], "m_c": [163, 164], "f_a": [163, 164], "w_a": [163, 164], "f_b": [163, 164], "omega_": [163, 164], "omega_l": [163, 164], "calphad": [163, 164], "w_b": [163, 164], "yield": [163, 164, 181], "ideal": [163, 164], "l_a": [163, 164, 330], "t_m": [163, 164, 177], "likewis": [163, 164, 364, 373], "la": [163, 164], "2350": [163, 164, 177], "lb": [163, 164, 364, 373], "1728": [163, 164, 177], "tma": [163, 164], "tmb": [163, 164], "1358": [163, 164], "enthalpya": [163, 164], "enthalpyb": [163, 164], "nonumb": [163, 164, 176, 442], "l_b": [163, 164], "v_m": [163, 164], "mu_b": [163, 164], "mu_a": [163, 164], "vm": [163, 164], "deltaa": [163, 164], "deltab": [163, 164], "sigmaa": [163, 164], "sigmab": [163, 164], "9e": [163, 164], "betaa": [163, 164], "betab": [163, 164], "kappaa": [163, 164], "kappab": [163, 164], "wb": [163, 164, 373], "mphi": [163, 164, 176, 177], "dmphidphi": [163, 164, 176, 177], "deltachempot": [163, 164], "chempota": [163, 164], "chempotb": [163, 164], "henc": [163, 164, 177], "fick": [163, 164], "phasetransformationveloc": [163, 164], "diffusioneq": [163, 164], "deduc": [163, 164], "liquidu": [163, 164, 176], "solidu": [163, 164, 176], "cl": [163, 164, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "fraction": [163, 164, 174, 175, 278], "lever": [163, 164], "cavg": [163, 164], "algebra": [163, 164, 177, 310, 439, 446], "reveal": [163, 164], "unchang": [163, 164, 189, 364, 373], "root": [163, 164, 364, 373, 377, 387, 395, 399, 401], "luck": [163, 164, 394], "jacobian": [163, 164, 319], "equilibriumjacobian": [163, 164], "fsolv": [163, 164], "csroot": [163, 164], "clroot": [163, 164], "func": [163, 164, 369], "fprime": [163, 164], "uncondition": [163, 164], "e5": [163, 164], "asymmetr": [163, 253], "therefor": [163, 445], "phaser": 163, "diffr": 163, "stationari": [163, 164], "overal": [163, 164], "ten": [163, 164], "idea": [163, 164, 449], "neglig": [163, 164], "centi": [163, 164], "meter": [163, 164], "d_c": 164, "dc": 164, "dphi": 164, "initialr": 164, "principl": 164, "phasetransientcoeff": [166, 167], "thetasmallvalu": [166, 167, 174, 175], "1e5": [166, 167, 174, 175], "1e3": [166, 167, 174, 175], "thetatransientcoeff": [166, 167], "008": [166, 167, 174, 175], "held": [166, 167, 181, 419], "isotherm": [166, 167, 446], "randomli": 166, "0001": [166, 174, 175], "thetavalu": 166, "segment": [166, 248], "buildphaseequ": 166, "mphivar": [166, 167], "thetamag": [166, 167, 174, 175], "implicitsourc": [166, 167], "et": [166, 167, 174, 175, 181, 446], "modular": [166, 167, 174, 175, 414], "buildthetaequ": 166, "phasemod": [166, 167, 174, 175], "phasemodsq": [166, 167], "pfunc": [166, 167, 174, 175], "phasefac": [166, 167], "phasesq": [166, 167], "gradmag": [166, 167], "igamma": [166, 167, 174, 175], "thetagraddiff": [166, 167], "thetaeq": [166, 167, 174, 175], "meaning": [166, 190], "thetaprod": 166, "thetaproductview": [166, 167], "disk": [166, 390], "recal": 166, "newphas": 166, "newtheta": 166, "newthetaeq": 166, "newphaseeq": 166, "m_1": [167, 170, 171, 172], "confin": 167, "angl": [167, 364, 373], "halv": 167, "misorient": [170, 171, 172], "foral": [170, 172, 330], "t_0": [174, 175], "tau_phas": [174, 175], "tau_theta": [174, 175], "beta_theta": [174, 175], "gradmagtheta": [174, 175], "v_theta": [174, 175], "d_theta": [174, 175], "numse": [174, 175], "12345": [174, 175, 377], "cx": [174, 175], "cy": [174, 175], "orientationview": [174, 175], "room": [174, 175], "stolen": [174, 175], "make_ax": [174, 175], "ec1cd2567521c105a451ce15e06de10715f8b54d": [174, 175], "lib": [174, 175], "l838": [174, 175], "pb": [174, 175], "get_posit": [174, 175], "frozen": [174, 175], "pad": [174, 175], "x1": [174, 175], "pb1": [174, 175], "pbx": [174, 175], "pbcb": [174, 175], "splitx": [174, 175], "panchor": [174, 175], "set_posit": [174, 175], "set_anchor": [174, 175], "gnomon": [174, 175], "get_figur": [174, 175], "add_ax": [174, 175], "85": [174, 175], "polar": [174, 175], "set_thetagrid": [174, 175], "set_theta_zero_loc": [174, 175], "set_theta_direct": [174, 175], "set_rgrid": [174, 175], "radii": [174, 175], "_orientation_and_phase_to_rgb": [174, 175], "set_facecolor": [174, 175], "set_edgecolor": [174, 175], "_reshap": [174, 175], "staticmethod": [174, 175], "hsv": [174, 175], "hsv_to_rgb": [174, 175], "_data": [174, 175], "rgb": [174, 175], "hue": [174, 175], "set_data": [174, 175], "pyplot": [174, 175, 425], "figaspect": [174, 175], "figsiz": [174, 175], "timer": [174, 175], "3f": [174, 175], "fontsiz": [174, 175], "add_subplot": [174, 175], "total_tim": [174, 175], "save_interv": [174, 175], "002": [174, 175, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "save_at": [174, 175], "set_text": [174, 175], "c_0": 176, "c0": [176, 417], "circ_j": 176, "tilt": 176, "_0": 176, "f_j": 176, "sl": 176, "circ_n": 176, "cook": 176, "rhol": 176, "arrang": [176, 181, 182, 252], "d_j": 176, "l_v": 177, "0025": 177, "lv": 177, "atom": 177, "simplest": 177, "surpris": 177, "inspect": 177, "uninterest": 177, "resolut": 177, "reintroduc": 177, "exploit": [177, 439], "s_1": [177, 442], "advic": 177, "tangent": [177, 364, 373, 377], "appreci": [177, 190, 191], "focus": 177, "recast": 177, "redeclar": 177, "nickel": 177, "sigma": [177, 401], "viewer2": [177, 425], "redefin": 177, "quintic": 177, "polynomi": 177, "chose": 177, "agreement": 177, "tanhresidu": 177, "leastsq": 177, "v_fit": 177, "d_fit": 177, "msg": 177, "symmetr": [178, 253, 276, 277, 278, 279, 280, 312, 313, 314], "quadrilater": 178, "mirror": 178, "testresult": 178, "bottomright": 178, "topleft": 178, "topright": 178, "vapor": 181, "der": 181, "waal": 181, "molarweight": [181, 182], "ee": [181, 182], "455971": [181, 182], "650": [181, 182], "vbar": [181, 182], "liquiddens": [181, 182], "7354": [181, 182], "3402662299995": [181, 182], "vapordens": [181, 182], "855803327810008": [181, 182], "u_j": 181, "u_i": [181, 182], "u_iu_j": 181, "nu": 181, "nc": [181, 182], "densityprevi": [181, 182], "velocityprevi": 181, "potentialnc": [181, 182], "freeenergi": [181, 182], "u_": 181, "d_f": [181, 442, 445], "overlin": 181, "partial_": 181, "overbar": 181, "matrixdiagon": [181, 182], "correctioncoeff": [181, 182], "masseqn": [181, 182], "lh": 181, "momentumeqn": 181, "superscript": [181, 442], "potentialderiv": [181, 182], "potentialnceqn": [181, 182], "quirk": 181, "amplitud": [181, 401], "totalstep": [181, 182], "1e10": 181, "elegantli": 181, "initialresidu": [181, 182], "previousresidu": [181, 182], "5e9": 181, "velocityx": 182, "velocityi": 182, "velocityvector": 182, "velocityxprevi": 182, "velocityyprevi": 182, "matxx": 182, "matyi": 182, "matxi": 182, "matyx": 182, "momentumxeqn": 182, "momentumyeqn": 182, "totalsweep": 182, "stress": [189, 443], "slightli": [189, 394], "inconveni": [189, 190, 191], "walk": 189, "getfacesleft": 189, "getfacesright": 189, "steadyconvectiondiffusionscequ": 189, "stdyconvdiffscequ": 189, "traceback": [189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 334, 341, 342, 345, 349, 356, 357, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "convectionschem": 189, "nameerror": 189, "getcellcent": [189, 190, 191], "grid2dgistview": 189, "thrown": 189, "biggest": 189, "assembli": 189, "took": 189, "gistview": 189, "gist1dview": 189, "hesit": [189, 190, 191], "agre": [190, 191], "assur": [190, 191], "casual": [190, 191], "superced": [190, 191], "1_2": 190, "summar": [190, 191], "tip": [190, 191], "seemingli": [190, 394], "almost": [190, 442], "blindli": 190, "worth": 190, "reorient": 190, "deltax": 190, "deltai": 190, "vectorfacevari": 190, "vectorfield": 190, "hackish": 190, "_take": 190, "quietli": 190, "getexteriorfac": 190, "getcent": 190, "getarithmeticfacevalu": 190, "convolut": 190, "cellfilt": 190, "positivecel": 190, "getfac": 190, "deprecationwarn": [190, 191, 369], "indefinit": [190, 191], "breviti": 190, "feel": [190, 191], "whichev": [190, 191], "comfort": [190, 191], "clariti": 190, "trump": 190, "orthodoxi": 190, "temptat": 190, "2_1": 191, "3_0": 191, "reconsid": 191, "gmshimporter2d": 191, "gmshimporter3d": 191, "gmshimporter2din3dspac": 191, "fv": [192, 334, 341, 342, 345, 349, 356, 357, 444], "msed": 192, "mml": 192, "ubiquit": 192, "proprietari": 192, "expens": 192, "savvi": 192, "repr": [194, 195, 196, 197, 198, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 276, 277, 278, 279, 280, 285, 288, 289, 290, 291, 292, 295, 299, 300, 301, 302, 303, 304, 305, 317, 318, 319, 320, 325, 352, 366, 367, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 424], "mathtt": [197, 321, 377], "g_": 197, "odd": 198, "numberofvari": 201, "numberofequ": 201, "equationindex": 201, "varindex": 201, "_representationclass": [208, 227, 228, 229, 230, 231, 232, 248, 249, 250, 251, 252], "_abstractrepresent": [208, 249], "_topologyclass": [208, 227, 228, 229, 230, 231, 232, 248, 249, 250, 251, 252], "_abstracttopologi": [208, 249], "among": 208, "dataset": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 424], "basemesh": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "translatedmesh": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "addedmesh": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "provis": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "consolid": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "triaddedmesh": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "83333333": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "16666667": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "66666667": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "33333333": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "threedbasemesh": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "threedsecondmesh": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "threedaddedmesh": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "invalidmesh": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "match": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 377], "unsupport": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "operand": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 364, 373], "nonzero": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "attribut": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 364, 374, 379], "kwarg": [218, 219, 220, 221, 233, 234, 235, 240, 241, 242, 263, 264, 265, 266, 267, 268, 272, 276, 277, 280, 285, 320, 321, 364, 369, 383, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "indexerror": [218, 230, 241, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "dilat": [218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248], "dilatedmesh": [218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248], "mismatch": [218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "broadcast": [218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "rectangular": [219, 221, 231, 232, 234, 235, 251, 252], "radial": [221, 222], "axial": 221, "lr": 222, "count": [222, 360, 377, 378], "coorddimens": 223, "nproc": [223, 364, 374, 379], "squaredcircl": 223, "compass": 223, "label": 223, "north": 223, "west": 223, "nw": 223, "parametr": 223, "physicalcel": 223, "physicalfac": 223, "bkg": 223, "monoton": 223, "trisquar": 223, "std1": 223, "std2": 223, "ii": [223, 446], "characterist": [223, 444], "topolog": 223, "truncat": [223, 424], "vertexcoord": [227, 228, 229], "facevertexid": [227, 228, 229], "_meshrepresent": [227, 228, 229], "_meshtopologi": 227, "delattr": [227, 253, 295, 325, 424], "getattr": [227, 253, 295, 325, 424], "helper": [227, 253, 295, 325, 424], "setattr": [227, 253, 295, 325, 424], "tb": [227, 253, 295, 325, 424], "__traceback__": [227, 253, 295, 325, 424], "_mesh1dtopologi": 228, "_mesh2dtopologi": [229, 248], "_builderclass": 230, "_nonuniformgrid1dbuild": 230, "_grid1drepresent": [230, 250], "_grid1dtopologi": [230, 250], "_grid2drepresent": [231, 248, 251], "_grid2dtopologi": [231, 251], "_grid3drepresent": [232, 252], "_grid3dtopologi": [232, 252], "xz": [232, 252], "yz": [232, 252], "subcategori": [232, 252], "facecellid": [233, 234, 235], "fill": [233, 234, 235], "999": 233, "_celltocelldist": [233, 234, 235], "_cellvertexid": [233, 234, 235], "rand": 240, "skew": 240, "hereaft": 248, "calc": 250, "machineri": 253, "Not": [257, 258, 269, 285, 291, 295, 319, 320, 323, 364, 373, 414], "pcg": [259, 266, 280], "max_it": [263, 264, 265, 266, 267, 268], "block_jacobi": [263, 264, 265, 266, 267, 268], "aggreg": [263, 311, 312, 313], "amg": [263, 264], "jacobi": [263, 264, 265, 267, 268, 277, 278, 280, 282, 284, 309], "pbicgstab": 265, "alia": [266, 346], "fgmre": 267, "config_dict": 272, "variant": 276, "biconjug": [276, 301], "bicg": 276, "itsolv": [276, 277, 280], "maxiter": [279, 304], "pivot": 279, "superlu": 279, "ssor": [280, 284], "bicgstab": 288, "unsatisfactori": 295, "wignor": 295, "abort": 295, "werror": 295, "relr": 295, "linearxsolv": 295, "ameso": 304, "klu": 304, "choleski": 308, "ifpack": 308, "multilevel": [310, 311, 313, 314, 315], "nearli": 313, "gauss": [314, 401], "seidel": 314, "aztecoo": 317, "mloption": 318, "testunsupport": 318, "ml": [318, 373], "setparameterlist": 318, "printingopt": 319, "solveropt": 319, "linearsolveropt": 319, "linesearchopt": 319, "directionopt": 319, "newtonopt": 319, "_1": [321, 377], "_2": [321, 330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 377], "decreas": 321, "vardata": [322, 323], "075": 322, "pid": 322, "articl": 322, "pidpap": 322, "author": 322, "valli": 322, "carei": 322, "coutinho": 322, "strategi": 322, "incompress": [322, 446], "reaction": 322, "meth": [322, 449], "pgrow": 323, "pshrink": 323, "000189": 323, "rkq": 323, "rung": 323, "kutta": 323, "incorpor": 330, "u_p": [330, 344], "sum_a": [330, 344], "phi_a": [330, 334, 339, 341, 342, 344, 345, 349, 356, 442], "l_p": 330, "_matrixclass": [330, 344], "_buildmatrix": [330, 344], "stand": [330, 344], "harpsichord": [330, 344], "sing": [330, 344], "vel": [330, 344], "quadrat": 330, "__advectionterm": 330, "spot": 330, "123105625618": 330, "0201715476598": 330, "hash": [330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357, 364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "__nondiffusionterm": [330, 333, 334, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 356, 357], "negat": [330, 333, 334, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 356, 357], "__unaryterm": [330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 356, 357], "getrhsvector": [330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "residualfn": [330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "sovler": [330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "l2": [330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "cacheresidu": [330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "cacheerror": [330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "residualvector": [330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "errorvector": [330, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 356, 357], "simeq": [334, 339, 341, 342, 345, 347, 349, 354, 356, 442], "alpha_f": [334, 341, 342, 345, 349, 356, 442, 445], "central": [334, 445], "_abstractconvectionterm": [334, 341, 342, 345, 349, 356, 357], "vcv": [334, 341, 342, 345, 349, 356, 357], "vfv": [334, 341, 342, 345, 349, 356, 357], "__convectionterm": [334, 341, 342, 345, 349, 356, 357], "_arithmeticcelltofacevari": [334, 341, 342, 345, 349, 356, 357], "m2": [334, 341, 342, 345, 349, 356, 357], "cv2": [334, 341, 342, 345, 349, 356, 357], "vcv2": [334, 341, 342, 345, 349, 356, 357], "vfv2": [334, 341, 342, 345, 349, 356, 357], "hybrid": [345, 445], "s_p": 347, "newton": 350, "rho_": [354, 442], "phi_0": 354, "relaxationfactor": 354, "chapter": [359, 444, 447, 448, 451], "skipwarn": 360, "glob": 360, "optionflag": 360, "extraglob": 360, "raise_on_error": 360, "exclude_empti": 360, "_selectivedoctestpars": 360, "reachabl": 360, "__doc__": 360, "__test__": 360, "__dict__": 360, "slate": 360, "stuff": 360, "iff": 360, "argv": 360, "summari": 360, "dont_accept_true_for_1": 360, "dont_accept_blanklin": 360, "normalize_whitespac": 360, "ellipsi": 360, "ignore_exception_detail": 360, "report_udiff": 360, "report_cdiff": 360, "report_ndiff": 360, "report_only_first_failur": 360, "postmortem": 360, "kw": 362, "ie": 362, "foo": 362, "bunch": 362, "konrad": [364, 373], "hinsen": [364, 373], "physicalquant": [364, 373], "angular": [364, 373], "radian": [364, 373], "deg": [364, 373], "03490659": [364, 373], "05235988": [364, 373], "06981317": [364, 373], "08726646": [364, 373], "003": [364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "004": [364, 373], "005": [364, 373], "isinst": [364, 373, 377], "facilit": [364, 373], "inch": [364, 373], "round": [364, 373], "034907": [364, 373], "ft": [364, 373], "remaind": [364, 373], "hz": [364, 373], "ev": [364, 373], "8288": [364, 373], "cosin": [364, 373], "57079632679": [364, 373], "rad": [364, 373, 394], "31695789692": [364, 373], "sine": [364, 373], "arctang": [364, 373], "785398": [364, 373], "380506": [364, 373], "549306144334": [364, 373], "smallest": [364, 373], "3j": [364, 373], "ohm": [364, 373], "adjust": [364, 373, 414], "hartre": [364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "kcal": [364, 373], "1694": [364, 373], "27557621": [364, 373], "sctype": [364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "obj2sctyp": [364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "si": [364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "7088849": [364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "01085": [364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "kg": [364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "degc": [364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "degf": [364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "314159": [364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "59": [364, 373, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "302585": [364, 373], "0254": [364, 373], "opposit": [364, 373, 377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "typecod": [364, 373], "0762": [364, 373], "0508": [364, 373], "illeg": [364, 373], "expon": [364, 373, 443], "761594155956": [364, 373], "max_line_width": [364, 373, 377], "suppress_smal": [364, 373, 377], "14159": [364, 373], "buffer": [364, 379], "encod": [364, 379], "newlin": [364, 379], "suffix": [364, 379], "namedtemporaryfil": [364, 379], "tmpfile": [364, 379], "procid": [364, 374, 379], "seek": [364, 379], "mkstemp": [364, 379], "duck": [364, 374, 379], "tempfil": [364, 374, 379], "xml": [364, 383], "svnpath": [364, 383], "svn": [364, 383], "old_nam": 369, "new_nam": 369, "old_func": 369, "dirac": [373, 439], "cnr": [373, 439], "orlean": [373, 439], "fr": [373, 439], "2002": [373, 446], "codata": 373, "british": 373, "appendix": 373, "sr": 373, "da": 373, "bq": 373, "gy": 373, "lm": 373, "pa": 373, "sv": 373, "60217653e": 373, "acr": 373, "4046": 373, "8564224": 373, "amu": 373, "6605402e": 373, "ang": 373, "atm": 373, "101325": 373, "100000": 373, "bohr": 373, "291772081145378e": 373, "btui": 373, "1055": 373, "05585262": 373, "299792458": 373, "cal": 373, "cali": 373, "1868": 373, "0000000000000003e": 373, "cup": 373, "00023658825600000004": 373, "86400": 373, "017453292519943295": 373, "5555555555555556": 373, "degr": 373, "00010000000000000003": 373, "dyn": 373, "85418781762039e": 373, "erg": 373, "floz": 373, "9573532000000005e": 373, "3048": 373, "galuk": 373, "004546090000000002": 373, "galu": 373, "0037854120960000006": 373, "gn": 373, "80665": 373, "grav": 373, "6742e": 373, "3600": 373, "35974417680088e": 373, "hbar": 373, "0545716823644548e": 373, "hpel": 373, "746": 373, "hplanck": 373, "6260693e": 373, "hpuk": 373, "745": 373, "025400000000000002": 373, "invcm": 373, "9864456023253395e": 373, "3806505e": 373, "4184": 373, "kcali": 373, "4186": 373, "ken": 373, "0010000000000000002": 373, "45359237": 373, "lyr": 373, "9460730472580800": 373, "me": 373, "1093826e": 373, "mi": 373, "1609": 373, "344": 373, "0000000000000002e": 373, "mp": 373, "67262171e": 373, "mu0": 373, "2566370614359173e": 373, "0221415e": 373, "nmi": 373, "1852": 373, "oz": 373, "028349523125": 373, "6894": 373, "75729316836": 373, "pt": 373, "0004731765120000001": 373, "0009463530240000002": 373, "tbsp": 373, "4786766000000002e": 373, "ton": 373, "907": 373, "18474": 373, "torr": 373, "133": [373, 446], "32236842105263": 373, "tsp": 373, "9289220000000005e": 373, "wk": 373, "604800": 373, "yd": 373, "9144000000000001": 373, "yr": 373, "31536000": 373, "yrjul": 373, "31557600": 373, "yrsid": 373, "31558152": 373, "959999997": 373, "array_lik": [373, 377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "nine": 373, "_findunit": 373, "555556": 373, "meterpersecond": 373, "fileobject": 374, "mesh_unmangl": 374, "cpickl": 374, "decompress": 374, "improp": 374, "taxicab": 377, "manhattan": 377, "_j": 377, "euclidean": 377, "underset": 377, "logic": [377, 387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "flatten": 377, "a1": 377, "a2": 377, "_variableclass": 377, "max_mem": 377, "100000000": 377, "m0": [377, 387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "maskvalu": 377, "999999": 377, "masked_valu": 377, "mayb": 377, "3x3": 377, "fill_valu": 377, "array_output": 377, "textual": 377, "bracket": 377, "subset": [377, 444], "rightmost": 377, "estat": 377, "2345": 377, "23345": 377, "123456": 377, "charact": 377, "output_line_width": 377, "decim": 377, "float_output_precis": 377, "float_output_suppress_smal": 377, "unus": 377, "optpars": 378, "store_tru": 378, "store_fals": 378, "store_const": 378, "callback": 378, "argpars": 378, "absent": [378, 381], "fear": 379, "inexplic": 381, "additionvector": 381, "thought": [381, 444], "shim": 382, "kwd": [387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "int_0": [387, 399], "sake": [387, 395, 399, 401], "determinist": [387, 395, 399, 401], "histogram": [387, 395, 399, 401, 403, 422], "gaussian": [387, 395, 399, 401], "betadist": 387, "histoplot": [387, 395, 399, 401, 422], "stderr": [387, 395, 399], "fab": [387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "weird": [387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "truth": [387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "ambigu": [387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "nearestcellid": [387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "ncell": [387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "npoint": [387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "whose": [387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423, 450], "sliceabl": [387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "1000000000000000000": [387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "phi_1": [387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "phi_2": [387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "f2": [387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "interiorfac": [387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "opshap": [387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "operatorclass": [387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "_meshvari": [387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 434, 437, 438], "otim": [387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "461538461538": [387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "phi1": [387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "phi2": [387, 390, 394, 395, 399, 401, 403, 414, 415, 419, 422], "mpitutori": [387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "allreduc": [387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422], "assertionerror": [387, 390, 394, 395, 399, 401, 403, 415, 419, 422], "longhand": [387, 390, 394, 395, 398, 399, 401, 403, 414, 415, 417, 418, 419, 422, 423], "unpickledvar": 390, "dim": [390, 398, 414, 415, 417], "_calctrialvalu": 394, "patholog": 394, "vbl": 394, "vbr": 394, "vml": 394, "crossprod": 394, "dsq": 394, "vmr": 394, "extensionvari": 394, "extensionvar": 394, "tmp1": 394, "tmp2": 394, "9544": 394, "5456": 394, "perpendicular": 394, "30473785": 394, "49923009": 394, "35355339": 394, "45118446": 394, "97140452": 394, "76215286": 394, "33721352": 394, "trial": 394, "didn": 394, "58578644": 394, "08578644": 394, "85136395": 394, "29289322": 394, "54389939": 394, "49547948": 394, "3rd": 394, "7th": 394, "15th": 394, "chanc": 394, "circumfer": 394, "57984690073": 394, "expdist": 395, "gammadist": 399, "langl": 401, "rangl": 401, "uncorrel": 401, "k_b": 401, "sigmasqrd": 401, "kboltzmann": 401, "sampl": 403, "bin": 403, "get_se": 415, "conservativesurfactantequ": 418, "numberoffac": 418, "volumetr": 419, "mole": 419, "941": 419, "_interfacesurfactantvari": 419, "some1dvar": 424, "plt": 425, "ax1": 425, "subplot": 425, "ax2": 425, "ax3": 425, "mesh1": 425, "xvar": [425, 426, 427], "viewer1": 425, "mesh2": 425, "xyvar": [425, 426, 427], "mesh3": 425, "viewer3": 425, "orrd": 425, "kval": [425, 426, 427], "jet": 425, "1002": [426, 427], "xyzvar": [426, 427], "subview": 429, "866": 432, "stdout": 432, "var_gauss_grad_x": 432, "var_gauss_grad_i": 432, "33333333333333": 432, "wikipedia": 439, "wiki": 439, "continuous_integr": 439, "eponym": 439, "cad": 439, "javascript": 439, "appl": 439, "predecessor": 439, "ye": 439, "forum": 439, "archaic": 439, "multi": 439, "flexibl": 439, "pydata": 439, "cosc": 439, "canterburi": 439, "greg": [439, 446], "ew": 439, "slowli": 439, "3000": 439, "plone": 439, "pocoo": 439, "microsoft": 439, "polyhedr": 442, "surround": 442, "conjunction": 442, "omega_a": 442, "omega_1": 442, "omega_2": 442, "omega_3": 442, "omega_4": 442, "theorem": 442, "specificconvectionterm": 442, "estim": 442, "increasingli": 442, "gamma1": 442, "nicolson": 442, "synonym": 442, "reinforc": 442, "gamma_2": [442, 443], "gamma2": 442, "linearli": 442, "a_": 442, "b_p": 442, "rho_p": 442, "f_f": [442, 445], "biolog": 443, "inde": 443, "proven": 443, "variat": 443, "ph": 443, "lambda_i": 443, "react": [443, 446], "divers": 443, "electr": 443, "heart": 443, "tissu": 443, "schr": 443, "dinger": 443, "unknown": 443, "fickian": 443, "gamma_3": 443, "spectral": 443, "phd": [444, 446], "patankar": [444, 446], "versteeg": [444, 446], "malalasekera": [444, 446], "fem": 444, "fdm": 444, "analog": 444, "\u00e9": 445, "clet": 445, "p_f": 445, "smear": 445, "rightarrow": 445, "overcom": 445, "inaccuraci": 445, "beckermann": 446, "karma": 446, "1146": 446, "annurev": 446, "matsci": 446, "101901": 446, "155803": 446, "chen": 446, "mdoel": 446, "112001": 446, "132041": 446, "contemporari": 446, "david": 446, "jonathan": 446, "coat": 446, "biomaterialia": 446, "604": 446, "jan": 446, "actbio": 446, "019": 446, "william": 446, "nov": 446, "hangart": 446, "hamadani": 446, "xu": 446, "interdigit": 446, "thin": 446, "film": 446, "heterojunct": 446, "073514": 446, "3561487": 446, "huber": 446, "superconform": 446, "submicron": 446, "016102": 446, "2001": 446, "sethian": 446, "cambridg": 446, "1996": 446, "scott": 446, "chacon": 446, "apress": 446, "guido": 446, "rossum": 446, "tut": 446, "pilgrim": 446, "isbn": 446, "1590593561": 446, "diveintopython": 446, "ref": 446, "alexand": 446, "craig": 446, "materialia": 446, "6035": 446, "6058": 446, "2003": 446, "s1359": 446, "6454": 446, "00388": 446, "swirl": 446, "turbul": 446, "greenwich": 446, "1998": 446, "gala": 446, "eprint": 446, "6371": 446, "franci": 446, "1980": 446, "longman": 446, "technic": 446, "1995": 446, "mattiussi": 446, "309": 446, "1997": 446, "epfl": 446, "ch": 446, "jcp1997": 446, "nterfaci": 446, "1958": 446, "hermodynam": 446, "1121": 446, "1124": 446, "1959": 446, "ucleat": 446, "elder": 446, "thornton": 446, "hoyt": 446, "philosoph": 446, "magagazin": 446, "164": 446, "1080": 446, "14786435": 446, "506427": 446, "quilibrium": 446, "69": 446, "021603": 446, "arxiv": 446, "cond": 446, "mat": 446, "0308173": 446, "inet": 446, "021604": 446, "0308179": 446, "saul": 446, "teukolski": 446, "vetterl": 446, "brian": 446, "flanneri": 446, "1999": 446, "peri": 446, "\u0107": 446, "springer": 446, "blend": 446, "185": 446, "s0021": 446, "9991": 446, "00059": 446, "c302": 446, "c310": 446, "1562598": 446, "mcf": 446, "adden": 446, "7424": 446, "7439": 446, "1992": 446, "microsegreg": 446, "metallurgica": 446, "689": 446, "ward": 446, "inst": 446, "winter2004": 446, "if12": 446, "pg46": 446, "capit": 449, "resid": 449, "oop": 449, "retriev": 449, "arg2": [449, 450], "unfamiliar": 449, "reorder": 449, "trust": 449, "latter": 449, "famili": 449, "descend": 449, "myobjectderivedfrombas": [449, 450], "arg3": 450, "__": 450, "obj": 450, "somethingels": 450, "val1": 450, "val2": 450, "wherea": 450}, "objects": {"": [[23, 0, 0, "-", "examples"], [192, 0, 0, "-", "fipy"], [447, 0, 0, "-", "package"], [17, 7, 1, "cmdoption-cache", "--cache"], [22, 7, 1, "cmdoption-home", "--home"], [17, 7, 1, "cmdoption-inline", "--inline"], [17, 7, 1, "cmdoption-lsmlib", "--lsmlib"], [17, 7, 1, "cmdoption-no-cache", "--no-cache"], [17, 7, 1, "cmdoption-no-pysparse", "--no-pysparse"], [22, 7, 1, "cmdoption-prefix", "--prefix"], [17, 7, 1, "cmdoption-pyamg", "--pyamg"], [17, 7, 1, "cmdoption-pyamgx", "--pyamgx"], [17, 7, 1, "cmdoption-pysparse", "--pysparse"], [17, 7, 1, "cmdoption-scipy", "--scipy"], [17, 7, 1, "cmdoption-skfmm", "--skfmm"], [17, 7, 1, "cmdoption-trilinos", "--trilinos"], [22, 8, 1, "-", "DYLD_LIBRARY_PATH"], [17, 8, 1, "-", "FIPY_CACHE"], [17, 8, 1, "-", "FIPY_DISPLAY_MATRIX"], [17, 8, 1, "-", "FIPY_INCLUDE_NUMERIX_ALL"], [17, 8, 1, "-", "FIPY_INLINE"], [17, 8, 1, "-", "FIPY_INLINE_COMMENT"], [17, 8, 1, "-", "FIPY_LOG_CONFIG"], [17, 8, 1, "-", "FIPY_SOLVERS"], [17, 8, 1, "-", "FIPY_VERBOSE_SOLVER"], [17, 8, 1, "-", "FIPY_VIEWER"], [22, 8, 1, "-", "LD_LIBRARY_PATH"], [17, 8, 1, "-", "PETSC_OPTIONS"]], "examples": [[24, 0, 0, "-", "benchmarking"], [30, 0, 0, "-", "cahnHilliard"], [37, 0, 0, "-", "chemotaxis"], [42, 0, 0, "-", "convection"], [69, 0, 0, "-", "diffusion"], [107, 0, 0, "-", "elphf"], [117, 0, 0, "-", "flow"], [120, 0, 0, "-", "levelSet"], [154, 0, 0, "-", "meshing"], [159, 0, 0, "-", "parallel"], [160, 0, 0, "-", "phase"], [180, 0, 0, "-", "reactiveWetting"], [184, 0, 0, "-", "riemann"], [187, 0, 0, "-", "test"], [188, 0, 0, "-", "updating"]], "examples.benchmarking": [[25, 0, 0, "-", "benchmarker"], [26, 0, 0, "-", "size"], [27, 0, 0, "-", "steps"], [28, 0, 0, "-", "utils"], [29, 0, 0, "-", "versions"]], "examples.cahnHilliard": [[31, 0, 0, "-", "mesh2D"], [32, 0, 0, "-", "mesh2DCoupled"], [33, 0, 0, "-", "mesh3D"], [34, 0, 0, "-", "sphere"], [35, 0, 0, "-", "tanh1D"], [36, 0, 0, "-", "test"]], "examples.chemotaxis": [[38, 0, 0, "-", "input"], [39, 0, 0, "-", "input2D"], [40, 0, 0, "-", "parameters"], [41, 0, 0, "-", "test"]], "examples.convection": [[43, 0, 0, "-", "advection"], [47, 0, 0, "-", "exponential1D"], [52, 0, 0, "-", "exponential1DBack"], [54, 0, 0, "-", "exponential1DSource"], [57, 0, 0, "-", "exponential2D"], [62, 0, 0, "-", "peclet"], [63, 0, 0, "-", "powerLaw1D"], [66, 0, 0, "-", "robin"], [67, 0, 0, "-", "source"], [68, 0, 0, "-", "test"]], "examples.convection.advection": [[44, 0, 0, "-", "explicitUpwind"], [45, 0, 0, "-", "implicitUpwind"], [46, 0, 0, "-", "vanLeerUpwind"]], "examples.convection.exponential1D": [[48, 0, 0, "-", "cylindricalMesh1D"], [49, 0, 0, "-", "cylindricalMesh1DNonUniform"], [50, 0, 0, "-", "mesh1D"], [51, 0, 0, "-", "tri2D"]], "examples.convection.exponential1DBack": [[53, 0, 0, "-", "mesh1D"]], "examples.convection.exponential1DSource": [[55, 0, 0, "-", "mesh1D"], [56, 0, 0, "-", "tri2D"]], "examples.convection.exponential2D": [[58, 0, 0, "-", "cylindricalMesh2D"], [59, 0, 0, "-", "cylindricalMesh2DNonUniform"], [60, 0, 0, "-", "mesh2D"], [61, 0, 0, "-", "tri2D"]], "examples.convection.powerLaw1D": [[64, 0, 0, "-", "mesh1D"], [65, 0, 0, "-", "tri2D"]], "examples.diffusion": [[70, 0, 0, "-", "anisotropy"], [71, 0, 0, "-", "circle"], [72, 0, 0, "-", "circleQuad"], [73, 0, 0, "-", "coupled"], [74, 0, 0, "-", "electrostatics"], [75, 0, 0, "-", "explicit"], [80, 0, 0, "-", "mesh1D"], [81, 0, 0, "-", "mesh20x20"], [82, 0, 0, "-", "mesh20x20Coupled"], [83, 0, 0, "-", "nthOrder"], [87, 0, 0, "-", "steadyState"], [105, 0, 0, "-", "test"], [106, 0, 0, "-", "variable"]], "examples.diffusion.explicit": [[76, 0, 0, "-", "mesh1D"], [77, 0, 0, "-", "mixedelement"], [78, 0, 0, "-", "test"], [79, 0, 0, "-", "tri2D"]], "examples.diffusion.nthOrder": [[84, 0, 0, "-", "input4thOrder1D"], [85, 0, 0, "-", "input4thOrder_line"], [86, 0, 0, "-", "test"]], "examples.diffusion.steadyState": [[88, 0, 0, "-", "mesh1D"], [91, 0, 0, "-", "mesh20x20"], [97, 0, 0, "-", "mesh50x50"], [100, 0, 0, "-", "otherMeshes"], [104, 0, 0, "-", "test"]], "examples.diffusion.steadyState.mesh1D": [[89, 0, 0, "-", "inputPeriodic"], [90, 0, 0, "-", "tri2Dinput"]], "examples.diffusion.steadyState.mesh20x20": [[92, 0, 0, "-", "gmshinput"], [93, 0, 0, "-", "isotropy"], [94, 0, 0, "-", "modifiedMeshInput"], [95, 0, 0, "-", "orthoerror"], [96, 0, 0, "-", "tri2Dinput"]], "examples.diffusion.steadyState.mesh50x50": [[98, 0, 0, "-", "input"], [99, 0, 0, "-", "tri2Dinput"]], "examples.diffusion.steadyState.otherMeshes": [[101, 0, 0, "-", "cubicalProblem"], [102, 0, 0, "-", "grid3Dinput"], [103, 0, 0, "-", "prism"]], "examples.elphf": [[108, 0, 0, "-", "diffusion"], [112, 0, 0, "-", "input"], [113, 0, 0, "-", "phase"], [114, 0, 0, "-", "phaseDiffusion"], [115, 0, 0, "-", "poisson"], [116, 0, 0, "-", "test"]], "examples.elphf.diffusion": [[109, 0, 0, "-", "mesh1D"], [110, 0, 0, "-", "mesh1Ddimensional"], [111, 0, 0, "-", "mesh2D"]], "examples.flow": [[118, 0, 0, "-", "stokesCavity"], [119, 0, 0, "-", "test"]], "examples.levelSet": [[121, 0, 0, "-", "advection"], [126, 0, 0, "-", "distanceFunction"], [132, 0, 0, "-", "electroChem"], [148, 0, 0, "-", "surfactant"], [153, 0, 0, "-", "test"]], "examples.levelSet.advection": [[122, 0, 0, "-", "circle"], [123, 0, 0, "-", "mesh1D"], [124, 0, 0, "-", "test"], [125, 0, 0, "-", "trench"]], "examples.levelSet.distanceFunction": [[127, 0, 0, "-", "circle"], [128, 0, 0, "-", "interior"], [129, 0, 0, "-", "mesh1D"], [130, 0, 0, "-", "square"], [131, 0, 0, "-", "test"]], "examples.levelSet.electroChem": [[133, 0, 0, "-", "adsorbingSurfactantEquation"], [134, 0, 0, "-", "adsorption"], [135, 0, 0, "-", "gapFillDistanceVariable"], [136, 0, 0, "-", "gapFillMesh"], [137, 0, 0, "-", "gold"], [138, 0, 0, "-", "howToWriteAScript"], [139, 0, 0, "-", "leveler"], [140, 0, 0, "-", "lines"], [141, 0, 0, "-", "matplotlibSurfactantViewer"], [142, 0, 0, "-", "mayaviSurfactantViewer"], [143, 0, 0, "-", "metalIonDiffusionEquation"], [144, 0, 0, "-", "simpleTrenchSystem"], [145, 0, 0, "-", "surfactantBulkDiffusionEquation"], [146, 0, 0, "-", "test"], [147, 0, 0, "-", "trenchMesh"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer": [[141, 1, 1, "", "MatplotlibSurfactantViewer"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer": [[141, 2, 1, "", "axes"], [141, 2, 1, "", "cmap"], [141, 2, 1, "", "colorbar"], [141, 2, 1, "", "fig"], [141, 2, 1, "", "id"], [141, 2, 1, "", "log"], [141, 3, 1, "", "plot"], [141, 3, 1, "", "plotMesh"], [141, 3, 1, "", "setLimits"], [141, 2, 1, "", "title"], [141, 2, 1, "", "vars"]], "examples.levelSet.electroChem.mayaviSurfactantViewer": [[142, 1, 1, "", "MayaviSurfactantViewer"]], "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer": [[142, 3, 1, "", "plotMesh"], [142, 3, 1, "", "setLimits"], [142, 2, 1, "", "title"], [142, 2, 1, "", "vars"]], "examples.levelSet.surfactant": [[149, 0, 0, "-", "circle"], [150, 0, 0, "-", "expandingCircle"], [151, 0, 0, "-", "square"], [152, 0, 0, "-", "test"]], "examples.meshing": [[155, 0, 0, "-", "gmshRefinement"], [156, 0, 0, "-", "inputGrid2D"], [157, 0, 0, "-", "sphere"], [158, 0, 0, "-", "test"]], "examples.phase": [[161, 0, 0, "-", "anisotropy"], [162, 0, 0, "-", "anisotropyOLD"], [163, 0, 0, "-", "binary"], [164, 0, 0, "-", "binaryCoupled"], [165, 0, 0, "-", "impingement"], [169, 0, 0, "-", "missOrientation"], [174, 0, 0, "-", "polyxtal"], [175, 0, 0, "-", "polyxtalCoupled"], [176, 0, 0, "-", "quaternary"], [177, 0, 0, "-", "simple"], [178, 0, 0, "-", "symmetry"], [179, 0, 0, "-", "test"]], "examples.phase.impingement": [[166, 0, 0, "-", "mesh20x20"], [167, 0, 0, "-", "mesh40x1"], [168, 0, 0, "-", "test"]], "examples.phase.missOrientation": [[170, 0, 0, "-", "circle"], [171, 0, 0, "-", "mesh1D"], [172, 0, 0, "-", "modCircle"], [173, 0, 0, "-", "test"]], "examples.reactiveWetting": [[181, 0, 0, "-", "liquidVapor1D"], [182, 0, 0, "-", "liquidVapor2D"], [183, 0, 0, "-", "test"]], "examples.riemann": [[185, 0, 0, "-", "acoustics"], [186, 0, 0, "-", "test"]], "examples.updating": [[189, 0, 0, "-", "update0_1to1_0"], [190, 0, 0, "-", "update1_0to2_0"], [191, 0, 0, "-", "update2_0to3_0"]], "fipy": [[193, 0, 0, "-", "boundaryConditions"], [192, 4, 1, "", "doctest_raw_input"], [200, 0, 0, "-", "matrices"], [207, 0, 0, "-", "meshes"], [192, 6, 1, "", "serialComm"], [253, 0, 0, "-", "solvers"], [321, 0, 0, "-", "steppers"], [325, 0, 0, "-", "terms"], [192, 4, 1, "", "test"], [358, 0, 0, "-", "testFiPy"], [359, 0, 0, "-", "tests"], [364, 0, 0, "-", "tools"], [384, 0, 0, "-", "variables"], [424, 0, 0, "-", "viewers"]], "fipy.boundaryConditions": [[194, 0, 0, "-", "boundaryCondition"], [195, 0, 0, "-", "constraint"], [196, 0, 0, "-", "fixedFlux"], [197, 0, 0, "-", "fixedValue"], [198, 0, 0, "-", "nthOrderBoundaryCondition"], [199, 0, 0, "-", "test"]], "fipy.boundaryConditions.boundaryCondition": [[194, 1, 1, "", "BoundaryCondition"]], "fipy.boundaryConditions.boundaryCondition.BoundaryCondition": [[194, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.constraint": [[195, 1, 1, "", "Constraint"]], "fipy.boundaryConditions.constraint.Constraint": [[195, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.fixedFlux": [[196, 1, 1, "", "FixedFlux"]], "fipy.boundaryConditions.fixedFlux.FixedFlux": [[196, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.fixedValue": [[197, 1, 1, "", "FixedValue"]], "fipy.boundaryConditions.fixedValue.FixedValue": [[197, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.nthOrderBoundaryCondition": [[198, 1, 1, "", "NthOrderBoundaryCondition"]], "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition": [[198, 3, 1, "", "__repr__"]], "fipy.matrices": [[201, 0, 0, "-", "offsetSparseMatrix"], [202, 0, 0, "-", "pysparseMatrix"], [203, 0, 0, "-", "scipyMatrix"], [204, 0, 0, "-", "sparseMatrix"], [205, 0, 0, "-", "test"], [206, 0, 0, "-", "trilinosMatrix"]], "fipy.matrices.offsetSparseMatrix": [[201, 4, 1, "", "OffsetSparseMatrix"]], "fipy.meshes": [[208, 0, 0, "-", "abstractMesh"], [209, 0, 0, "-", "builders"], [216, 0, 0, "-", "cylindricalGrid1D"], [217, 0, 0, "-", "cylindricalGrid2D"], [218, 0, 0, "-", "cylindricalNonUniformGrid1D"], [219, 0, 0, "-", "cylindricalNonUniformGrid2D"], [220, 0, 0, "-", "cylindricalUniformGrid1D"], [221, 0, 0, "-", "cylindricalUniformGrid2D"], [222, 0, 0, "-", "factoryMeshes"], [223, 0, 0, "-", "gmshMesh"], [224, 0, 0, "-", "grid1D"], [225, 0, 0, "-", "grid2D"], [226, 0, 0, "-", "grid3D"], [227, 0, 0, "-", "mesh"], [228, 0, 0, "-", "mesh1D"], [229, 0, 0, "-", "mesh2D"], [230, 0, 0, "-", "nonUniformGrid1D"], [231, 0, 0, "-", "nonUniformGrid2D"], [232, 0, 0, "-", "nonUniformGrid3D"], [233, 0, 0, "-", "periodicGrid1D"], [234, 0, 0, "-", "periodicGrid2D"], [235, 0, 0, "-", "periodicGrid3D"], [236, 0, 0, "-", "representations"], [240, 0, 0, "-", "skewedGrid2D"], [241, 0, 0, "-", "sphericalNonUniformGrid1D"], [242, 0, 0, "-", "sphericalUniformGrid1D"], [243, 0, 0, "-", "test"], [244, 0, 0, "-", "topologies"], [248, 0, 0, "-", "tri2D"], [249, 0, 0, "-", "uniformGrid"], [250, 0, 0, "-", "uniformGrid1D"], [251, 0, 0, "-", "uniformGrid2D"], [252, 0, 0, "-", "uniformGrid3D"]], "fipy.meshes.abstractMesh": [[208, 1, 1, "", "AbstractMesh"]], "fipy.meshes.abstractMesh.AbstractMesh": [[208, 2, 1, "", "VTKCellDataSet"], [208, 2, 1, "", "VTKFaceDataSet"], [208, 3, 1, "", "__add__"], [208, 3, 1, "", "__div__"], [208, 3, 1, "", "__radd__"], [208, 3, 1, "", "__repr__"], [208, 3, 1, "", "__sub__"], [208, 3, 1, "", "__truediv__"], [208, 2, 1, "", "aspect2D"], [208, 2, 1, "", "cellFaceIDs"], [208, 2, 1, "", "facesBack"], [208, 2, 1, "", "facesBottom"], [208, 2, 1, "", "facesDown"], [208, 2, 1, "", "facesFront"], [208, 2, 1, "", "facesLeft"], [208, 2, 1, "", "facesRight"], [208, 2, 1, "", "facesTop"], [208, 2, 1, "", "facesUp"], [208, 2, 1, "", "x"], [208, 2, 1, "", "y"], [208, 2, 1, "", "z"]], "fipy.meshes.builders": [[210, 0, 0, "-", "abstractGridBuilder"], [211, 0, 0, "-", "grid1DBuilder"], [212, 0, 0, "-", "grid2DBuilder"], [213, 0, 0, "-", "grid3DBuilder"], [214, 0, 0, "-", "periodicGrid1DBuilder"], [215, 0, 0, "-", "utilityClasses"]], "fipy.meshes.cylindricalNonUniformGrid1D": [[218, 1, 1, "", "CylindricalNonUniformGrid1D"]], "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D": [[218, 2, 1, "", "VTKCellDataSet"], [218, 2, 1, "", "VTKFaceDataSet"], [218, 3, 1, "", "__add__"], [218, 3, 1, "", "__div__"], [218, 3, 1, "", "__mul__"], [218, 3, 1, "", "__radd__"], [218, 3, 1, "", "__repr__"], [218, 3, 1, "", "__rmul__"], [218, 3, 1, "", "__sub__"], [218, 3, 1, "", "__truediv__"], [218, 2, 1, "", "aspect2D"], [218, 2, 1, "", "cellFaceIDs"], [218, 2, 1, "", "facesBack"], [218, 2, 1, "", "facesBottom"], [218, 2, 1, "", "facesDown"], [218, 2, 1, "", "facesFront"], [218, 2, 1, "", "facesLeft"], [218, 2, 1, "", "facesRight"], [218, 2, 1, "", "facesTop"], [218, 2, 1, "", "facesUp"], [218, 2, 1, "", "x"], [218, 2, 1, "", "y"], [218, 2, 1, "", "z"]], "fipy.meshes.cylindricalNonUniformGrid2D": [[219, 1, 1, "", "CylindricalNonUniformGrid2D"]], "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D": [[219, 2, 1, "", "VTKCellDataSet"], [219, 2, 1, "", "VTKFaceDataSet"], [219, 3, 1, "", "__add__"], [219, 3, 1, "", "__div__"], [219, 3, 1, "", "__mul__"], [219, 3, 1, "", "__radd__"], [219, 3, 1, "", "__repr__"], [219, 3, 1, "", "__rmul__"], [219, 3, 1, "", "__sub__"], [219, 3, 1, "", "__truediv__"], [219, 2, 1, "", "aspect2D"], [219, 2, 1, "", "cellFaceIDs"], [219, 3, 1, "", "extrude"], [219, 2, 1, "", "facesBack"], [219, 2, 1, "", "facesBottom"], [219, 2, 1, "", "facesDown"], [219, 2, 1, "", "facesFront"], [219, 2, 1, "", "facesLeft"], [219, 2, 1, "", "facesRight"], [219, 2, 1, "", "facesTop"], [219, 2, 1, "", "facesUp"], [219, 2, 1, "", "x"], [219, 2, 1, "", "y"], [219, 2, 1, "", "z"]], "fipy.meshes.cylindricalUniformGrid1D": [[220, 1, 1, "", "CylindricalUniformGrid1D"]], "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D": [[220, 2, 1, "", "VTKCellDataSet"], [220, 2, 1, "", "VTKFaceDataSet"], [220, 3, 1, "", "__add__"], [220, 3, 1, "", "__div__"], [220, 3, 1, "", "__radd__"], [220, 3, 1, "", "__repr__"], [220, 3, 1, "", "__sub__"], [220, 3, 1, "", "__truediv__"], [220, 2, 1, "", "aspect2D"], [220, 2, 1, "", "cellFaceIDs"], [220, 2, 1, "", "exteriorFaces"], [220, 2, 1, "", "facesBack"], [220, 2, 1, "", "facesBottom"], [220, 2, 1, "", "facesDown"], [220, 2, 1, "", "facesFront"], [220, 2, 1, "", "facesLeft"], [220, 2, 1, "", "facesRight"], [220, 2, 1, "", "facesTop"], [220, 2, 1, "", "facesUp"], [220, 2, 1, "", "x"], [220, 2, 1, "", "y"], [220, 2, 1, "", "z"]], "fipy.meshes.cylindricalUniformGrid2D": [[221, 1, 1, "", "CylindricalUniformGrid2D"]], "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D": [[221, 2, 1, "", "VTKCellDataSet"], [221, 2, 1, "", "VTKFaceDataSet"], [221, 3, 1, "", "__add__"], [221, 3, 1, "", "__div__"], [221, 3, 1, "", "__radd__"], [221, 3, 1, "", "__repr__"], [221, 3, 1, "", "__sub__"], [221, 3, 1, "", "__truediv__"], [221, 2, 1, "", "aspect2D"], [221, 2, 1, "", "cellFaceIDs"], [221, 2, 1, "", "facesBack"], [221, 2, 1, "", "facesBottom"], [221, 2, 1, "", "facesDown"], [221, 2, 1, "", "facesFront"], [221, 2, 1, "", "facesLeft"], [221, 2, 1, "", "facesRight"], [221, 2, 1, "", "facesTop"], [221, 2, 1, "", "facesUp"], [221, 2, 1, "", "x"], [221, 2, 1, "", "y"], [221, 2, 1, "", "z"]], "fipy.meshes.factoryMeshes": [[222, 4, 1, "", "CylindricalGrid1D"], [222, 4, 1, "", "CylindricalGrid2D"], [222, 4, 1, "", "Grid1D"], [222, 4, 1, "", "Grid2D"], [222, 4, 1, "", "Grid3D"], [222, 4, 1, "", "SphericalGrid1D"]], "fipy.meshes.gmshMesh": [[223, 1, 1, "", "Gmsh2D"], [223, 1, 1, "", "Gmsh2DIn3DSpace"], [223, 1, 1, "", "Gmsh3D"], [223, 1, 1, "", "GmshGrid2D"], [223, 1, 1, "", "GmshGrid3D"], [223, 4, 1, "", "openMSHFile"], [223, 4, 1, "", "openPOSFile"]], "fipy.meshes.gmshMesh.Gmsh2D": [[223, 2, 1, "", "VTKCellDataSet"], [223, 2, 1, "", "VTKFaceDataSet"], [223, 3, 1, "", "__add__"], [223, 3, 1, "", "__div__"], [223, 3, 1, "", "__mul__"], [223, 3, 1, "", "__radd__"], [223, 3, 1, "", "__repr__"], [223, 3, 1, "", "__rmul__"], [223, 3, 1, "", "__sub__"], [223, 3, 1, "", "__truediv__"], [223, 2, 1, "", "aspect2D"], [223, 2, 1, "", "cellFaceIDs"], [223, 3, 1, "", "extrude"], [223, 2, 1, "", "facesBack"], [223, 2, 1, "", "facesBottom"], [223, 2, 1, "", "facesDown"], [223, 2, 1, "", "facesFront"], [223, 2, 1, "", "facesLeft"], [223, 2, 1, "", "facesRight"], [223, 2, 1, "", "facesTop"], [223, 2, 1, "", "facesUp"], [223, 2, 1, "", "x"], [223, 2, 1, "", "y"], [223, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace": [[223, 2, 1, "", "VTKCellDataSet"], [223, 2, 1, "", "VTKFaceDataSet"], [223, 3, 1, "", "__add__"], [223, 3, 1, "", "__div__"], [223, 3, 1, "", "__mul__"], [223, 3, 1, "", "__radd__"], [223, 3, 1, "", "__repr__"], [223, 3, 1, "", "__rmul__"], [223, 3, 1, "", "__sub__"], [223, 3, 1, "", "__truediv__"], [223, 2, 1, "", "aspect2D"], [223, 2, 1, "", "cellFaceIDs"], [223, 3, 1, "", "extrude"], [223, 2, 1, "", "facesBack"], [223, 2, 1, "", "facesBottom"], [223, 2, 1, "", "facesDown"], [223, 2, 1, "", "facesFront"], [223, 2, 1, "", "facesLeft"], [223, 2, 1, "", "facesRight"], [223, 2, 1, "", "facesTop"], [223, 2, 1, "", "facesUp"], [223, 2, 1, "", "x"], [223, 2, 1, "", "y"], [223, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.Gmsh3D": [[223, 2, 1, "", "VTKCellDataSet"], [223, 2, 1, "", "VTKFaceDataSet"], [223, 3, 1, "", "__add__"], [223, 3, 1, "", "__div__"], [223, 3, 1, "", "__mul__"], [223, 3, 1, "", "__radd__"], [223, 3, 1, "", "__repr__"], [223, 3, 1, "", "__rmul__"], [223, 3, 1, "", "__sub__"], [223, 3, 1, "", "__truediv__"], [223, 2, 1, "", "aspect2D"], [223, 2, 1, "", "cellFaceIDs"], [223, 2, 1, "", "facesBack"], [223, 2, 1, "", "facesBottom"], [223, 2, 1, "", "facesDown"], [223, 2, 1, "", "facesFront"], [223, 2, 1, "", "facesLeft"], [223, 2, 1, "", "facesRight"], [223, 2, 1, "", "facesTop"], [223, 2, 1, "", "facesUp"], [223, 2, 1, "", "x"], [223, 2, 1, "", "y"], [223, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.GmshGrid2D": [[223, 2, 1, "", "VTKCellDataSet"], [223, 2, 1, "", "VTKFaceDataSet"], [223, 3, 1, "", "__add__"], [223, 3, 1, "", "__div__"], [223, 3, 1, "", "__mul__"], [223, 3, 1, "", "__radd__"], [223, 3, 1, "", "__repr__"], [223, 3, 1, "", "__rmul__"], [223, 3, 1, "", "__sub__"], [223, 3, 1, "", "__truediv__"], [223, 2, 1, "", "aspect2D"], [223, 2, 1, "", "cellFaceIDs"], [223, 3, 1, "", "extrude"], [223, 2, 1, "", "facesBack"], [223, 2, 1, "", "facesBottom"], [223, 2, 1, "", "facesDown"], [223, 2, 1, "", "facesFront"], [223, 2, 1, "", "facesLeft"], [223, 2, 1, "", "facesRight"], [223, 2, 1, "", "facesTop"], [223, 2, 1, "", "facesUp"], [223, 2, 1, "", "x"], [223, 2, 1, "", "y"], [223, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.GmshGrid3D": [[223, 2, 1, "", "VTKCellDataSet"], [223, 2, 1, "", "VTKFaceDataSet"], [223, 3, 1, "", "__add__"], [223, 3, 1, "", "__div__"], [223, 3, 1, "", "__mul__"], [223, 3, 1, "", "__radd__"], [223, 3, 1, "", "__repr__"], [223, 3, 1, "", "__rmul__"], [223, 3, 1, "", "__sub__"], [223, 3, 1, "", "__truediv__"], [223, 2, 1, "", "aspect2D"], [223, 2, 1, "", "cellFaceIDs"], [223, 2, 1, "", "facesBack"], [223, 2, 1, "", "facesBottom"], [223, 2, 1, "", "facesDown"], [223, 2, 1, "", "facesFront"], [223, 2, 1, "", "facesLeft"], [223, 2, 1, "", "facesRight"], [223, 2, 1, "", "facesTop"], [223, 2, 1, "", "facesUp"], [223, 2, 1, "", "x"], [223, 2, 1, "", "y"], [223, 2, 1, "", "z"]], "fipy.meshes.mesh": [[227, 1, 1, "", "Mesh"], [227, 5, 1, "", "MeshAdditionError"]], "fipy.meshes.mesh.Mesh": [[227, 2, 1, "", "VTKCellDataSet"], [227, 2, 1, "", "VTKFaceDataSet"], [227, 3, 1, "", "__add__"], [227, 3, 1, "", "__div__"], [227, 3, 1, "", "__mul__"], [227, 3, 1, "", "__radd__"], [227, 3, 1, "", "__repr__"], [227, 3, 1, "", "__rmul__"], [227, 3, 1, "", "__sub__"], [227, 3, 1, "", "__truediv__"], [227, 2, 1, "", "aspect2D"], [227, 2, 1, "", "cellFaceIDs"], [227, 2, 1, "", "facesBack"], [227, 2, 1, "", "facesBottom"], [227, 2, 1, "", "facesDown"], [227, 2, 1, "", "facesFront"], [227, 2, 1, "", "facesLeft"], [227, 2, 1, "", "facesRight"], [227, 2, 1, "", "facesTop"], [227, 2, 1, "", "facesUp"], [227, 2, 1, "", "x"], [227, 2, 1, "", "y"], [227, 2, 1, "", "z"]], "fipy.meshes.mesh.MeshAdditionError": [[227, 6, 1, "", "__cause__"], [227, 6, 1, "", "__context__"], [227, 3, 1, "", "__delattr__"], [227, 3, 1, "", "__getattribute__"], [227, 3, 1, "", "__reduce__"], [227, 3, 1, "", "__repr__"], [227, 3, 1, "", "__setattr__"], [227, 3, 1, "", "__str__"], [227, 3, 1, "", "with_traceback"]], "fipy.meshes.mesh1D": [[228, 1, 1, "", "Mesh1D"]], "fipy.meshes.mesh1D.Mesh1D": [[228, 2, 1, "", "VTKCellDataSet"], [228, 2, 1, "", "VTKFaceDataSet"], [228, 3, 1, "", "__add__"], [228, 3, 1, "", "__div__"], [228, 3, 1, "", "__mul__"], [228, 3, 1, "", "__radd__"], [228, 3, 1, "", "__repr__"], [228, 3, 1, "", "__rmul__"], [228, 3, 1, "", "__sub__"], [228, 3, 1, "", "__truediv__"], [228, 2, 1, "", "aspect2D"], [228, 2, 1, "", "cellFaceIDs"], [228, 2, 1, "", "facesBack"], [228, 2, 1, "", "facesBottom"], [228, 2, 1, "", "facesDown"], [228, 2, 1, "", "facesFront"], [228, 2, 1, "", "facesLeft"], [228, 2, 1, "", "facesRight"], [228, 2, 1, "", "facesTop"], [228, 2, 1, "", "facesUp"], [228, 2, 1, "", "x"], [228, 2, 1, "", "y"], [228, 2, 1, "", "z"]], "fipy.meshes.mesh2D": [[229, 1, 1, "", "Mesh2D"]], "fipy.meshes.mesh2D.Mesh2D": [[229, 2, 1, "", "VTKCellDataSet"], [229, 2, 1, "", "VTKFaceDataSet"], [229, 3, 1, "", "__add__"], [229, 3, 1, "", "__div__"], [229, 3, 1, "", "__mul__"], [229, 3, 1, "", "__radd__"], [229, 3, 1, "", "__repr__"], [229, 3, 1, "", "__rmul__"], [229, 3, 1, "", "__sub__"], [229, 3, 1, "", "__truediv__"], [229, 2, 1, "", "aspect2D"], [229, 2, 1, "", "cellFaceIDs"], [229, 3, 1, "", "extrude"], [229, 2, 1, "", "facesBack"], [229, 2, 1, "", "facesBottom"], [229, 2, 1, "", "facesDown"], [229, 2, 1, "", "facesFront"], [229, 2, 1, "", "facesLeft"], [229, 2, 1, "", "facesRight"], [229, 2, 1, "", "facesTop"], [229, 2, 1, "", "facesUp"], [229, 2, 1, "", "x"], [229, 2, 1, "", "y"], [229, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid1D": [[230, 1, 1, "", "NonUniformGrid1D"]], "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D": [[230, 2, 1, "", "VTKCellDataSet"], [230, 2, 1, "", "VTKFaceDataSet"], [230, 3, 1, "", "__add__"], [230, 3, 1, "", "__div__"], [230, 3, 1, "", "__mul__"], [230, 3, 1, "", "__radd__"], [230, 3, 1, "", "__repr__"], [230, 3, 1, "", "__rmul__"], [230, 3, 1, "", "__sub__"], [230, 3, 1, "", "__truediv__"], [230, 2, 1, "", "aspect2D"], [230, 2, 1, "", "cellFaceIDs"], [230, 2, 1, "", "facesBack"], [230, 2, 1, "", "facesBottom"], [230, 2, 1, "", "facesDown"], [230, 2, 1, "", "facesFront"], [230, 2, 1, "", "facesLeft"], [230, 2, 1, "", "facesRight"], [230, 2, 1, "", "facesTop"], [230, 2, 1, "", "facesUp"], [230, 2, 1, "", "x"], [230, 2, 1, "", "y"], [230, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid2D": [[231, 1, 1, "", "NonUniformGrid2D"]], "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D": [[231, 2, 1, "", "VTKCellDataSet"], [231, 2, 1, "", "VTKFaceDataSet"], [231, 3, 1, "", "__add__"], [231, 3, 1, "", "__div__"], [231, 3, 1, "", "__mul__"], [231, 3, 1, "", "__radd__"], [231, 3, 1, "", "__repr__"], [231, 3, 1, "", "__rmul__"], [231, 3, 1, "", "__sub__"], [231, 3, 1, "", "__truediv__"], [231, 2, 1, "", "aspect2D"], [231, 2, 1, "", "cellFaceIDs"], [231, 3, 1, "", "extrude"], [231, 2, 1, "", "facesBack"], [231, 2, 1, "", "facesBottom"], [231, 2, 1, "", "facesDown"], [231, 2, 1, "", "facesFront"], [231, 2, 1, "", "facesLeft"], [231, 2, 1, "", "facesRight"], [231, 2, 1, "", "facesTop"], [231, 2, 1, "", "facesUp"], [231, 2, 1, "", "x"], [231, 2, 1, "", "y"], [231, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid3D": [[232, 1, 1, "", "NonUniformGrid3D"]], "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D": [[232, 2, 1, "", "VTKCellDataSet"], [232, 2, 1, "", "VTKFaceDataSet"], [232, 3, 1, "", "__add__"], [232, 3, 1, "", "__div__"], [232, 3, 1, "", "__mul__"], [232, 3, 1, "", "__radd__"], [232, 3, 1, "", "__repr__"], [232, 3, 1, "", "__rmul__"], [232, 3, 1, "", "__sub__"], [232, 3, 1, "", "__truediv__"], [232, 2, 1, "", "aspect2D"], [232, 2, 1, "", "cellFaceIDs"], [232, 2, 1, "", "facesBack"], [232, 2, 1, "", "facesBottom"], [232, 2, 1, "", "facesDown"], [232, 2, 1, "", "facesFront"], [232, 2, 1, "", "facesLeft"], [232, 2, 1, "", "facesRight"], [232, 2, 1, "", "facesTop"], [232, 2, 1, "", "facesUp"], [232, 2, 1, "", "x"], [232, 2, 1, "", "y"], [232, 2, 1, "", "z"]], "fipy.meshes.periodicGrid1D": [[233, 1, 1, "", "PeriodicGrid1D"]], "fipy.meshes.periodicGrid1D.PeriodicGrid1D": [[233, 2, 1, "", "VTKCellDataSet"], [233, 2, 1, "", "VTKFaceDataSet"], [233, 3, 1, "", "__add__"], [233, 3, 1, "", "__div__"], [233, 3, 1, "", "__mul__"], [233, 3, 1, "", "__radd__"], [233, 3, 1, "", "__repr__"], [233, 3, 1, "", "__rmul__"], [233, 3, 1, "", "__sub__"], [233, 3, 1, "", "__truediv__"], [233, 2, 1, "", "aspect2D"], [233, 2, 1, "", "cellCenters"], [233, 2, 1, "", "cellFaceIDs"], [233, 2, 1, "", "facesBack"], [233, 2, 1, "", "facesBottom"], [233, 2, 1, "", "facesDown"], [233, 2, 1, "", "facesFront"], [233, 2, 1, "", "facesLeft"], [233, 2, 1, "", "facesRight"], [233, 2, 1, "", "facesTop"], [233, 2, 1, "", "facesUp"], [233, 2, 1, "", "x"], [233, 2, 1, "", "y"], [233, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D": [[234, 1, 1, "", "PeriodicGrid2D"], [234, 1, 1, "", "PeriodicGrid2DLeftRight"], [234, 1, 1, "", "PeriodicGrid2DTopBottom"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2D": [[234, 2, 1, "", "VTKCellDataSet"], [234, 2, 1, "", "VTKFaceDataSet"], [234, 3, 1, "", "__add__"], [234, 3, 1, "", "__div__"], [234, 3, 1, "", "__mul__"], [234, 3, 1, "", "__radd__"], [234, 3, 1, "", "__repr__"], [234, 3, 1, "", "__rmul__"], [234, 3, 1, "", "__sub__"], [234, 3, 1, "", "__truediv__"], [234, 2, 1, "", "aspect2D"], [234, 2, 1, "", "cellFaceIDs"], [234, 3, 1, "", "extrude"], [234, 2, 1, "", "facesBack"], [234, 2, 1, "", "facesBottom"], [234, 2, 1, "", "facesDown"], [234, 2, 1, "", "facesFront"], [234, 2, 1, "", "facesLeft"], [234, 2, 1, "", "facesRight"], [234, 2, 1, "", "facesTop"], [234, 2, 1, "", "facesUp"], [234, 2, 1, "", "x"], [234, 2, 1, "", "y"], [234, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight": [[234, 2, 1, "", "VTKCellDataSet"], [234, 2, 1, "", "VTKFaceDataSet"], [234, 3, 1, "", "__add__"], [234, 3, 1, "", "__div__"], [234, 3, 1, "", "__mul__"], [234, 3, 1, "", "__radd__"], [234, 3, 1, "", "__repr__"], [234, 3, 1, "", "__rmul__"], [234, 3, 1, "", "__sub__"], [234, 3, 1, "", "__truediv__"], [234, 2, 1, "", "aspect2D"], [234, 2, 1, "", "cellFaceIDs"], [234, 3, 1, "", "extrude"], [234, 2, 1, "", "facesBack"], [234, 2, 1, "", "facesBottom"], [234, 2, 1, "", "facesDown"], [234, 2, 1, "", "facesFront"], [234, 2, 1, "", "facesLeft"], [234, 2, 1, "", "facesRight"], [234, 2, 1, "", "facesTop"], [234, 2, 1, "", "facesUp"], [234, 2, 1, "", "x"], [234, 2, 1, "", "y"], [234, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom": [[234, 2, 1, "", "VTKCellDataSet"], [234, 2, 1, "", "VTKFaceDataSet"], [234, 3, 1, "", "__add__"], [234, 3, 1, "", "__div__"], [234, 3, 1, "", "__mul__"], [234, 3, 1, "", "__radd__"], [234, 3, 1, "", "__repr__"], [234, 3, 1, "", "__rmul__"], [234, 3, 1, "", "__sub__"], [234, 3, 1, "", "__truediv__"], [234, 2, 1, "", "aspect2D"], [234, 2, 1, "", "cellFaceIDs"], [234, 3, 1, "", "extrude"], [234, 2, 1, "", "facesBack"], [234, 2, 1, "", "facesBottom"], [234, 2, 1, "", "facesDown"], [234, 2, 1, "", "facesFront"], [234, 2, 1, "", "facesLeft"], [234, 2, 1, "", "facesRight"], [234, 2, 1, "", "facesTop"], [234, 2, 1, "", "facesUp"], [234, 2, 1, "", "x"], [234, 2, 1, "", "y"], [234, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D": [[235, 1, 1, "", "PeriodicGrid3D"], [235, 1, 1, "", "PeriodicGrid3DFrontBack"], [235, 1, 1, "", "PeriodicGrid3DLeftRight"], [235, 1, 1, "", "PeriodicGrid3DLeftRightFrontBack"], [235, 1, 1, "", "PeriodicGrid3DLeftRightTopBottom"], [235, 1, 1, "", "PeriodicGrid3DTopBottom"], [235, 1, 1, "", "PeriodicGrid3DTopBottomFrontBack"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3D": [[235, 2, 1, "", "VTKCellDataSet"], [235, 2, 1, "", "VTKFaceDataSet"], [235, 3, 1, "", "__add__"], [235, 3, 1, "", "__div__"], [235, 3, 1, "", "__mul__"], [235, 3, 1, "", "__radd__"], [235, 3, 1, "", "__repr__"], [235, 3, 1, "", "__rmul__"], [235, 3, 1, "", "__sub__"], [235, 3, 1, "", "__truediv__"], [235, 2, 1, "", "aspect2D"], [235, 2, 1, "", "cellFaceIDs"], [235, 2, 1, "", "facesBack"], [235, 2, 1, "", "facesBottom"], [235, 2, 1, "", "facesDown"], [235, 2, 1, "", "facesFront"], [235, 2, 1, "", "facesLeft"], [235, 2, 1, "", "facesRight"], [235, 2, 1, "", "facesTop"], [235, 2, 1, "", "facesUp"], [235, 2, 1, "", "x"], [235, 2, 1, "", "y"], [235, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack": [[235, 2, 1, "", "VTKCellDataSet"], [235, 2, 1, "", "VTKFaceDataSet"], [235, 3, 1, "", "__add__"], [235, 3, 1, "", "__div__"], [235, 3, 1, "", "__mul__"], [235, 3, 1, "", "__radd__"], [235, 3, 1, "", "__repr__"], [235, 3, 1, "", "__rmul__"], [235, 3, 1, "", "__sub__"], [235, 3, 1, "", "__truediv__"], [235, 2, 1, "", "aspect2D"], [235, 2, 1, "", "cellFaceIDs"], [235, 2, 1, "", "facesBack"], [235, 2, 1, "", "facesBottom"], [235, 2, 1, "", "facesDown"], [235, 2, 1, "", "facesFront"], [235, 2, 1, "", "facesLeft"], [235, 2, 1, "", "facesRight"], [235, 2, 1, "", "facesTop"], [235, 2, 1, "", "facesUp"], [235, 2, 1, "", "x"], [235, 2, 1, "", "y"], [235, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight": [[235, 2, 1, "", "VTKCellDataSet"], [235, 2, 1, "", "VTKFaceDataSet"], [235, 3, 1, "", "__add__"], [235, 3, 1, "", "__div__"], [235, 3, 1, "", "__mul__"], [235, 3, 1, "", "__radd__"], [235, 3, 1, "", "__repr__"], [235, 3, 1, "", "__rmul__"], [235, 3, 1, "", "__sub__"], [235, 3, 1, "", "__truediv__"], [235, 2, 1, "", "aspect2D"], [235, 2, 1, "", "cellFaceIDs"], [235, 2, 1, "", "facesBack"], [235, 2, 1, "", "facesBottom"], [235, 2, 1, "", "facesDown"], [235, 2, 1, "", "facesFront"], [235, 2, 1, "", "facesLeft"], [235, 2, 1, "", "facesRight"], [235, 2, 1, "", "facesTop"], [235, 2, 1, "", "facesUp"], [235, 2, 1, "", "x"], [235, 2, 1, "", "y"], [235, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack": [[235, 2, 1, "", "VTKCellDataSet"], [235, 2, 1, "", "VTKFaceDataSet"], [235, 3, 1, "", "__add__"], [235, 3, 1, "", "__div__"], [235, 3, 1, "", "__mul__"], [235, 3, 1, "", "__radd__"], [235, 3, 1, "", "__repr__"], [235, 3, 1, "", "__rmul__"], [235, 3, 1, "", "__sub__"], [235, 3, 1, "", "__truediv__"], [235, 2, 1, "", "aspect2D"], [235, 2, 1, "", "cellFaceIDs"], [235, 2, 1, "", "facesBack"], [235, 2, 1, "", "facesBottom"], [235, 2, 1, "", "facesDown"], [235, 2, 1, "", "facesFront"], [235, 2, 1, "", "facesLeft"], [235, 2, 1, "", "facesRight"], [235, 2, 1, "", "facesTop"], [235, 2, 1, "", "facesUp"], [235, 2, 1, "", "x"], [235, 2, 1, "", "y"], [235, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom": [[235, 2, 1, "", "VTKCellDataSet"], [235, 2, 1, "", "VTKFaceDataSet"], [235, 3, 1, "", "__add__"], [235, 3, 1, "", "__div__"], [235, 3, 1, "", "__mul__"], [235, 3, 1, "", "__radd__"], [235, 3, 1, "", "__repr__"], [235, 3, 1, "", "__rmul__"], [235, 3, 1, "", "__sub__"], [235, 3, 1, "", "__truediv__"], [235, 2, 1, "", "aspect2D"], [235, 2, 1, "", "cellFaceIDs"], [235, 2, 1, "", "facesBack"], [235, 2, 1, "", "facesBottom"], [235, 2, 1, "", "facesDown"], [235, 2, 1, "", "facesFront"], [235, 2, 1, "", "facesLeft"], [235, 2, 1, "", "facesRight"], [235, 2, 1, "", "facesTop"], [235, 2, 1, "", "facesUp"], [235, 2, 1, "", "x"], [235, 2, 1, "", "y"], [235, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom": [[235, 2, 1, "", "VTKCellDataSet"], [235, 2, 1, "", "VTKFaceDataSet"], [235, 3, 1, "", "__add__"], [235, 3, 1, "", "__div__"], [235, 3, 1, "", "__mul__"], [235, 3, 1, "", "__radd__"], [235, 3, 1, "", "__repr__"], [235, 3, 1, "", "__rmul__"], [235, 3, 1, "", "__sub__"], [235, 3, 1, "", "__truediv__"], [235, 2, 1, "", "aspect2D"], [235, 2, 1, "", "cellFaceIDs"], [235, 2, 1, "", "facesBack"], [235, 2, 1, "", "facesBottom"], [235, 2, 1, "", "facesDown"], [235, 2, 1, "", "facesFront"], [235, 2, 1, "", "facesLeft"], [235, 2, 1, "", "facesRight"], [235, 2, 1, "", "facesTop"], [235, 2, 1, "", "facesUp"], [235, 2, 1, "", "x"], [235, 2, 1, "", "y"], [235, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack": [[235, 2, 1, "", "VTKCellDataSet"], [235, 2, 1, "", "VTKFaceDataSet"], [235, 3, 1, "", "__add__"], [235, 3, 1, "", "__div__"], [235, 3, 1, "", "__mul__"], [235, 3, 1, "", "__radd__"], [235, 3, 1, "", "__repr__"], [235, 3, 1, "", "__rmul__"], [235, 3, 1, "", "__sub__"], [235, 3, 1, "", "__truediv__"], [235, 2, 1, "", "aspect2D"], [235, 2, 1, "", "cellFaceIDs"], [235, 2, 1, "", "facesBack"], [235, 2, 1, "", "facesBottom"], [235, 2, 1, "", "facesDown"], [235, 2, 1, "", "facesFront"], [235, 2, 1, "", "facesLeft"], [235, 2, 1, "", "facesRight"], [235, 2, 1, "", "facesTop"], [235, 2, 1, "", "facesUp"], [235, 2, 1, "", "x"], [235, 2, 1, "", "y"], [235, 2, 1, "", "z"]], "fipy.meshes.representations": [[237, 0, 0, "-", "abstractRepresentation"], [238, 0, 0, "-", "gridRepresentation"], [239, 0, 0, "-", "meshRepresentation"]], "fipy.meshes.skewedGrid2D": [[240, 1, 1, "", "SkewedGrid2D"]], "fipy.meshes.skewedGrid2D.SkewedGrid2D": [[240, 2, 1, "", "VTKCellDataSet"], [240, 2, 1, "", "VTKFaceDataSet"], [240, 3, 1, "", "__add__"], [240, 3, 1, "", "__div__"], [240, 3, 1, "", "__mul__"], [240, 3, 1, "", "__radd__"], [240, 3, 1, "", "__repr__"], [240, 3, 1, "", "__rmul__"], [240, 3, 1, "", "__sub__"], [240, 3, 1, "", "__truediv__"], [240, 2, 1, "", "aspect2D"], [240, 2, 1, "", "cellFaceIDs"], [240, 3, 1, "", "extrude"], [240, 2, 1, "", "facesBack"], [240, 2, 1, "", "facesBottom"], [240, 2, 1, "", "facesDown"], [240, 2, 1, "", "facesFront"], [240, 2, 1, "", "facesLeft"], [240, 2, 1, "", "facesRight"], [240, 2, 1, "", "facesTop"], [240, 2, 1, "", "facesUp"], [240, 2, 1, "", "physicalShape"], [240, 2, 1, "", "x"], [240, 2, 1, "", "y"], [240, 2, 1, "", "z"]], "fipy.meshes.sphericalNonUniformGrid1D": [[241, 1, 1, "", "SphericalNonUniformGrid1D"]], "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D": [[241, 2, 1, "", "VTKCellDataSet"], [241, 2, 1, "", "VTKFaceDataSet"], [241, 3, 1, "", "__add__"], [241, 3, 1, "", "__div__"], [241, 3, 1, "", "__mul__"], [241, 3, 1, "", "__radd__"], [241, 3, 1, "", "__repr__"], [241, 3, 1, "", "__rmul__"], [241, 3, 1, "", "__sub__"], [241, 3, 1, "", "__truediv__"], [241, 2, 1, "", "aspect2D"], [241, 2, 1, "", "cellFaceIDs"], [241, 2, 1, "", "facesBack"], [241, 2, 1, "", "facesBottom"], [241, 2, 1, "", "facesDown"], [241, 2, 1, "", "facesFront"], [241, 2, 1, "", "facesLeft"], [241, 2, 1, "", "facesRight"], [241, 2, 1, "", "facesTop"], [241, 2, 1, "", "facesUp"], [241, 2, 1, "", "x"], [241, 2, 1, "", "y"], [241, 2, 1, "", "z"]], "fipy.meshes.sphericalUniformGrid1D": [[242, 1, 1, "", "SphericalUniformGrid1D"]], "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D": [[242, 2, 1, "", "VTKCellDataSet"], [242, 2, 1, "", "VTKFaceDataSet"], [242, 3, 1, "", "__add__"], [242, 3, 1, "", "__div__"], [242, 3, 1, "", "__radd__"], [242, 3, 1, "", "__repr__"], [242, 3, 1, "", "__sub__"], [242, 3, 1, "", "__truediv__"], [242, 2, 1, "", "aspect2D"], [242, 2, 1, "", "cellFaceIDs"], [242, 2, 1, "", "exteriorFaces"], [242, 2, 1, "", "facesBack"], [242, 2, 1, "", "facesBottom"], [242, 2, 1, "", "facesDown"], [242, 2, 1, "", "facesFront"], [242, 2, 1, "", "facesLeft"], [242, 2, 1, "", "facesRight"], [242, 2, 1, "", "facesTop"], [242, 2, 1, "", "facesUp"], [242, 2, 1, "", "x"], [242, 2, 1, "", "y"], [242, 2, 1, "", "z"]], "fipy.meshes.topologies": [[245, 0, 0, "-", "abstractTopology"], [246, 0, 0, "-", "gridTopology"], [247, 0, 0, "-", "meshTopology"]], "fipy.meshes.tri2D": [[248, 1, 1, "", "Tri2D"]], "fipy.meshes.tri2D.Tri2D": [[248, 2, 1, "", "VTKCellDataSet"], [248, 2, 1, "", "VTKFaceDataSet"], [248, 3, 1, "", "__add__"], [248, 3, 1, "", "__div__"], [248, 3, 1, "", "__mul__"], [248, 3, 1, "", "__radd__"], [248, 3, 1, "", "__repr__"], [248, 3, 1, "", "__rmul__"], [248, 3, 1, "", "__sub__"], [248, 3, 1, "", "__truediv__"], [248, 2, 1, "", "aspect2D"], [248, 2, 1, "", "cellFaceIDs"], [248, 3, 1, "", "extrude"], [248, 2, 1, "", "facesBack"], [248, 2, 1, "", "facesBottom"], [248, 2, 1, "", "facesDown"], [248, 2, 1, "", "facesFront"], [248, 2, 1, "", "facesLeft"], [248, 2, 1, "", "facesRight"], [248, 2, 1, "", "facesTop"], [248, 2, 1, "", "facesUp"], [248, 2, 1, "", "physicalShape"], [248, 2, 1, "", "x"], [248, 2, 1, "", "y"], [248, 2, 1, "", "z"]], "fipy.meshes.uniformGrid": [[249, 1, 1, "", "UniformGrid"]], "fipy.meshes.uniformGrid.UniformGrid": [[249, 2, 1, "", "VTKCellDataSet"], [249, 2, 1, "", "VTKFaceDataSet"], [249, 3, 1, "", "__add__"], [249, 3, 1, "", "__div__"], [249, 3, 1, "", "__radd__"], [249, 3, 1, "", "__repr__"], [249, 3, 1, "", "__sub__"], [249, 3, 1, "", "__truediv__"], [249, 2, 1, "", "aspect2D"], [249, 2, 1, "", "cellFaceIDs"], [249, 2, 1, "", "facesBack"], [249, 2, 1, "", "facesBottom"], [249, 2, 1, "", "facesDown"], [249, 2, 1, "", "facesFront"], [249, 2, 1, "", "facesLeft"], [249, 2, 1, "", "facesRight"], [249, 2, 1, "", "facesTop"], [249, 2, 1, "", "facesUp"], [249, 2, 1, "", "x"], [249, 2, 1, "", "y"], [249, 2, 1, "", "z"]], "fipy.meshes.uniformGrid1D": [[250, 1, 1, "", "UniformGrid1D"]], "fipy.meshes.uniformGrid1D.UniformGrid1D": [[250, 2, 1, "", "VTKCellDataSet"], [250, 2, 1, "", "VTKFaceDataSet"], [250, 3, 1, "", "__add__"], [250, 3, 1, "", "__div__"], [250, 3, 1, "", "__radd__"], [250, 3, 1, "", "__repr__"], [250, 3, 1, "", "__sub__"], [250, 3, 1, "", "__truediv__"], [250, 2, 1, "", "aspect2D"], [250, 2, 1, "", "cellFaceIDs"], [250, 2, 1, "", "exteriorFaces"], [250, 2, 1, "", "facesBack"], [250, 2, 1, "", "facesBottom"], [250, 2, 1, "", "facesDown"], [250, 2, 1, "", "facesFront"], [250, 2, 1, "", "facesLeft"], [250, 2, 1, "", "facesRight"], [250, 2, 1, "", "facesTop"], [250, 2, 1, "", "facesUp"], [250, 2, 1, "", "x"], [250, 2, 1, "", "y"], [250, 2, 1, "", "z"]], "fipy.meshes.uniformGrid2D": [[251, 1, 1, "", "UniformGrid2D"]], "fipy.meshes.uniformGrid2D.UniformGrid2D": [[251, 2, 1, "", "VTKCellDataSet"], [251, 2, 1, "", "VTKFaceDataSet"], [251, 3, 1, "", "__add__"], [251, 3, 1, "", "__div__"], [251, 3, 1, "", "__radd__"], [251, 3, 1, "", "__repr__"], [251, 3, 1, "", "__sub__"], [251, 3, 1, "", "__truediv__"], [251, 2, 1, "", "aspect2D"], [251, 2, 1, "", "cellFaceIDs"], [251, 2, 1, "", "facesBack"], [251, 2, 1, "", "facesBottom"], [251, 2, 1, "", "facesDown"], [251, 2, 1, "", "facesFront"], [251, 2, 1, "", "facesLeft"], [251, 2, 1, "", "facesRight"], [251, 2, 1, "", "facesTop"], [251, 2, 1, "", "facesUp"], [251, 2, 1, "", "x"], [251, 2, 1, "", "y"], [251, 2, 1, "", "z"]], "fipy.meshes.uniformGrid3D": [[252, 1, 1, "", "UniformGrid3D"]], "fipy.meshes.uniformGrid3D.UniformGrid3D": [[252, 2, 1, "", "VTKCellDataSet"], [252, 2, 1, "", "VTKFaceDataSet"], [252, 3, 1, "", "__add__"], [252, 3, 1, "", "__div__"], [252, 3, 1, "", "__radd__"], [252, 3, 1, "", "__repr__"], [252, 3, 1, "", "__sub__"], [252, 3, 1, "", "__truediv__"], [252, 2, 1, "", "aspect2D"], [252, 2, 1, "", "cellFaceIDs"], [252, 2, 1, "", "facesBack"], [252, 2, 1, "", "facesBottom"], [252, 2, 1, "", "facesDown"], [252, 2, 1, "", "facesFront"], [252, 2, 1, "", "facesLeft"], [252, 2, 1, "", "facesRight"], [252, 2, 1, "", "facesTop"], [252, 2, 1, "", "facesUp"], [252, 2, 1, "", "x"], [252, 2, 1, "", "y"], [252, 2, 1, "", "z"]], "fipy.solvers": [[253, 6, 1, "", "DefaultAsymmetricSolver"], [253, 6, 1, "", "DefaultSolver"], [253, 6, 1, "", "DummySolver"], [253, 6, 1, "", "GeneralSolver"], [253, 5, 1, "", "SerialSolverError"], [254, 0, 0, "-", "pyAMG"], [262, 0, 0, "-", "pyamgx"], [275, 0, 0, "-", "pysparse"], [286, 0, 0, "-", "pysparseMatrixSolver"], [287, 0, 0, "-", "scipy"], [295, 0, 0, "-", "solver"], [296, 0, 0, "-", "test"], [297, 0, 0, "-", "trilinos"]], "fipy.solvers.SerialSolverError": [[253, 6, 1, "", "__cause__"], [253, 6, 1, "", "__context__"], [253, 3, 1, "", "__delattr__"], [253, 3, 1, "", "__getattribute__"], [253, 3, 1, "", "__reduce__"], [253, 3, 1, "", "__repr__"], [253, 3, 1, "", "__setattr__"], [253, 3, 1, "", "__str__"], [253, 3, 1, "", "with_traceback"]], "fipy.solvers.pyAMG": [[255, 0, 0, "-", "linearCGSSolver"], [256, 0, 0, "-", "linearGMRESSolver"], [257, 0, 0, "-", "linearGeneralSolver"], [258, 0, 0, "-", "linearLUSolver"], [259, 0, 0, "-", "linearPCGSolver"], [260, 0, 0, "-", "preconditioners"]], "fipy.solvers.pyAMG.linearCGSSolver": [[255, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver": [[255, 3, 1, "", "__repr__"]], "fipy.solvers.pyAMG.linearGMRESSolver": [[256, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver": [[256, 3, 1, "", "__repr__"]], "fipy.solvers.pyAMG.linearGeneralSolver": [[257, 1, 1, "", "LinearGeneralSolver"]], "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver": [[257, 3, 1, "", "__repr__"]], "fipy.solvers.pyAMG.linearLUSolver": [[258, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver": [[258, 3, 1, "", "__repr__"]], "fipy.solvers.pyAMG.linearPCGSolver": [[259, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver": [[259, 3, 1, "", "__repr__"]], "fipy.solvers.pyAMG.preconditioners": [[261, 0, 0, "-", "smoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[263, 0, 0, "-", "aggregationAMGSolver"], [264, 0, 0, "-", "classicalAMGSolver"], [265, 0, 0, "-", "linearBiCGStabSolver"], [266, 0, 0, "-", "linearCGSolver"], [267, 0, 0, "-", "linearFGMRESSolver"], [268, 0, 0, "-", "linearGMRESSolver"], [269, 0, 0, "-", "linearLUSolver"], [270, 0, 0, "-", "preconditioners"], [272, 0, 0, "-", "pyAMGXSolver"], [273, 0, 0, "-", "smoothers"]], "fipy.solvers.pyamgx.aggregationAMGSolver": [[263, 1, 1, "", "AggregationAMGSolver"]], "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver": [[263, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.classicalAMGSolver": [[264, 1, 1, "", "ClassicalAMGSolver"]], "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver": [[264, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.linearBiCGStabSolver": [[265, 1, 1, "", "LinearBiCGStabSolver"]], "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver": [[265, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.linearCGSolver": [[266, 1, 1, "", "LinearCGSolver"], [266, 6, 1, "", "LinearPCGSolver"]], "fipy.solvers.pyamgx.linearCGSolver.LinearCGSolver": [[266, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.linearFGMRESSolver": [[267, 1, 1, "", "LinearFGMRESSolver"]], "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver": [[267, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.linearGMRESSolver": [[268, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver": [[268, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.linearLUSolver": [[269, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver": [[269, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.preconditioners": [[271, 0, 0, "-", "preconditioners"]], "fipy.solvers.pyamgx.pyAMGXSolver": [[272, 1, 1, "", "PyAMGXSolver"]], "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver": [[272, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.smoothers": [[274, 0, 0, "-", "smoothers"]], "fipy.solvers.pysparse": [[276, 0, 0, "-", "linearCGSSolver"], [277, 0, 0, "-", "linearGMRESSolver"], [278, 0, 0, "-", "linearJORSolver"], [279, 0, 0, "-", "linearLUSolver"], [280, 0, 0, "-", "linearPCGSolver"], [281, 0, 0, "-", "preconditioners"], [285, 0, 0, "-", "pysparseSolver"]], "fipy.solvers.pysparse.linearCGSSolver": [[276, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver": [[276, 3, 1, "", "__repr__"]], "fipy.solvers.pysparse.linearGMRESSolver": [[277, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver": [[277, 3, 1, "", "__repr__"]], "fipy.solvers.pysparse.linearJORSolver": [[278, 1, 1, "", "LinearJORSolver"]], "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver": [[278, 3, 1, "", "__repr__"]], "fipy.solvers.pysparse.linearLUSolver": [[279, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver": [[279, 3, 1, "", "__repr__"]], "fipy.solvers.pysparse.linearPCGSolver": [[280, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver": [[280, 3, 1, "", "__repr__"]], "fipy.solvers.pysparse.preconditioners": [[282, 0, 0, "-", "jacobiPreconditioner"], [283, 0, 0, "-", "preconditioner"], [284, 0, 0, "-", "ssorPreconditioner"]], "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner": [[282, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.pysparse.preconditioners.preconditioner": [[283, 1, 1, "", "Preconditioner"]], "fipy.solvers.pysparse.preconditioners.ssorPreconditioner": [[284, 1, 1, "", "SsorPreconditioner"]], "fipy.solvers.pysparse.pysparseSolver": [[285, 1, 1, "", "PysparseSolver"]], "fipy.solvers.pysparse.pysparseSolver.PysparseSolver": [[285, 3, 1, "", "__repr__"]], "fipy.solvers.scipy": [[288, 0, 0, "-", "linearBicgstabSolver"], [289, 0, 0, "-", "linearCGSSolver"], [290, 0, 0, "-", "linearGMRESSolver"], [291, 0, 0, "-", "linearLUSolver"], [292, 0, 0, "-", "linearPCGSolver"], [293, 0, 0, "-", "scipyKrylovSolver"], [294, 0, 0, "-", "scipySolver"]], "fipy.solvers.scipy.linearBicgstabSolver": [[288, 1, 1, "", "LinearBicgstabSolver"]], "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver": [[288, 3, 1, "", "__repr__"]], "fipy.solvers.scipy.linearCGSSolver": [[289, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver": [[289, 3, 1, "", "__repr__"]], "fipy.solvers.scipy.linearGMRESSolver": [[290, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver": [[290, 3, 1, "", "__repr__"]], "fipy.solvers.scipy.linearLUSolver": [[291, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.scipy.linearLUSolver.LinearLUSolver": [[291, 3, 1, "", "__repr__"]], "fipy.solvers.scipy.linearPCGSolver": [[292, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver": [[292, 3, 1, "", "__repr__"]], "fipy.solvers.solver": [[295, 5, 1, "", "IllConditionedPreconditionerWarning"], [295, 5, 1, "", "MatrixIllConditionedWarning"], [295, 5, 1, "", "MaximumIterationWarning"], [295, 5, 1, "", "PreconditionerNotPositiveDefiniteWarning"], [295, 5, 1, "", "PreconditionerWarning"], [295, 5, 1, "", "ScalarQuantityOutOfRangeWarning"], [295, 1, 1, "", "Solver"], [295, 5, 1, "", "SolverConvergenceWarning"], [295, 5, 1, "", "StagnatedSolverWarning"]], "fipy.solvers.solver.IllConditionedPreconditionerWarning": [[295, 6, 1, "", "__cause__"], [295, 6, 1, "", "__context__"], [295, 3, 1, "", "__delattr__"], [295, 3, 1, "", "__getattribute__"], [295, 3, 1, "", "__reduce__"], [295, 3, 1, "", "__repr__"], [295, 3, 1, "", "__setattr__"], [295, 3, 1, "", "__str__"], [295, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.MatrixIllConditionedWarning": [[295, 6, 1, "", "__cause__"], [295, 6, 1, "", "__context__"], [295, 3, 1, "", "__delattr__"], [295, 3, 1, "", "__getattribute__"], [295, 3, 1, "", "__reduce__"], [295, 3, 1, "", "__repr__"], [295, 3, 1, "", "__setattr__"], [295, 3, 1, "", "__str__"], [295, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.MaximumIterationWarning": [[295, 6, 1, "", "__cause__"], [295, 6, 1, "", "__context__"], [295, 3, 1, "", "__delattr__"], [295, 3, 1, "", "__getattribute__"], [295, 3, 1, "", "__reduce__"], [295, 3, 1, "", "__repr__"], [295, 3, 1, "", "__setattr__"], [295, 3, 1, "", "__str__"], [295, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning": [[295, 6, 1, "", "__cause__"], [295, 6, 1, "", "__context__"], [295, 3, 1, "", "__delattr__"], [295, 3, 1, "", "__getattribute__"], [295, 3, 1, "", "__reduce__"], [295, 3, 1, "", "__repr__"], [295, 3, 1, "", "__setattr__"], [295, 3, 1, "", "__str__"], [295, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.PreconditionerWarning": [[295, 6, 1, "", "__cause__"], [295, 6, 1, "", "__context__"], [295, 3, 1, "", "__delattr__"], [295, 3, 1, "", "__getattribute__"], [295, 3, 1, "", "__reduce__"], [295, 3, 1, "", "__repr__"], [295, 3, 1, "", "__setattr__"], [295, 3, 1, "", "__str__"], [295, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning": [[295, 6, 1, "", "__cause__"], [295, 6, 1, "", "__context__"], [295, 3, 1, "", "__delattr__"], [295, 3, 1, "", "__getattribute__"], [295, 3, 1, "", "__reduce__"], [295, 3, 1, "", "__repr__"], [295, 3, 1, "", "__setattr__"], [295, 3, 1, "", "__str__"], [295, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.Solver": [[295, 3, 1, "", "__repr__"]], "fipy.solvers.solver.SolverConvergenceWarning": [[295, 6, 1, "", "__cause__"], [295, 6, 1, "", "__context__"], [295, 3, 1, "", "__delattr__"], [295, 3, 1, "", "__getattribute__"], [295, 3, 1, "", "__reduce__"], [295, 3, 1, "", "__repr__"], [295, 3, 1, "", "__setattr__"], [295, 3, 1, "", "__str__"], [295, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.StagnatedSolverWarning": [[295, 6, 1, "", "__cause__"], [295, 6, 1, "", "__context__"], [295, 3, 1, "", "__delattr__"], [295, 3, 1, "", "__getattribute__"], [295, 3, 1, "", "__reduce__"], [295, 3, 1, "", "__repr__"], [295, 3, 1, "", "__setattr__"], [295, 3, 1, "", "__str__"], [295, 3, 1, "", "with_traceback"]], "fipy.solvers.trilinos": [[298, 0, 0, "-", "comms"], [301, 0, 0, "-", "linearBicgstabSolver"], [302, 0, 0, "-", "linearCGSSolver"], [303, 0, 0, "-", "linearGMRESSolver"], [304, 0, 0, "-", "linearLUSolver"], [305, 0, 0, "-", "linearPCGSolver"], [306, 0, 0, "-", "preconditioners"], [317, 0, 0, "-", "trilinosAztecOOSolver"], [318, 0, 0, "-", "trilinosMLTest"], [319, 0, 0, "-", "trilinosNonlinearSolver"], [320, 0, 0, "-", "trilinosSolver"]], "fipy.solvers.trilinos.comms": [[299, 0, 0, "-", "epetraCommWrapper"], [300, 0, 0, "-", "serialEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.epetraCommWrapper": [[299, 1, 1, "", "EpetraCommWrapper"]], "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper": [[299, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper": [[300, 1, 1, "", "SerialEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper": [[300, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearBicgstabSolver": [[301, 1, 1, "", "LinearBicgstabSolver"]], "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver": [[301, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearCGSSolver": [[302, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver": [[302, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearGMRESSolver": [[303, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver": [[303, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearLUSolver": [[304, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver": [[304, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearPCGSolver": [[305, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver": [[305, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.preconditioners": [[307, 0, 0, "-", "domDecompPreconditioner"], [308, 0, 0, "-", "icPreconditioner"], [309, 0, 0, "-", "jacobiPreconditioner"], [310, 0, 0, "-", "multilevelDDMLPreconditioner"], [311, 0, 0, "-", "multilevelDDPreconditioner"], [312, 0, 0, "-", "multilevelNSSAPreconditioner"], [313, 0, 0, "-", "multilevelSAPreconditioner"], [314, 0, 0, "-", "multilevelSGSPreconditioner"], [315, 0, 0, "-", "multilevelSolverSmootherPreconditioner"], [316, 0, 0, "-", "preconditioner"]], "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner": [[307, 1, 1, "", "DomDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icPreconditioner": [[308, 1, 1, "", "ICPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner": [[309, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner": [[310, 1, 1, "", "MultilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner": [[311, 1, 1, "", "MultilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner": [[312, 1, 1, "", "MultilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner": [[313, 1, 1, "", "MultilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner": [[314, 1, 1, "", "MultilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner": [[315, 1, 1, "", "MultilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.preconditioner": [[316, 1, 1, "", "Preconditioner"]], "fipy.solvers.trilinos.trilinosAztecOOSolver": [[317, 1, 1, "", "TrilinosAztecOOSolver"]], "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver": [[317, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.trilinosMLTest": [[318, 1, 1, "", "TrilinosMLTest"]], "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest": [[318, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.trilinosNonlinearSolver": [[319, 1, 1, "", "TrilinosNonlinearSolver"]], "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver": [[319, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.trilinosSolver": [[320, 1, 1, "", "TrilinosSolver"]], "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver": [[320, 3, 1, "", "__repr__"]], "fipy.steppers": [[321, 4, 1, "", "L1error"], [321, 4, 1, "", "L2error"], [321, 4, 1, "", "LINFerror"], [322, 0, 0, "-", "pidStepper"], [323, 0, 0, "-", "pseudoRKQSStepper"], [324, 0, 0, "-", "stepper"], [321, 4, 1, "", "sweepMonotonic"]], "fipy.steppers.pidStepper": [[322, 1, 1, "", "PIDStepper"]], "fipy.steppers.pseudoRKQSStepper": [[323, 1, 1, "", "PseudoRKQSStepper"]], "fipy.terms": [[325, 5, 1, "", "AbstractBaseClassError"], [325, 5, 1, "", "ExplicitVariableError"], [325, 5, 1, "", "IncorrectSolutionVariable"], [325, 5, 1, "", "SolutionVariableNumberError"], [325, 5, 1, "", "SolutionVariableRequiredError"], [325, 5, 1, "", "TermMultiplyError"], [325, 5, 1, "", "TransientTermError"], [325, 5, 1, "", "VectorCoeffError"], [326, 0, 0, "-", "abstractBinaryTerm"], [327, 0, 0, "-", "abstractConvectionTerm"], [328, 0, 0, "-", "abstractDiffusionTerm"], [329, 0, 0, "-", "abstractUpwindConvectionTerm"], [330, 0, 0, "-", "advectionTerm"], [331, 0, 0, "-", "asymmetricConvectionTerm"], [332, 0, 0, "-", "binaryTerm"], [333, 0, 0, "-", "cellTerm"], [334, 0, 0, "-", "centralDiffConvectionTerm"], [335, 0, 0, "-", "coupledBinaryTerm"], [336, 0, 0, "-", "diffusionTerm"], [337, 0, 0, "-", "diffusionTermCorrection"], [338, 0, 0, "-", "diffusionTermNoCorrection"], [339, 0, 0, "-", "explicitDiffusionTerm"], [340, 0, 0, "-", "explicitSourceTerm"], [341, 0, 0, "-", "explicitUpwindConvectionTerm"], [342, 0, 0, "-", "exponentialConvectionTerm"], [343, 0, 0, "-", "faceTerm"], [344, 0, 0, "-", "firstOrderAdvectionTerm"], [345, 0, 0, "-", "hybridConvectionTerm"], [346, 0, 0, "-", "implicitDiffusionTerm"], [347, 0, 0, "-", "implicitSourceTerm"], [348, 0, 0, "-", "nonDiffusionTerm"], [349, 0, 0, "-", "powerLawConvectionTerm"], [350, 0, 0, "-", "residualTerm"], [351, 0, 0, "-", "sourceTerm"], [352, 0, 0, "-", "term"], [353, 0, 0, "-", "test"], [354, 0, 0, "-", "transientTerm"], [355, 0, 0, "-", "unaryTerm"], [356, 0, 0, "-", "upwindConvectionTerm"], [357, 0, 0, "-", "vanLeerConvectionTerm"]], "fipy.terms.AbstractBaseClassError": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "with_traceback"]], "fipy.terms.ExplicitVariableError": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "with_traceback"]], "fipy.terms.IncorrectSolutionVariable": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "with_traceback"]], "fipy.terms.SolutionVariableNumberError": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "with_traceback"]], "fipy.terms.SolutionVariableRequiredError": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "with_traceback"]], "fipy.terms.TermMultiplyError": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "with_traceback"]], "fipy.terms.TransientTermError": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "with_traceback"]], "fipy.terms.VectorCoeffError": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "with_traceback"]], "fipy.terms.advectionTerm": [[330, 1, 1, "", "AdvectionTerm"]], "fipy.terms.advectionTerm.AdvectionTerm": [[330, 2, 1, "", "RHSvector"], [330, 3, 1, "", "__eq__"], [330, 3, 1, "", "__hash__"], [330, 3, 1, "", "__mul__"], [330, 3, 1, "", "__neg__"], [330, 3, 1, "", "__repr__"], [330, 3, 1, "", "__rmul__"], [330, 3, 1, "", "cacheMatrix"], [330, 3, 1, "", "cacheRHSvector"], [330, 3, 1, "", "justErrorVector"], [330, 3, 1, "", "justResidualVector"], [330, 2, 1, "", "matrix"], [330, 3, 1, "", "residualVectorAndNorm"], [330, 3, 1, "", "solve"], [330, 3, 1, "", "sweep"]], "fipy.terms.cellTerm": [[333, 1, 1, "", "CellTerm"]], "fipy.terms.cellTerm.CellTerm": [[333, 2, 1, "", "RHSvector"], [333, 3, 1, "", "__eq__"], [333, 3, 1, "", "__hash__"], [333, 3, 1, "", "__mul__"], [333, 3, 1, "", "__neg__"], [333, 3, 1, "", "__repr__"], [333, 3, 1, "", "__rmul__"], [333, 3, 1, "", "cacheMatrix"], [333, 3, 1, "", "cacheRHSvector"], [333, 3, 1, "", "justErrorVector"], [333, 3, 1, "", "justResidualVector"], [333, 2, 1, "", "matrix"], [333, 3, 1, "", "residualVectorAndNorm"], [333, 3, 1, "", "solve"], [333, 3, 1, "", "sweep"]], "fipy.terms.centralDiffConvectionTerm": [[334, 1, 1, "", "CentralDifferenceConvectionTerm"]], "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm": [[334, 2, 1, "", "RHSvector"], [334, 3, 1, "", "__eq__"], [334, 3, 1, "", "__hash__"], [334, 3, 1, "", "__mul__"], [334, 3, 1, "", "__neg__"], [334, 3, 1, "", "__repr__"], [334, 3, 1, "", "__rmul__"], [334, 3, 1, "", "cacheMatrix"], [334, 3, 1, "", "cacheRHSvector"], [334, 3, 1, "", "justErrorVector"], [334, 3, 1, "", "justResidualVector"], [334, 2, 1, "", "matrix"], [334, 3, 1, "", "residualVectorAndNorm"], [334, 3, 1, "", "solve"], [334, 3, 1, "", "sweep"]], "fipy.terms.diffusionTerm": [[336, 1, 1, "", "DiffusionTerm"]], "fipy.terms.diffusionTerm.DiffusionTerm": [[336, 2, 1, "", "RHSvector"], [336, 3, 1, "", "__eq__"], [336, 3, 1, "", "__hash__"], [336, 3, 1, "", "__repr__"], [336, 3, 1, "", "cacheMatrix"], [336, 3, 1, "", "cacheRHSvector"], [336, 3, 1, "", "justErrorVector"], [336, 3, 1, "", "justResidualVector"], [336, 2, 1, "", "matrix"], [336, 3, 1, "", "residualVectorAndNorm"], [336, 3, 1, "", "solve"], [336, 3, 1, "", "sweep"]], "fipy.terms.diffusionTermCorrection": [[337, 1, 1, "", "DiffusionTermCorrection"]], "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection": [[337, 2, 1, "", "RHSvector"], [337, 3, 1, "", "__eq__"], [337, 3, 1, "", "__hash__"], [337, 3, 1, "", "__repr__"], [337, 3, 1, "", "cacheMatrix"], [337, 3, 1, "", "cacheRHSvector"], [337, 3, 1, "", "justErrorVector"], [337, 3, 1, "", "justResidualVector"], [337, 2, 1, "", "matrix"], [337, 3, 1, "", "residualVectorAndNorm"], [337, 3, 1, "", "solve"], [337, 3, 1, "", "sweep"]], "fipy.terms.diffusionTermNoCorrection": [[338, 1, 1, "", "DiffusionTermNoCorrection"]], "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection": [[338, 2, 1, "", "RHSvector"], [338, 3, 1, "", "__eq__"], [338, 3, 1, "", "__hash__"], [338, 3, 1, "", "__repr__"], [338, 3, 1, "", "cacheMatrix"], [338, 3, 1, "", "cacheRHSvector"], [338, 3, 1, "", "justErrorVector"], [338, 3, 1, "", "justResidualVector"], [338, 2, 1, "", "matrix"], [338, 3, 1, "", "residualVectorAndNorm"], [338, 3, 1, "", "solve"], [338, 3, 1, "", "sweep"]], "fipy.terms.explicitDiffusionTerm": [[339, 1, 1, "", "ExplicitDiffusionTerm"]], "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm": [[339, 2, 1, "", "RHSvector"], [339, 3, 1, "", "__eq__"], [339, 3, 1, "", "__hash__"], [339, 3, 1, "", "__repr__"], [339, 3, 1, "", "cacheMatrix"], [339, 3, 1, "", "cacheRHSvector"], [339, 3, 1, "", "justErrorVector"], [339, 3, 1, "", "justResidualVector"], [339, 2, 1, "", "matrix"], [339, 3, 1, "", "residualVectorAndNorm"], [339, 3, 1, "", "solve"], [339, 3, 1, "", "sweep"]], "fipy.terms.explicitUpwindConvectionTerm": [[341, 1, 1, "", "ExplicitUpwindConvectionTerm"]], "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm": [[341, 2, 1, "", "RHSvector"], [341, 3, 1, "", "__eq__"], [341, 3, 1, "", "__hash__"], [341, 3, 1, "", "__mul__"], [341, 3, 1, "", "__neg__"], [341, 3, 1, "", "__repr__"], [341, 3, 1, "", "__rmul__"], [341, 3, 1, "", "cacheMatrix"], [341, 3, 1, "", "cacheRHSvector"], [341, 3, 1, "", "justErrorVector"], [341, 3, 1, "", "justResidualVector"], [341, 2, 1, "", "matrix"], [341, 3, 1, "", "residualVectorAndNorm"], [341, 3, 1, "", "solve"], [341, 3, 1, "", "sweep"]], "fipy.terms.exponentialConvectionTerm": [[342, 1, 1, "", "ExponentialConvectionTerm"]], "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm": [[342, 2, 1, "", "RHSvector"], [342, 3, 1, "", "__eq__"], [342, 3, 1, "", "__hash__"], [342, 3, 1, "", "__mul__"], [342, 3, 1, "", "__neg__"], [342, 3, 1, "", "__repr__"], [342, 3, 1, "", "__rmul__"], [342, 3, 1, "", "cacheMatrix"], [342, 3, 1, "", "cacheRHSvector"], [342, 3, 1, "", "justErrorVector"], [342, 3, 1, "", "justResidualVector"], [342, 2, 1, "", "matrix"], [342, 3, 1, "", "residualVectorAndNorm"], [342, 3, 1, "", "solve"], [342, 3, 1, "", "sweep"]], "fipy.terms.faceTerm": [[343, 1, 1, "", "FaceTerm"]], "fipy.terms.faceTerm.FaceTerm": [[343, 2, 1, "", "RHSvector"], [343, 3, 1, "", "__eq__"], [343, 3, 1, "", "__hash__"], [343, 3, 1, "", "__mul__"], [343, 3, 1, "", "__neg__"], [343, 3, 1, "", "__repr__"], [343, 3, 1, "", "__rmul__"], [343, 3, 1, "", "cacheMatrix"], [343, 3, 1, "", "cacheRHSvector"], [343, 3, 1, "", "justErrorVector"], [343, 3, 1, "", "justResidualVector"], [343, 2, 1, "", "matrix"], [343, 3, 1, "", "residualVectorAndNorm"], [343, 3, 1, "", "solve"], [343, 3, 1, "", "sweep"]], "fipy.terms.firstOrderAdvectionTerm": [[344, 1, 1, "", "FirstOrderAdvectionTerm"]], "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm": [[344, 2, 1, "", "RHSvector"], [344, 3, 1, "", "__eq__"], [344, 3, 1, "", "__hash__"], [344, 3, 1, "", "__mul__"], [344, 3, 1, "", "__neg__"], [344, 3, 1, "", "__repr__"], [344, 3, 1, "", "__rmul__"], [344, 3, 1, "", "cacheMatrix"], [344, 3, 1, "", "cacheRHSvector"], [344, 3, 1, "", "justErrorVector"], [344, 3, 1, "", "justResidualVector"], [344, 2, 1, "", "matrix"], [344, 3, 1, "", "residualVectorAndNorm"], [344, 3, 1, "", "solve"], [344, 3, 1, "", "sweep"]], "fipy.terms.hybridConvectionTerm": [[345, 1, 1, "", "HybridConvectionTerm"]], "fipy.terms.hybridConvectionTerm.HybridConvectionTerm": [[345, 2, 1, "", "RHSvector"], [345, 3, 1, "", "__eq__"], [345, 3, 1, "", "__hash__"], [345, 3, 1, "", "__mul__"], [345, 3, 1, "", "__neg__"], [345, 3, 1, "", "__repr__"], [345, 3, 1, "", "__rmul__"], [345, 3, 1, "", "cacheMatrix"], [345, 3, 1, "", "cacheRHSvector"], [345, 3, 1, "", "justErrorVector"], [345, 3, 1, "", "justResidualVector"], [345, 2, 1, "", "matrix"], [345, 3, 1, "", "residualVectorAndNorm"], [345, 3, 1, "", "solve"], [345, 3, 1, "", "sweep"]], "fipy.terms.implicitDiffusionTerm": [[346, 6, 1, "", "ImplicitDiffusionTerm"]], "fipy.terms.implicitSourceTerm": [[347, 1, 1, "", "ImplicitSourceTerm"]], "fipy.terms.implicitSourceTerm.ImplicitSourceTerm": [[347, 2, 1, "", "RHSvector"], [347, 3, 1, "", "__eq__"], [347, 3, 1, "", "__hash__"], [347, 3, 1, "", "__mul__"], [347, 3, 1, "", "__neg__"], [347, 3, 1, "", "__repr__"], [347, 3, 1, "", "__rmul__"], [347, 3, 1, "", "cacheMatrix"], [347, 3, 1, "", "cacheRHSvector"], [347, 3, 1, "", "justErrorVector"], [347, 3, 1, "", "justResidualVector"], [347, 2, 1, "", "matrix"], [347, 3, 1, "", "residualVectorAndNorm"], [347, 3, 1, "", "solve"], [347, 3, 1, "", "sweep"]], "fipy.terms.powerLawConvectionTerm": [[349, 1, 1, "", "PowerLawConvectionTerm"]], "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm": [[349, 2, 1, "", "RHSvector"], [349, 3, 1, "", "__eq__"], [349, 3, 1, "", "__hash__"], [349, 3, 1, "", "__mul__"], [349, 3, 1, "", "__neg__"], [349, 3, 1, "", "__repr__"], [349, 3, 1, "", "__rmul__"], [349, 3, 1, "", "cacheMatrix"], [349, 3, 1, "", "cacheRHSvector"], [349, 3, 1, "", "justErrorVector"], [349, 3, 1, "", "justResidualVector"], [349, 2, 1, "", "matrix"], [349, 3, 1, "", "residualVectorAndNorm"], [349, 3, 1, "", "solve"], [349, 3, 1, "", "sweep"]], "fipy.terms.residualTerm": [[350, 1, 1, "", "ResidualTerm"]], "fipy.terms.residualTerm.ResidualTerm": [[350, 2, 1, "", "RHSvector"], [350, 3, 1, "", "__eq__"], [350, 3, 1, "", "__hash__"], [350, 3, 1, "", "__mul__"], [350, 3, 1, "", "__neg__"], [350, 3, 1, "", "__repr__"], [350, 3, 1, "", "__rmul__"], [350, 3, 1, "", "cacheMatrix"], [350, 3, 1, "", "cacheRHSvector"], [350, 3, 1, "", "justErrorVector"], [350, 3, 1, "", "justResidualVector"], [350, 2, 1, "", "matrix"], [350, 3, 1, "", "residualVectorAndNorm"], [350, 3, 1, "", "solve"], [350, 3, 1, "", "sweep"]], "fipy.terms.sourceTerm": [[351, 1, 1, "", "SourceTerm"]], "fipy.terms.sourceTerm.SourceTerm": [[351, 2, 1, "", "RHSvector"], [351, 3, 1, "", "__eq__"], [351, 3, 1, "", "__hash__"], [351, 3, 1, "", "__mul__"], [351, 3, 1, "", "__neg__"], [351, 3, 1, "", "__repr__"], [351, 3, 1, "", "__rmul__"], [351, 3, 1, "", "cacheMatrix"], [351, 3, 1, "", "cacheRHSvector"], [351, 3, 1, "", "justErrorVector"], [351, 3, 1, "", "justResidualVector"], [351, 2, 1, "", "matrix"], [351, 3, 1, "", "residualVectorAndNorm"], [351, 3, 1, "", "solve"], [351, 3, 1, "", "sweep"]], "fipy.terms.term": [[352, 1, 1, "", "Term"]], "fipy.terms.term.Term": [[352, 2, 1, "", "RHSvector"], [352, 3, 1, "", "__eq__"], [352, 3, 1, "", "__hash__"], [352, 3, 1, "", "__repr__"], [352, 3, 1, "", "cacheMatrix"], [352, 3, 1, "", "cacheRHSvector"], [352, 3, 1, "", "justErrorVector"], [352, 3, 1, "", "justResidualVector"], [352, 2, 1, "", "matrix"], [352, 3, 1, "", "residualVectorAndNorm"], [352, 3, 1, "", "solve"], [352, 3, 1, "", "sweep"]], "fipy.terms.transientTerm": [[354, 1, 1, "", "TransientTerm"]], "fipy.terms.transientTerm.TransientTerm": [[354, 2, 1, "", "RHSvector"], [354, 3, 1, "", "__eq__"], [354, 3, 1, "", "__hash__"], [354, 3, 1, "", "__mul__"], [354, 3, 1, "", "__neg__"], [354, 3, 1, "", "__repr__"], [354, 3, 1, "", "__rmul__"], [354, 3, 1, "", "cacheMatrix"], [354, 3, 1, "", "cacheRHSvector"], [354, 3, 1, "", "justErrorVector"], [354, 3, 1, "", "justResidualVector"], [354, 2, 1, "", "matrix"], [354, 3, 1, "", "residualVectorAndNorm"], [354, 3, 1, "", "solve"], [354, 3, 1, "", "sweep"]], "fipy.terms.upwindConvectionTerm": [[356, 1, 1, "", "UpwindConvectionTerm"]], "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm": [[356, 2, 1, "", "RHSvector"], [356, 3, 1, "", "__eq__"], [356, 3, 1, "", "__hash__"], [356, 3, 1, "", "__mul__"], [356, 3, 1, "", "__neg__"], [356, 3, 1, "", "__repr__"], [356, 3, 1, "", "__rmul__"], [356, 3, 1, "", "cacheMatrix"], [356, 3, 1, "", "cacheRHSvector"], [356, 3, 1, "", "justErrorVector"], [356, 3, 1, "", "justResidualVector"], [356, 2, 1, "", "matrix"], [356, 3, 1, "", "residualVectorAndNorm"], [356, 3, 1, "", "solve"], [356, 3, 1, "", "sweep"]], "fipy.terms.vanLeerConvectionTerm": [[357, 1, 1, "", "VanLeerConvectionTerm"]], "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm": [[357, 2, 1, "", "RHSvector"], [357, 3, 1, "", "__eq__"], [357, 3, 1, "", "__hash__"], [357, 3, 1, "", "__mul__"], [357, 3, 1, "", "__neg__"], [357, 3, 1, "", "__repr__"], [357, 3, 1, "", "__rmul__"], [357, 3, 1, "", "cacheMatrix"], [357, 3, 1, "", "cacheRHSvector"], [357, 3, 1, "", "justErrorVector"], [357, 3, 1, "", "justResidualVector"], [357, 2, 1, "", "matrix"], [357, 3, 1, "", "residualVectorAndNorm"], [357, 3, 1, "", "solve"], [357, 3, 1, "", "sweep"]], "fipy.tests": [[360, 0, 0, "-", "doctestPlus"], [361, 0, 0, "-", "lateImportTest"], [362, 0, 0, "-", "test"], [363, 0, 0, "-", "testProgram"]], "fipy.tests.doctestPlus": [[360, 4, 1, "", "register_skipper"], [360, 4, 1, "", "report_skips"], [360, 4, 1, "", "testmod"]], "fipy.tests.test": [[362, 1, 1, "", "test"]], "fipy.tests.test.test": [[362, 3, 1, "", "finalize_options"], [362, 3, 1, "", "initialize_options"]], "fipy.tools": [[364, 1, 1, "", "PhysicalField"], [364, 4, 1, "", "SharedTemporaryFile"], [364, 1, 1, "", "Vitals"], [365, 0, 0, "-", "comms"], [368, 0, 0, "-", "debug"], [369, 0, 0, "-", "decorators"], [370, 0, 0, "-", "dimensions"], [374, 0, 0, "-", "dump"], [375, 0, 0, "-", "inline"], [376, 0, 0, "-", "logging"], [377, 0, 0, "-", "numerix"], [364, 6, 1, "", "parallelComm"], [378, 0, 0, "-", "parser"], [364, 6, 1, "", "serialComm"], [379, 0, 0, "-", "sharedtempfile"], [380, 0, 0, "-", "test"], [381, 0, 0, "-", "vector"], [382, 0, 0, "-", "version"], [383, 0, 0, "-", "vitals"]], "fipy.tools.PhysicalField": [[364, 3, 1, "", "__abs__"], [364, 3, 1, "", "__add__"], [364, 3, 1, "", "__array__"], [364, 3, 1, "", "__array_wrap__"], [364, 3, 1, "", "__bool__"], [364, 3, 1, "", "__div__"], [364, 3, 1, "", "__eq__"], [364, 3, 1, "", "__float__"], [364, 3, 1, "", "__ge__"], [364, 3, 1, "", "__getitem__"], [364, 3, 1, "", "__gt__"], [364, 3, 1, "", "__hash__"], [364, 3, 1, "", "__le__"], [364, 3, 1, "", "__lt__"], [364, 3, 1, "", "__mod__"], [364, 3, 1, "", "__mul__"], [364, 3, 1, "", "__ne__"], [364, 3, 1, "", "__neg__"], [364, 3, 1, "", "__nonzero__"], [364, 3, 1, "", "__pow__"], [364, 3, 1, "", "__radd__"], [364, 3, 1, "", "__repr__"], [364, 3, 1, "", "__rmul__"], [364, 3, 1, "", "__setitem__"], [364, 3, 1, "", "__str__"], [364, 3, 1, "", "__sub__"], [364, 3, 1, "", "__truediv__"], [364, 3, 1, "", "add"], [364, 3, 1, "", "allclose"], [364, 3, 1, "", "allequal"], [364, 3, 1, "", "arccos"], [364, 3, 1, "", "arccosh"], [364, 3, 1, "", "arcsin"], [364, 3, 1, "", "arctan"], [364, 3, 1, "", "arctan2"], [364, 3, 1, "", "arctanh"], [364, 3, 1, "", "ceil"], [364, 3, 1, "", "conjugate"], [364, 3, 1, "", "convertToUnit"], [364, 3, 1, "", "copy"], [364, 3, 1, "", "cos"], [364, 3, 1, "", "cosh"], [364, 3, 1, "", "divide"], [364, 3, 1, "", "dot"], [364, 3, 1, "", "floor"], [364, 3, 1, "", "getsctype"], [364, 3, 1, "", "inBaseUnits"], [364, 3, 1, "", "inDimensionless"], [364, 3, 1, "", "inRadians"], [364, 3, 1, "", "inSIUnits"], [364, 3, 1, "", "inUnitsOf"], [364, 3, 1, "", "itemset"], [364, 3, 1, "", "log"], [364, 3, 1, "", "log10"], [364, 3, 1, "", "multiply"], [364, 2, 1, "", "numericValue"], [364, 3, 1, "", "put"], [364, 3, 1, "", "reshape"], [364, 2, 1, "", "shape"], [364, 3, 1, "", "sign"], [364, 3, 1, "", "sin"], [364, 3, 1, "", "sinh"], [364, 3, 1, "", "sqrt"], [364, 3, 1, "", "subtract"], [364, 3, 1, "", "sum"], [364, 3, 1, "", "take"], [364, 3, 1, "", "tan"], [364, 3, 1, "", "tanh"], [364, 3, 1, "", "tostring"], [364, 2, 1, "", "unit"]], "fipy.tools.Vitals": [[364, 3, 1, "", "__str__"], [364, 3, 1, "", "appendInfo"], [364, 2, 1, "", "documentElement"], [364, 2, 1, "", "firstChild"], [364, 2, 1, "", "lastChild"], [364, 2, 1, "", "localName"]], "fipy.tools.comms": [[366, 0, 0, "-", "commWrapper"], [367, 0, 0, "-", "dummyComm"]], "fipy.tools.comms.commWrapper": [[366, 1, 1, "", "CommWrapper"]], "fipy.tools.comms.commWrapper.CommWrapper": [[366, 3, 1, "", "__repr__"]], "fipy.tools.comms.dummyComm": [[367, 1, 1, "", "DummyComm"]], "fipy.tools.comms.dummyComm.DummyComm": [[367, 3, 1, "", "__repr__"]], "fipy.tools.decorators": [[369, 4, 1, "", "deprecate"]], "fipy.tools.dimensions": [[371, 0, 0, "-", "DictWithDefault"], [372, 0, 0, "-", "NumberDict"], [373, 0, 0, "-", "physicalField"]], "fipy.tools.dimensions.physicalField": [[373, 1, 1, "", "PhysicalField"], [373, 1, 1, "", "PhysicalUnit"]], "fipy.tools.dimensions.physicalField.PhysicalField": [[373, 3, 1, "", "__abs__"], [373, 3, 1, "", "__add__"], [373, 3, 1, "", "__array__"], [373, 3, 1, "", "__array_wrap__"], [373, 3, 1, "", "__bool__"], [373, 3, 1, "", "__div__"], [373, 3, 1, "", "__eq__"], [373, 3, 1, "", "__float__"], [373, 3, 1, "", "__ge__"], [373, 3, 1, "", "__getitem__"], [373, 3, 1, "", "__gt__"], [373, 3, 1, "", "__hash__"], [373, 3, 1, "", "__le__"], [373, 3, 1, "", "__lt__"], [373, 3, 1, "", "__mod__"], [373, 3, 1, "", "__mul__"], [373, 3, 1, "", "__ne__"], [373, 3, 1, "", "__neg__"], [373, 3, 1, "", "__nonzero__"], [373, 3, 1, "", "__pow__"], [373, 3, 1, "", "__radd__"], [373, 3, 1, "", "__repr__"], [373, 3, 1, "", "__rmul__"], [373, 3, 1, "", "__setitem__"], [373, 3, 1, "", "__str__"], [373, 3, 1, "", "__sub__"], [373, 3, 1, "", "__truediv__"], [373, 3, 1, "", "add"], [373, 3, 1, "", "allclose"], [373, 3, 1, "", "allequal"], [373, 3, 1, "", "arccos"], [373, 3, 1, "", "arccosh"], [373, 3, 1, "", "arcsin"], [373, 3, 1, "", "arctan"], [373, 3, 1, "", "arctan2"], [373, 3, 1, "", "arctanh"], [373, 3, 1, "", "ceil"], [373, 3, 1, "", "conjugate"], [373, 3, 1, "", "convertToUnit"], [373, 3, 1, "", "copy"], [373, 3, 1, "", "cos"], [373, 3, 1, "", "cosh"], [373, 3, 1, "", "divide"], [373, 3, 1, "", "dot"], [373, 3, 1, "", "floor"], [373, 3, 1, "", "getsctype"], [373, 3, 1, "", "inBaseUnits"], [373, 3, 1, "", "inDimensionless"], [373, 3, 1, "", "inRadians"], [373, 3, 1, "", "inSIUnits"], [373, 3, 1, "", "inUnitsOf"], [373, 3, 1, "", "itemset"], [373, 3, 1, "", "log"], [373, 3, 1, "", "log10"], [373, 3, 1, "", "multiply"], [373, 2, 1, "", "numericValue"], [373, 3, 1, "", "put"], [373, 3, 1, "", "reshape"], [373, 2, 1, "", "shape"], [373, 3, 1, "", "sign"], [373, 3, 1, "", "sin"], [373, 3, 1, "", "sinh"], [373, 3, 1, "", "sqrt"], [373, 3, 1, "", "subtract"], [373, 3, 1, "", "sum"], [373, 3, 1, "", "take"], [373, 3, 1, "", "tan"], [373, 3, 1, "", "tanh"], [373, 3, 1, "", "tostring"], [373, 2, 1, "", "unit"]], "fipy.tools.dimensions.physicalField.PhysicalUnit": [[373, 3, 1, "", "__div__"], [373, 3, 1, "", "__eq__"], [373, 3, 1, "", "__ge__"], [373, 3, 1, "", "__gt__"], [373, 6, 1, "", "__hash__"], [373, 3, 1, "", "__le__"], [373, 3, 1, "", "__lt__"], [373, 3, 1, "", "__mul__"], [373, 3, 1, "", "__ne__"], [373, 3, 1, "", "__pow__"], [373, 3, 1, "", "__rdiv__"], [373, 3, 1, "", "__repr__"], [373, 3, 1, "", "__rmul__"], [373, 3, 1, "", "__rtruediv__"], [373, 3, 1, "", "__str__"], [373, 3, 1, "", "__truediv__"], [373, 3, 1, "", "conversionFactorTo"], [373, 3, 1, "", "conversionTupleTo"], [373, 3, 1, "", "isAngle"], [373, 3, 1, "", "isCompatible"], [373, 3, 1, "", "isDimensionless"], [373, 3, 1, "", "isDimensionlessOrAngle"], [373, 3, 1, "", "isInverseAngle"], [373, 3, 1, "", "name"], [373, 3, 1, "", "setName"]], "fipy.tools.dump": [[374, 4, 1, "", "read"], [374, 4, 1, "", "write"]], "fipy.tools.numerix": [[377, 4, 1, "", "L1norm"], [377, 4, 1, "", "L2norm"], [377, 4, 1, "", "LINFnorm"], [377, 4, 1, "", "all"], [377, 4, 1, "", "allclose"], [377, 4, 1, "", "allequal"], [377, 4, 1, "", "dot"], [377, 4, 1, "", "getShape"], [377, 4, 1, "", "isclose"], [377, 4, 1, "", "nearest"], [377, 4, 1, "", "put"], [377, 4, 1, "", "rank"], [377, 4, 1, "", "reshape"], [377, 4, 1, "", "sqrtDot"], [377, 4, 1, "", "sum"], [377, 4, 1, "", "take"], [377, 4, 1, "", "tostring"]], "fipy.tools.parser": [[378, 4, 1, "", "parse"]], "fipy.tools.sharedtempfile": [[379, 4, 1, "", "SharedTemporaryFile"]], "fipy.tools.vector": [[381, 4, 1, "", "prune"], [381, 4, 1, "", "putAdd"]], "fipy.tools.vitals": [[383, 1, 1, "", "Vitals"]], "fipy.tools.vitals.Vitals": [[383, 3, 1, "", "__str__"], [383, 3, 1, "", "appendInfo"], [383, 2, 1, "", "documentElement"], [383, 2, 1, "", "firstChild"], [383, 2, 1, "", "lastChild"], [383, 2, 1, "", "localName"]], "fipy.variables": [[385, 0, 0, "-", "addOverFacesVariable"], [386, 0, 0, "-", "arithmeticCellToFaceVariable"], [387, 0, 0, "-", "betaNoiseVariable"], [388, 0, 0, "-", "binaryOperatorVariable"], [389, 0, 0, "-", "cellToFaceVariable"], [390, 0, 0, "-", "cellVariable"], [391, 0, 0, "-", "constant"], [392, 0, 0, "-", "constraintMask"], [393, 0, 0, "-", "coupledCellVariable"], [394, 0, 0, "-", "distanceVariable"], [395, 0, 0, "-", "exponentialNoiseVariable"], [396, 0, 0, "-", "faceGradContributionsVariable"], [397, 0, 0, "-", "faceGradVariable"], [398, 0, 0, "-", "faceVariable"], [399, 0, 0, "-", "gammaNoiseVariable"], [400, 0, 0, "-", "gaussCellGradVariable"], [401, 0, 0, "-", "gaussianNoiseVariable"], [402, 0, 0, "-", "harmonicCellToFaceVariable"], [403, 0, 0, "-", "histogramVariable"], [404, 0, 0, "-", "interfaceAreaVariable"], [405, 0, 0, "-", "interfaceFlagVariable"], [406, 0, 0, "-", "leastSquaresCellGradVariable"], [407, 0, 0, "-", "levelSetDiffusionVariable"], [408, 0, 0, "-", "meshVariable"], [409, 0, 0, "-", "minmodCellToFaceVariable"], [410, 0, 0, "-", "modCellGradVariable"], [411, 0, 0, "-", "modCellToFaceVariable"], [412, 0, 0, "-", "modFaceGradVariable"], [413, 0, 0, "-", "modPhysicalField"], [414, 0, 0, "-", "modularVariable"], [415, 0, 0, "-", "noiseVariable"], [416, 0, 0, "-", "operatorVariable"], [417, 0, 0, "-", "scharfetterGummelFaceVariable"], [418, 0, 0, "-", "surfactantConvectionVariable"], [419, 0, 0, "-", "surfactantVariable"], [420, 0, 0, "-", "test"], [421, 0, 0, "-", "unaryOperatorVariable"], [422, 0, 0, "-", "uniformNoiseVariable"], [423, 0, 0, "-", "variable"]], "fipy.variables.betaNoiseVariable": [[387, 1, 1, "", "BetaNoiseVariable"]], "fipy.variables.betaNoiseVariable.BetaNoiseVariable": [[387, 3, 1, "", "__abs__"], [387, 3, 1, "", "__and__"], [387, 3, 1, "", "__array__"], [387, 3, 1, "", "__array_wrap__"], [387, 3, 1, "", "__bool__"], [387, 3, 1, "", "__call__"], [387, 3, 1, "", "__eq__"], [387, 3, 1, "", "__ge__"], [387, 3, 1, "", "__getitem__"], [387, 3, 1, "", "__getstate__"], [387, 3, 1, "", "__gt__"], [387, 3, 1, "", "__hash__"], [387, 3, 1, "", "__invert__"], [387, 3, 1, "", "__le__"], [387, 3, 1, "", "__lt__"], [387, 3, 1, "", "__ne__"], [387, 3, 1, "", "__new__"], [387, 3, 1, "", "__nonzero__"], [387, 3, 1, "", "__or__"], [387, 3, 1, "", "__pow__"], [387, 3, 1, "", "__repr__"], [387, 3, 1, "", "__setstate__"], [387, 3, 1, "", "__str__"], [387, 3, 1, "", "all"], [387, 3, 1, "", "allclose"], [387, 3, 1, "", "any"], [387, 2, 1, "", "arithmeticFaceValue"], [387, 2, 1, "", "cellVolumeAverage"], [387, 3, 1, "", "constrain"], [387, 2, 1, "", "constraintMask"], [387, 3, 1, "", "copy"], [387, 3, 1, "", "dot"], [387, 2, 1, "", "faceGrad"], [387, 2, 1, "", "faceGradAverage"], [387, 2, 1, "", "faceValue"], [387, 2, 1, "", "gaussGrad"], [387, 3, 1, "", "getsctype"], [387, 2, 1, "", "globalValue"], [387, 2, 1, "", "grad"], [387, 2, 1, "", "harmonicFaceValue"], [387, 3, 1, "", "inBaseUnits"], [387, 3, 1, "", "inUnitsOf"], [387, 2, 1, "", "leastSquaresGrad"], [387, 2, 1, "", "mag"], [387, 3, 1, "", "min"], [387, 2, 1, "", "minmodFaceValue"], [387, 2, 1, "", "old"], [387, 3, 1, "", "rdot"], [387, 3, 1, "", "release"], [387, 3, 1, "", "scramble"], [387, 3, 1, "", "setValue"], [387, 2, 1, "", "shape"], [387, 3, 1, "", "std"], [387, 2, 1, "", "unit"], [387, 3, 1, "", "updateOld"], [387, 2, 1, "", "value"]], "fipy.variables.cellVariable": [[390, 1, 1, "", "CellVariable"]], "fipy.variables.cellVariable.CellVariable": [[390, 3, 1, "", "__abs__"], [390, 3, 1, "", "__and__"], [390, 3, 1, "", "__array__"], [390, 3, 1, "", "__array_wrap__"], [390, 3, 1, "", "__bool__"], [390, 3, 1, "", "__call__"], [390, 3, 1, "", "__eq__"], [390, 3, 1, "", "__ge__"], [390, 3, 1, "", "__getitem__"], [390, 3, 1, "", "__getstate__"], [390, 3, 1, "", "__gt__"], [390, 3, 1, "", "__hash__"], [390, 3, 1, "", "__invert__"], [390, 3, 1, "", "__le__"], [390, 3, 1, "", "__lt__"], [390, 3, 1, "", "__ne__"], [390, 3, 1, "", "__new__"], [390, 3, 1, "", "__nonzero__"], [390, 3, 1, "", "__or__"], [390, 3, 1, "", "__pow__"], [390, 3, 1, "", "__repr__"], [390, 3, 1, "", "__setstate__"], [390, 3, 1, "", "__str__"], [390, 3, 1, "", "all"], [390, 3, 1, "", "allclose"], [390, 3, 1, "", "any"], [390, 2, 1, "", "arithmeticFaceValue"], [390, 2, 1, "", "cellVolumeAverage"], [390, 3, 1, "", "constrain"], [390, 2, 1, "", "constraintMask"], [390, 3, 1, "", "copy"], [390, 3, 1, "", "dot"], [390, 2, 1, "", "faceGrad"], [390, 2, 1, "", "faceGradAverage"], [390, 2, 1, "", "faceValue"], [390, 2, 1, "", "gaussGrad"], [390, 3, 1, "", "getsctype"], [390, 2, 1, "", "globalValue"], [390, 2, 1, "", "grad"], [390, 2, 1, "", "harmonicFaceValue"], [390, 3, 1, "", "inBaseUnits"], [390, 3, 1, "", "inUnitsOf"], [390, 2, 1, "", "leastSquaresGrad"], [390, 2, 1, "", "mag"], [390, 3, 1, "", "min"], [390, 2, 1, "", "minmodFaceValue"], [390, 2, 1, "", "old"], [390, 3, 1, "", "rdot"], [390, 3, 1, "", "release"], [390, 3, 1, "", "setValue"], [390, 2, 1, "", "shape"], [390, 3, 1, "", "std"], [390, 2, 1, "", "unit"], [390, 3, 1, "", "updateOld"], [390, 2, 1, "", "value"]], "fipy.variables.distanceVariable": [[394, 1, 1, "", "DistanceVariable"]], "fipy.variables.distanceVariable.DistanceVariable": [[394, 3, 1, "", "__abs__"], [394, 3, 1, "", "__and__"], [394, 3, 1, "", "__array__"], [394, 3, 1, "", "__array_wrap__"], [394, 3, 1, "", "__bool__"], [394, 3, 1, "", "__call__"], [394, 3, 1, "", "__eq__"], [394, 3, 1, "", "__ge__"], [394, 3, 1, "", "__getitem__"], [394, 3, 1, "", "__getstate__"], [394, 3, 1, "", "__gt__"], [394, 3, 1, "", "__hash__"], [394, 3, 1, "", "__invert__"], [394, 3, 1, "", "__le__"], [394, 3, 1, "", "__lt__"], [394, 3, 1, "", "__ne__"], [394, 3, 1, "", "__new__"], [394, 3, 1, "", "__nonzero__"], [394, 3, 1, "", "__or__"], [394, 3, 1, "", "__pow__"], [394, 3, 1, "", "__repr__"], [394, 3, 1, "", "__setstate__"], [394, 3, 1, "", "__str__"], [394, 3, 1, "", "all"], [394, 3, 1, "", "allclose"], [394, 3, 1, "", "any"], [394, 2, 1, "", "arithmeticFaceValue"], [394, 3, 1, "", "calcDistanceFunction"], [394, 2, 1, "", "cellInterfaceAreas"], [394, 2, 1, "", "cellVolumeAverage"], [394, 3, 1, "", "constrain"], [394, 2, 1, "", "constraintMask"], [394, 3, 1, "", "copy"], [394, 3, 1, "", "dot"], [394, 3, 1, "", "extendVariable"], [394, 2, 1, "", "faceGrad"], [394, 2, 1, "", "faceGradAverage"], [394, 2, 1, "", "faceValue"], [394, 2, 1, "", "gaussGrad"], [394, 3, 1, "", "getsctype"], [394, 2, 1, "", "globalValue"], [394, 2, 1, "", "grad"], [394, 2, 1, "", "harmonicFaceValue"], [394, 3, 1, "", "inBaseUnits"], [394, 3, 1, "", "inUnitsOf"], [394, 2, 1, "", "leastSquaresGrad"], [394, 2, 1, "", "mag"], [394, 3, 1, "", "min"], [394, 2, 1, "", "minmodFaceValue"], [394, 2, 1, "", "old"], [394, 3, 1, "", "rdot"], [394, 3, 1, "", "release"], [394, 3, 1, "", "setValue"], [394, 2, 1, "", "shape"], [394, 3, 1, "", "std"], [394, 2, 1, "", "unit"], [394, 3, 1, "", "updateOld"], [394, 2, 1, "", "value"]], "fipy.variables.exponentialNoiseVariable": [[395, 1, 1, "", "ExponentialNoiseVariable"]], "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable": [[395, 3, 1, "", "__abs__"], [395, 3, 1, "", "__and__"], [395, 3, 1, "", "__array__"], [395, 3, 1, "", "__array_wrap__"], [395, 3, 1, "", "__bool__"], [395, 3, 1, "", "__call__"], [395, 3, 1, "", "__eq__"], [395, 3, 1, "", "__ge__"], [395, 3, 1, "", "__getitem__"], [395, 3, 1, "", "__getstate__"], [395, 3, 1, "", "__gt__"], [395, 3, 1, "", "__hash__"], [395, 3, 1, "", "__invert__"], [395, 3, 1, "", "__le__"], [395, 3, 1, "", "__lt__"], [395, 3, 1, "", "__ne__"], [395, 3, 1, "", "__new__"], [395, 3, 1, "", "__nonzero__"], [395, 3, 1, "", "__or__"], [395, 3, 1, "", "__pow__"], [395, 3, 1, "", "__repr__"], [395, 3, 1, "", "__setstate__"], [395, 3, 1, "", "__str__"], [395, 3, 1, "", "all"], [395, 3, 1, "", "allclose"], [395, 3, 1, "", "any"], [395, 2, 1, "", "arithmeticFaceValue"], [395, 2, 1, "", "cellVolumeAverage"], [395, 3, 1, "", "constrain"], [395, 2, 1, "", "constraintMask"], [395, 3, 1, "", "copy"], [395, 3, 1, "", "dot"], [395, 2, 1, "", "faceGrad"], [395, 2, 1, "", "faceGradAverage"], [395, 2, 1, "", "faceValue"], [395, 2, 1, "", "gaussGrad"], [395, 3, 1, "", "getsctype"], [395, 2, 1, "", "globalValue"], [395, 2, 1, "", "grad"], [395, 2, 1, "", "harmonicFaceValue"], [395, 3, 1, "", "inBaseUnits"], [395, 3, 1, "", "inUnitsOf"], [395, 2, 1, "", "leastSquaresGrad"], [395, 2, 1, "", "mag"], [395, 3, 1, "", "min"], [395, 2, 1, "", "minmodFaceValue"], [395, 2, 1, "", "old"], [395, 3, 1, "", "rdot"], [395, 3, 1, "", "release"], [395, 3, 1, "", "scramble"], [395, 3, 1, "", "setValue"], [395, 2, 1, "", "shape"], [395, 3, 1, "", "std"], [395, 2, 1, "", "unit"], [395, 3, 1, "", "updateOld"], [395, 2, 1, "", "value"]], "fipy.variables.faceVariable": [[398, 1, 1, "", "FaceVariable"]], "fipy.variables.faceVariable.FaceVariable": [[398, 3, 1, "", "__abs__"], [398, 3, 1, "", "__and__"], [398, 3, 1, "", "__array__"], [398, 3, 1, "", "__array_wrap__"], [398, 3, 1, "", "__bool__"], [398, 3, 1, "", "__call__"], [398, 3, 1, "", "__eq__"], [398, 3, 1, "", "__ge__"], [398, 3, 1, "", "__getitem__"], [398, 3, 1, "", "__getstate__"], [398, 3, 1, "", "__gt__"], [398, 3, 1, "", "__hash__"], [398, 3, 1, "", "__invert__"], [398, 3, 1, "", "__le__"], [398, 3, 1, "", "__lt__"], [398, 3, 1, "", "__ne__"], [398, 3, 1, "", "__new__"], [398, 3, 1, "", "__nonzero__"], [398, 3, 1, "", "__or__"], [398, 3, 1, "", "__pow__"], [398, 3, 1, "", "__repr__"], [398, 3, 1, "", "__setstate__"], [398, 3, 1, "", "__str__"], [398, 3, 1, "", "all"], [398, 3, 1, "", "allclose"], [398, 3, 1, "", "any"], [398, 3, 1, "", "constrain"], [398, 2, 1, "", "constraintMask"], [398, 3, 1, "", "copy"], [398, 2, 1, "", "divergence"], [398, 3, 1, "", "dot"], [398, 3, 1, "", "getsctype"], [398, 3, 1, "", "inBaseUnits"], [398, 3, 1, "", "inUnitsOf"], [398, 2, 1, "", "mag"], [398, 3, 1, "", "min"], [398, 3, 1, "", "rdot"], [398, 3, 1, "", "release"], [398, 3, 1, "", "setValue"], [398, 2, 1, "", "shape"], [398, 3, 1, "", "std"], [398, 2, 1, "", "unit"], [398, 2, 1, "", "value"]], "fipy.variables.gammaNoiseVariable": [[399, 1, 1, "", "GammaNoiseVariable"]], "fipy.variables.gammaNoiseVariable.GammaNoiseVariable": [[399, 3, 1, "", "__abs__"], [399, 3, 1, "", "__and__"], [399, 3, 1, "", "__array__"], [399, 3, 1, "", "__array_wrap__"], [399, 3, 1, "", "__bool__"], [399, 3, 1, "", "__call__"], [399, 3, 1, "", "__eq__"], [399, 3, 1, "", "__ge__"], [399, 3, 1, "", "__getitem__"], [399, 3, 1, "", "__getstate__"], [399, 3, 1, "", "__gt__"], [399, 3, 1, "", "__hash__"], [399, 3, 1, "", "__invert__"], [399, 3, 1, "", "__le__"], [399, 3, 1, "", "__lt__"], [399, 3, 1, "", "__ne__"], [399, 3, 1, "", "__new__"], [399, 3, 1, "", "__nonzero__"], [399, 3, 1, "", "__or__"], [399, 3, 1, "", "__pow__"], [399, 3, 1, "", "__repr__"], [399, 3, 1, "", "__setstate__"], [399, 3, 1, "", "__str__"], [399, 3, 1, "", "all"], [399, 3, 1, "", "allclose"], [399, 3, 1, "", "any"], [399, 2, 1, "", "arithmeticFaceValue"], [399, 2, 1, "", "cellVolumeAverage"], [399, 3, 1, "", "constrain"], [399, 2, 1, "", "constraintMask"], [399, 3, 1, "", "copy"], [399, 3, 1, "", "dot"], [399, 2, 1, "", "faceGrad"], [399, 2, 1, "", "faceGradAverage"], [399, 2, 1, "", "faceValue"], [399, 2, 1, "", "gaussGrad"], [399, 3, 1, "", "getsctype"], [399, 2, 1, "", "globalValue"], [399, 2, 1, "", "grad"], [399, 2, 1, "", "harmonicFaceValue"], [399, 3, 1, "", "inBaseUnits"], [399, 3, 1, "", "inUnitsOf"], [399, 2, 1, "", "leastSquaresGrad"], [399, 2, 1, "", "mag"], [399, 3, 1, "", "min"], [399, 2, 1, "", "minmodFaceValue"], [399, 2, 1, "", "old"], [399, 3, 1, "", "rdot"], [399, 3, 1, "", "release"], [399, 3, 1, "", "scramble"], [399, 3, 1, "", "setValue"], [399, 2, 1, "", "shape"], [399, 3, 1, "", "std"], [399, 2, 1, "", "unit"], [399, 3, 1, "", "updateOld"], [399, 2, 1, "", "value"]], "fipy.variables.gaussianNoiseVariable": [[401, 1, 1, "", "GaussianNoiseVariable"]], "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable": [[401, 3, 1, "", "__abs__"], [401, 3, 1, "", "__and__"], [401, 3, 1, "", "__array__"], [401, 3, 1, "", "__array_wrap__"], [401, 3, 1, "", "__bool__"], [401, 3, 1, "", "__call__"], [401, 3, 1, "", "__eq__"], [401, 3, 1, "", "__ge__"], [401, 3, 1, "", "__getitem__"], [401, 3, 1, "", "__getstate__"], [401, 3, 1, "", "__gt__"], [401, 3, 1, "", "__hash__"], [401, 3, 1, "", "__invert__"], [401, 3, 1, "", "__le__"], [401, 3, 1, "", "__lt__"], [401, 3, 1, "", "__ne__"], [401, 3, 1, "", "__new__"], [401, 3, 1, "", "__nonzero__"], [401, 3, 1, "", "__or__"], [401, 3, 1, "", "__pow__"], [401, 3, 1, "", "__repr__"], [401, 3, 1, "", "__setstate__"], [401, 3, 1, "", "__str__"], [401, 3, 1, "", "all"], [401, 3, 1, "", "allclose"], [401, 3, 1, "", "any"], [401, 2, 1, "", "arithmeticFaceValue"], [401, 2, 1, "", "cellVolumeAverage"], [401, 3, 1, "", "constrain"], [401, 2, 1, "", "constraintMask"], [401, 3, 1, "", "copy"], [401, 3, 1, "", "dot"], [401, 2, 1, "", "faceGrad"], [401, 2, 1, "", "faceGradAverage"], [401, 2, 1, "", "faceValue"], [401, 2, 1, "", "gaussGrad"], [401, 3, 1, "", "getsctype"], [401, 2, 1, "", "globalValue"], [401, 2, 1, "", "grad"], [401, 2, 1, "", "harmonicFaceValue"], [401, 3, 1, "", "inBaseUnits"], [401, 3, 1, "", "inUnitsOf"], [401, 2, 1, "", "leastSquaresGrad"], [401, 2, 1, "", "mag"], [401, 3, 1, "", "min"], [401, 2, 1, "", "minmodFaceValue"], [401, 2, 1, "", "old"], [401, 3, 1, "", "rdot"], [401, 3, 1, "", "release"], [401, 3, 1, "", "scramble"], [401, 3, 1, "", "setValue"], [401, 2, 1, "", "shape"], [401, 3, 1, "", "std"], [401, 2, 1, "", "unit"], [401, 3, 1, "", "updateOld"], [401, 2, 1, "", "value"]], "fipy.variables.histogramVariable": [[403, 1, 1, "", "HistogramVariable"]], "fipy.variables.histogramVariable.HistogramVariable": [[403, 3, 1, "", "__abs__"], [403, 3, 1, "", "__and__"], [403, 3, 1, "", "__array__"], [403, 3, 1, "", "__array_wrap__"], [403, 3, 1, "", "__bool__"], [403, 3, 1, "", "__call__"], [403, 3, 1, "", "__eq__"], [403, 3, 1, "", "__ge__"], [403, 3, 1, "", "__getitem__"], [403, 3, 1, "", "__getstate__"], [403, 3, 1, "", "__gt__"], [403, 3, 1, "", "__hash__"], [403, 3, 1, "", "__invert__"], [403, 3, 1, "", "__le__"], [403, 3, 1, "", "__lt__"], [403, 3, 1, "", "__ne__"], [403, 3, 1, "", "__new__"], [403, 3, 1, "", "__nonzero__"], [403, 3, 1, "", "__or__"], [403, 3, 1, "", "__pow__"], [403, 3, 1, "", "__repr__"], [403, 3, 1, "", "__setstate__"], [403, 3, 1, "", "__str__"], [403, 3, 1, "", "all"], [403, 3, 1, "", "allclose"], [403, 3, 1, "", "any"], [403, 2, 1, "", "arithmeticFaceValue"], [403, 2, 1, "", "cellVolumeAverage"], [403, 3, 1, "", "constrain"], [403, 2, 1, "", "constraintMask"], [403, 3, 1, "", "copy"], [403, 3, 1, "", "dot"], [403, 2, 1, "", "faceGrad"], [403, 2, 1, "", "faceGradAverage"], [403, 2, 1, "", "faceValue"], [403, 2, 1, "", "gaussGrad"], [403, 3, 1, "", "getsctype"], [403, 2, 1, "", "globalValue"], [403, 2, 1, "", "grad"], [403, 2, 1, "", "harmonicFaceValue"], [403, 3, 1, "", "inBaseUnits"], [403, 3, 1, "", "inUnitsOf"], [403, 2, 1, "", "leastSquaresGrad"], [403, 2, 1, "", "mag"], [403, 3, 1, "", "min"], [403, 2, 1, "", "minmodFaceValue"], [403, 2, 1, "", "old"], [403, 3, 1, "", "rdot"], [403, 3, 1, "", "release"], [403, 3, 1, "", "setValue"], [403, 2, 1, "", "shape"], [403, 3, 1, "", "std"], [403, 2, 1, "", "unit"], [403, 3, 1, "", "updateOld"], [403, 2, 1, "", "value"]], "fipy.variables.modularVariable": [[414, 1, 1, "", "ModularVariable"]], "fipy.variables.modularVariable.ModularVariable": [[414, 3, 1, "", "__abs__"], [414, 3, 1, "", "__and__"], [414, 3, 1, "", "__array__"], [414, 3, 1, "", "__array_wrap__"], [414, 3, 1, "", "__bool__"], [414, 3, 1, "", "__call__"], [414, 3, 1, "", "__eq__"], [414, 3, 1, "", "__ge__"], [414, 3, 1, "", "__getitem__"], [414, 3, 1, "", "__getstate__"], [414, 3, 1, "", "__gt__"], [414, 3, 1, "", "__hash__"], [414, 3, 1, "", "__invert__"], [414, 3, 1, "", "__le__"], [414, 3, 1, "", "__lt__"], [414, 3, 1, "", "__ne__"], [414, 3, 1, "", "__new__"], [414, 3, 1, "", "__nonzero__"], [414, 3, 1, "", "__or__"], [414, 3, 1, "", "__pow__"], [414, 3, 1, "", "__repr__"], [414, 3, 1, "", "__setstate__"], [414, 3, 1, "", "__str__"], [414, 3, 1, "", "all"], [414, 3, 1, "", "allclose"], [414, 3, 1, "", "any"], [414, 2, 1, "", "arithmeticFaceValue"], [414, 2, 1, "", "cellVolumeAverage"], [414, 3, 1, "", "constrain"], [414, 2, 1, "", "constraintMask"], [414, 3, 1, "", "copy"], [414, 3, 1, "", "dot"], [414, 2, 1, "", "faceGrad"], [414, 2, 1, "", "faceGradAverage"], [414, 2, 1, "", "faceGradNoMod"], [414, 2, 1, "", "faceValue"], [414, 2, 1, "", "gaussGrad"], [414, 3, 1, "", "getsctype"], [414, 2, 1, "", "globalValue"], [414, 2, 1, "", "grad"], [414, 2, 1, "", "harmonicFaceValue"], [414, 3, 1, "", "inBaseUnits"], [414, 3, 1, "", "inUnitsOf"], [414, 2, 1, "", "leastSquaresGrad"], [414, 2, 1, "", "mag"], [414, 3, 1, "", "min"], [414, 2, 1, "", "minmodFaceValue"], [414, 2, 1, "", "old"], [414, 3, 1, "", "rdot"], [414, 3, 1, "", "release"], [414, 3, 1, "", "setValue"], [414, 2, 1, "", "shape"], [414, 3, 1, "", "std"], [414, 2, 1, "", "unit"], [414, 3, 1, "", "updateOld"], [414, 2, 1, "", "value"]], "fipy.variables.noiseVariable": [[415, 1, 1, "", "NoiseVariable"]], "fipy.variables.noiseVariable.NoiseVariable": [[415, 3, 1, "", "__abs__"], [415, 3, 1, "", "__and__"], [415, 3, 1, "", "__array__"], [415, 3, 1, "", "__array_wrap__"], [415, 3, 1, "", "__bool__"], [415, 3, 1, "", "__call__"], [415, 3, 1, "", "__eq__"], [415, 3, 1, "", "__ge__"], [415, 3, 1, "", "__getitem__"], [415, 3, 1, "", "__getstate__"], [415, 3, 1, "", "__gt__"], [415, 3, 1, "", "__hash__"], [415, 3, 1, "", "__invert__"], [415, 3, 1, "", "__le__"], [415, 3, 1, "", "__lt__"], [415, 3, 1, "", "__ne__"], [415, 3, 1, "", "__new__"], [415, 3, 1, "", "__nonzero__"], [415, 3, 1, "", "__or__"], [415, 3, 1, "", "__pow__"], [415, 3, 1, "", "__repr__"], [415, 3, 1, "", "__setstate__"], [415, 3, 1, "", "__str__"], [415, 3, 1, "", "all"], [415, 3, 1, "", "allclose"], [415, 3, 1, "", "any"], [415, 2, 1, "", "arithmeticFaceValue"], [415, 2, 1, "", "cellVolumeAverage"], [415, 3, 1, "", "constrain"], [415, 2, 1, "", "constraintMask"], [415, 3, 1, "", "copy"], [415, 3, 1, "", "dot"], [415, 2, 1, "", "faceGrad"], [415, 2, 1, "", "faceGradAverage"], [415, 2, 1, "", "faceValue"], [415, 2, 1, "", "gaussGrad"], [415, 3, 1, "", "getsctype"], [415, 2, 1, "", "globalValue"], [415, 2, 1, "", "grad"], [415, 2, 1, "", "harmonicFaceValue"], [415, 3, 1, "", "inBaseUnits"], [415, 3, 1, "", "inUnitsOf"], [415, 2, 1, "", "leastSquaresGrad"], [415, 2, 1, "", "mag"], [415, 3, 1, "", "min"], [415, 2, 1, "", "minmodFaceValue"], [415, 2, 1, "", "old"], [415, 3, 1, "", "rdot"], [415, 3, 1, "", "release"], [415, 3, 1, "", "scramble"], [415, 3, 1, "", "setValue"], [415, 2, 1, "", "shape"], [415, 3, 1, "", "std"], [415, 2, 1, "", "unit"], [415, 3, 1, "", "updateOld"], [415, 2, 1, "", "value"]], "fipy.variables.scharfetterGummelFaceVariable": [[417, 1, 1, "", "ScharfetterGummelFaceVariable"]], "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable": [[417, 3, 1, "", "__abs__"], [417, 3, 1, "", "__and__"], [417, 3, 1, "", "__array__"], [417, 3, 1, "", "__array_wrap__"], [417, 3, 1, "", "__bool__"], [417, 3, 1, "", "__call__"], [417, 3, 1, "", "__eq__"], [417, 3, 1, "", "__ge__"], [417, 3, 1, "", "__getitem__"], [417, 3, 1, "", "__getstate__"], [417, 3, 1, "", "__gt__"], [417, 3, 1, "", "__hash__"], [417, 3, 1, "", "__invert__"], [417, 3, 1, "", "__le__"], [417, 3, 1, "", "__lt__"], [417, 3, 1, "", "__ne__"], [417, 3, 1, "", "__new__"], [417, 3, 1, "", "__nonzero__"], [417, 3, 1, "", "__or__"], [417, 3, 1, "", "__pow__"], [417, 3, 1, "", "__repr__"], [417, 3, 1, "", "__setstate__"], [417, 3, 1, "", "__str__"], [417, 3, 1, "", "all"], [417, 3, 1, "", "allclose"], [417, 3, 1, "", "any"], [417, 3, 1, "", "constrain"], [417, 2, 1, "", "constraintMask"], [417, 3, 1, "", "copy"], [417, 2, 1, "", "divergence"], [417, 3, 1, "", "dot"], [417, 3, 1, "", "getsctype"], [417, 3, 1, "", "inBaseUnits"], [417, 3, 1, "", "inUnitsOf"], [417, 2, 1, "", "mag"], [417, 3, 1, "", "min"], [417, 3, 1, "", "rdot"], [417, 3, 1, "", "release"], [417, 3, 1, "", "setValue"], [417, 2, 1, "", "shape"], [417, 3, 1, "", "std"], [417, 2, 1, "", "unit"], [417, 2, 1, "", "value"]], "fipy.variables.surfactantConvectionVariable": [[418, 1, 1, "", "SurfactantConvectionVariable"]], "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable": [[418, 3, 1, "", "__abs__"], [418, 3, 1, "", "__and__"], [418, 3, 1, "", "__array__"], [418, 3, 1, "", "__array_wrap__"], [418, 3, 1, "", "__bool__"], [418, 3, 1, "", "__call__"], [418, 3, 1, "", "__eq__"], [418, 3, 1, "", "__ge__"], [418, 3, 1, "", "__getitem__"], [418, 3, 1, "", "__getstate__"], [418, 3, 1, "", "__gt__"], [418, 3, 1, "", "__hash__"], [418, 3, 1, "", "__invert__"], [418, 3, 1, "", "__le__"], [418, 3, 1, "", "__lt__"], [418, 3, 1, "", "__ne__"], [418, 3, 1, "", "__new__"], [418, 3, 1, "", "__nonzero__"], [418, 3, 1, "", "__or__"], [418, 3, 1, "", "__pow__"], [418, 3, 1, "", "__repr__"], [418, 3, 1, "", "__setstate__"], [418, 3, 1, "", "__str__"], [418, 3, 1, "", "all"], [418, 3, 1, "", "allclose"], [418, 3, 1, "", "any"], [418, 3, 1, "", "constrain"], [418, 2, 1, "", "constraintMask"], [418, 3, 1, "", "copy"], [418, 2, 1, "", "divergence"], [418, 3, 1, "", "dot"], [418, 3, 1, "", "getsctype"], [418, 3, 1, "", "inBaseUnits"], [418, 3, 1, "", "inUnitsOf"], [418, 2, 1, "", "mag"], [418, 3, 1, "", "min"], [418, 3, 1, "", "rdot"], [418, 3, 1, "", "release"], [418, 3, 1, "", "setValue"], [418, 2, 1, "", "shape"], [418, 3, 1, "", "std"], [418, 2, 1, "", "unit"], [418, 2, 1, "", "value"]], "fipy.variables.surfactantVariable": [[419, 1, 1, "", "SurfactantVariable"]], "fipy.variables.surfactantVariable.SurfactantVariable": [[419, 3, 1, "", "__abs__"], [419, 3, 1, "", "__and__"], [419, 3, 1, "", "__array__"], [419, 3, 1, "", "__array_wrap__"], [419, 3, 1, "", "__bool__"], [419, 3, 1, "", "__call__"], [419, 3, 1, "", "__eq__"], [419, 3, 1, "", "__ge__"], [419, 3, 1, "", "__getitem__"], [419, 3, 1, "", "__getstate__"], [419, 3, 1, "", "__gt__"], [419, 3, 1, "", "__hash__"], [419, 3, 1, "", "__invert__"], [419, 3, 1, "", "__le__"], [419, 3, 1, "", "__lt__"], [419, 3, 1, "", "__ne__"], [419, 3, 1, "", "__new__"], [419, 3, 1, "", "__nonzero__"], [419, 3, 1, "", "__or__"], [419, 3, 1, "", "__pow__"], [419, 3, 1, "", "__repr__"], [419, 3, 1, "", "__setstate__"], [419, 3, 1, "", "__str__"], [419, 3, 1, "", "all"], [419, 3, 1, "", "allclose"], [419, 3, 1, "", "any"], [419, 2, 1, "", "arithmeticFaceValue"], [419, 2, 1, "", "cellVolumeAverage"], [419, 3, 1, "", "constrain"], [419, 2, 1, "", "constraintMask"], [419, 3, 1, "", "copy"], [419, 3, 1, "", "dot"], [419, 2, 1, "", "faceGrad"], [419, 2, 1, "", "faceGradAverage"], [419, 2, 1, "", "faceValue"], [419, 2, 1, "", "gaussGrad"], [419, 3, 1, "", "getsctype"], [419, 2, 1, "", "globalValue"], [419, 2, 1, "", "grad"], [419, 2, 1, "", "harmonicFaceValue"], [419, 3, 1, "", "inBaseUnits"], [419, 3, 1, "", "inUnitsOf"], [419, 2, 1, "", "interfaceVar"], [419, 2, 1, "", "leastSquaresGrad"], [419, 2, 1, "", "mag"], [419, 3, 1, "", "min"], [419, 2, 1, "", "minmodFaceValue"], [419, 2, 1, "", "old"], [419, 3, 1, "", "rdot"], [419, 3, 1, "", "release"], [419, 3, 1, "", "setValue"], [419, 2, 1, "", "shape"], [419, 3, 1, "", "std"], [419, 2, 1, "", "unit"], [419, 3, 1, "", "updateOld"], [419, 2, 1, "", "value"]], "fipy.variables.uniformNoiseVariable": [[422, 1, 1, "", "UniformNoiseVariable"]], "fipy.variables.uniformNoiseVariable.UniformNoiseVariable": [[422, 3, 1, "", "__abs__"], [422, 3, 1, "", "__and__"], [422, 3, 1, "", "__array__"], [422, 3, 1, "", "__array_wrap__"], [422, 3, 1, "", "__bool__"], [422, 3, 1, "", "__call__"], [422, 3, 1, "", "__eq__"], [422, 3, 1, "", "__ge__"], [422, 3, 1, "", "__getitem__"], [422, 3, 1, "", "__getstate__"], [422, 3, 1, "", "__gt__"], [422, 3, 1, "", "__hash__"], [422, 3, 1, "", "__invert__"], [422, 3, 1, "", "__le__"], [422, 3, 1, "", "__lt__"], [422, 3, 1, "", "__ne__"], [422, 3, 1, "", "__new__"], [422, 3, 1, "", "__nonzero__"], [422, 3, 1, "", "__or__"], [422, 3, 1, "", "__pow__"], [422, 3, 1, "", "__repr__"], [422, 3, 1, "", "__setstate__"], [422, 3, 1, "", "__str__"], [422, 3, 1, "", "all"], [422, 3, 1, "", "allclose"], [422, 3, 1, "", "any"], [422, 2, 1, "", "arithmeticFaceValue"], [422, 2, 1, "", "cellVolumeAverage"], [422, 3, 1, "", "constrain"], [422, 2, 1, "", "constraintMask"], [422, 3, 1, "", "copy"], [422, 3, 1, "", "dot"], [422, 2, 1, "", "faceGrad"], [422, 2, 1, "", "faceGradAverage"], [422, 2, 1, "", "faceValue"], [422, 2, 1, "", "gaussGrad"], [422, 3, 1, "", "getsctype"], [422, 2, 1, "", "globalValue"], [422, 2, 1, "", "grad"], [422, 2, 1, "", "harmonicFaceValue"], [422, 3, 1, "", "inBaseUnits"], [422, 3, 1, "", "inUnitsOf"], [422, 2, 1, "", "leastSquaresGrad"], [422, 2, 1, "", "mag"], [422, 3, 1, "", "min"], [422, 2, 1, "", "minmodFaceValue"], [422, 2, 1, "", "old"], [422, 3, 1, "", "rdot"], [422, 3, 1, "", "release"], [422, 3, 1, "", "scramble"], [422, 3, 1, "", "setValue"], [422, 2, 1, "", "shape"], [422, 3, 1, "", "std"], [422, 2, 1, "", "unit"], [422, 3, 1, "", "updateOld"], [422, 2, 1, "", "value"]], "fipy.variables.variable": [[423, 1, 1, "", "Variable"]], "fipy.variables.variable.Variable": [[423, 3, 1, "", "__abs__"], [423, 3, 1, "", "__and__"], [423, 3, 1, "", "__array__"], [423, 3, 1, "", "__array_wrap__"], [423, 3, 1, "", "__bool__"], [423, 3, 1, "", "__call__"], [423, 3, 1, "", "__eq__"], [423, 3, 1, "", "__ge__"], [423, 3, 1, "", "__getitem__"], [423, 3, 1, "", "__getstate__"], [423, 3, 1, "", "__gt__"], [423, 3, 1, "", "__hash__"], [423, 3, 1, "", "__invert__"], [423, 3, 1, "", "__le__"], [423, 3, 1, "", "__lt__"], [423, 3, 1, "", "__ne__"], [423, 3, 1, "", "__new__"], [423, 3, 1, "", "__nonzero__"], [423, 3, 1, "", "__or__"], [423, 3, 1, "", "__pow__"], [423, 3, 1, "", "__repr__"], [423, 3, 1, "", "__setstate__"], [423, 3, 1, "", "__str__"], [423, 3, 1, "", "all"], [423, 3, 1, "", "allclose"], [423, 3, 1, "", "any"], [423, 3, 1, "", "constrain"], [423, 3, 1, "", "copy"], [423, 3, 1, "", "getsctype"], [423, 3, 1, "", "inBaseUnits"], [423, 3, 1, "", "inUnitsOf"], [423, 2, 1, "", "mag"], [423, 3, 1, "", "release"], [423, 3, 1, "", "setValue"], [423, 2, 1, "", "shape"], [423, 2, 1, "", "unit"], [423, 2, 1, "", "value"]], "fipy.viewers": [[424, 1, 1, "", "DummyViewer"], [424, 5, 1, "", "MeshDimensionError"], [424, 4, 1, "", "Viewer"], [425, 0, 0, "-", "matplotlibViewer"], [426, 0, 0, "-", "mayaviViewer"], [429, 0, 0, "-", "multiViewer"], [430, 0, 0, "-", "test"], [431, 0, 0, "-", "testinteractive"], [432, 0, 0, "-", "tsvViewer"], [433, 0, 0, "-", "viewer"], [434, 0, 0, "-", "vtkViewer"]], "fipy.viewers.DummyViewer": [[424, 3, 1, "", "plot"], [424, 3, 1, "", "plotMesh"], [424, 3, 1, "", "setLimits"], [424, 2, 1, "", "title"], [424, 2, 1, "", "vars"]], "fipy.viewers.MeshDimensionError": [[424, 6, 1, "", "__cause__"], [424, 6, 1, "", "__context__"], [424, 3, 1, "", "__delattr__"], [424, 3, 1, "", "__getattribute__"], [424, 3, 1, "", "__reduce__"], [424, 3, 1, "", "__repr__"], [424, 3, 1, "", "__setattr__"], [424, 3, 1, "", "__str__"], [424, 3, 1, "", "with_traceback"]], "fipy.viewers.matplotlibViewer": [[425, 4, 1, "", "MatplotlibViewer"]], "fipy.viewers.mayaviViewer": [[426, 1, 1, "", "MayaviClient"], [427, 0, 0, "-", "mayaviClient"], [428, 0, 0, "-", "test"]], "fipy.viewers.mayaviViewer.MayaviClient": [[426, 2, 1, "", "fps"], [426, 3, 1, "", "plot"], [426, 3, 1, "", "plotMesh"], [426, 3, 1, "", "setLimits"], [426, 2, 1, "", "title"], [426, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer.mayaviClient": [[427, 1, 1, "", "MayaviClient"]], "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient": [[427, 2, 1, "", "fps"], [427, 3, 1, "", "plot"], [427, 3, 1, "", "plotMesh"], [427, 3, 1, "", "setLimits"], [427, 2, 1, "", "title"], [427, 2, 1, "", "vars"]], "fipy.viewers.multiViewer": [[429, 1, 1, "", "MultiViewer"]], "fipy.viewers.multiViewer.MultiViewer": [[429, 3, 1, "", "plot"], [429, 3, 1, "", "plotMesh"], [429, 3, 1, "", "setLimits"], [429, 2, 1, "", "title"], [429, 2, 1, "", "vars"]], "fipy.viewers.tsvViewer": [[432, 1, 1, "", "TSVViewer"]], "fipy.viewers.tsvViewer.TSVViewer": [[432, 3, 1, "", "plot"], [432, 3, 1, "", "plotMesh"], [432, 3, 1, "", "setLimits"], [432, 2, 1, "", "title"], [432, 2, 1, "", "vars"]], "fipy.viewers.viewer": [[433, 1, 1, "", "AbstractViewer"]], "fipy.viewers.viewer.AbstractViewer": [[433, 3, 1, "", "plot"], [433, 3, 1, "", "plotMesh"], [433, 3, 1, "", "setLimits"], [433, 2, 1, "", "title"], [433, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer": [[434, 1, 1, "", "VTKCellViewer"], [434, 1, 1, "", "VTKFaceViewer"], [434, 4, 1, "", "VTKViewer"], [435, 0, 0, "-", "test"], [436, 0, 0, "-", "vtkCellViewer"], [437, 0, 0, "-", "vtkFaceViewer"], [438, 0, 0, "-", "vtkViewer"]], "fipy.viewers.vtkViewer.VTKCellViewer": [[434, 3, 1, "", "plot"], [434, 3, 1, "", "plotMesh"], [434, 3, 1, "", "setLimits"], [434, 2, 1, "", "title"], [434, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.VTKFaceViewer": [[434, 3, 1, "", "plot"], [434, 3, 1, "", "plotMesh"], [434, 3, 1, "", "setLimits"], [434, 2, 1, "", "title"], [434, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkCellViewer": [[436, 1, 1, "", "VTKCellViewer"]], "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer": [[436, 3, 1, "", "plot"], [436, 3, 1, "", "plotMesh"], [436, 3, 1, "", "setLimits"], [436, 2, 1, "", "title"], [436, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkFaceViewer": [[437, 1, 1, "", "VTKFaceViewer"]], "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer": [[437, 3, 1, "", "plot"], [437, 3, 1, "", "plotMesh"], [437, 3, 1, "", "setLimits"], [437, 2, 1, "", "title"], [437, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkViewer": [[438, 1, 1, "", "VTKViewer"]], "fipy.viewers.vtkViewer.vtkViewer.VTKViewer": [[438, 3, 1, "", "plot"], [438, 3, 1, "", "plotMesh"], [438, 3, 1, "", "setLimits"], [438, 2, 1, "", "title"], [438, 2, 1, "", "vars"]], "package": [[448, 0, 0, "-", "subpackage"]], "package.subpackage": [[449, 0, 0, "-", "base"], [450, 0, 0, "-", "object"]], "package.subpackage.base": [[449, 1, 1, "", "Base"]], "package.subpackage.base.Base": [[449, 3, 1, "", "method1"], [449, 3, 1, "", "method2"]], "package.subpackage.object": [[450, 1, 1, "", "Object"]], "package.subpackage.object.Object": [[450, 3, 1, "", "method1"], [450, 3, 1, "", "method2"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:function", "5": "py:exception", "6": "py:attribute", "7": "std:cmdoption", "8": "std:envvar"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"], "7": ["std", "cmdoption", "program option"], "8": ["std", "envvar", "environment variable"]}, "titleterms": {"git": [0, 9, 11], "practic": 0, "branch": [0, 9, 11], "merg": 0, "chang": [0, 2, 8], "from": 0, "master": 0, "submit": 0, "code": 0, "review": 0, "refactor": 0, "complet": 0, "continu": 0, "integr": 0, "make": [0, 8], "releas": 0, "sourc": [0, 8, 21, 67, 442], "upload": 0, "updat": [0, 7, 188, 189, 190, 191], "conda": 0, "forg": 0, "feedstock": 0, "announc": 0, "fipi": [1, 7, 8, 11, 17, 20, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441], "packag": [1, 11, 13, 447, 448, 449, 450], "document": [1, 451], "log": [2, 17, 376], "version": [2, 29, 382], "3": 2, "4": 2, "256": 2, "g961ca499": 2, "pull": 2, "fix": [2, 17], "2022": 2, "06": 2, "15": 2, "2": [2, 17], "1": 2, "2020": 2, "08": 2, "01": 2, "02": 2, "14": 2, "2019": 2, "28": 2, "04": 2, "22": 2, "2017": 2, "17": 2, "2016": 2, "12": 2, "24": 2, "2015": 2, "2013": 2, "09": 2, "30": 2, "0": 2, "2012": 2, "10": 2, "03": 2, "16": 2, "2011": 2, "20": 2, "2010": 2, "05": 2, "2009": 2, "11": 2, "23": 2, "2008": 2, "2007": 2, "2006": 2, "2005": 2, "2004": 2, "contact": 3, "github": 3, "discuss": [3, 6], "issu": 3, "stackoverflow": 3, "mail": 3, "list": 3, "archiv": 3, "contributor": 4, "disclaim": 5, "effici": 6, "comparison": 6, "between": [6, 8], "cach": 6, "flag": [6, 17, 22], "pyspars": [6, 16, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], "trilino": [6, 16, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320], "exampl": [7, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "diffus": [7, 8, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 442], "convect": [7, 8, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 442], "phase": [7, 113, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "field": 7, "level": [7, 11, 21, 139], "set": [7, 11], "cahn": 7, "hilliard": 7, "fluid": 7, "flow": [7, 117, 118, 119], "reactiv": 7, "wet": 7, "frequent": 8, "ask": 8, "question": 8, "how": [8, 451], "do": 8, "i": 8, "repres": 8, "an": 8, "equat": [8, 17, 442, 443], "wai": 8, "model": 8, "anisotrop": 8, "process": 8, "more": 8, "gener": [8, 443], "coeffici": 8, "tensor": 8, "so": 8, "term": [8, 12, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 442], "take": 8, "form": 8, "partial_i": 8, "gamma_": 8, "ij": 8, "partial_j": 8, "phi": [8, 442], "doesn": 8, "t": [8, 15, 442], "involv": 8, "depend": 8, "variabl": [8, 17, 22, 106, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423], "transient": [8, 442], "what": 8, "my": 8, "where": 8, "put": 8, "m": 8, "solv": [8, 17], "can": 8, "see": 8, "export": 8, "data": 8, "save": 8, "plot": 8, "imag": 8, "onli": 8, "want": 8, "file": 8, "displai": 8, "screen": 8, "movi": 8, "why": 8, "viewer": [8, 18, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438], "look": 8, "iter": 8, "timestep": 8, "sweep": 8, "oh": 8, "distinct": 8, "cellvari": [8, 390], "facevari": [8, 398], "boundari": [8, 17, 442], "condit": [8, 17, 442], "doe": 8, "thi": 8, "error": 8, "messag": 8, "mean": 8, "": 8, "default": [8, 17], "behavior": 8, "tell": 8, "run": [8, 17], "parallel": [8, 17, 159], "don": [8, 15], "script": [8, 21], "work": 8, "anymor": 8, "isn": 8, "answer": 8, "here": 8, "usag": [9, 11], "client": [9, 11], "develop": [10, 11, 21], "guidelin": 10, "object": [10, 21, 450], "orient": [10, 21], "design": [10, 21], "program": [10, 21], "style": 10, "test": [10, 17, 21, 36, 41, 68, 78, 86, 104, 105, 116, 119, 124, 131, 146, 152, 153, 158, 168, 173, 179, 183, 186, 187, 199, 205, 243, 296, 353, 359, 360, 361, 362, 363, 380, 420, 428, 430, 435], "instal": [11, 13, 15], "pre": 11, "binder": 11, "recommend": 11, "method": [11, 442], "obtain": 11, "requir": 11, "python": [11, 17, 21], "numpi": 11, "option": 11, "gmsh": [11, 17], "scipi": [11, 16, 287, 288, 289, 290, 291, 292, 293, 294], "scikit": 11, "fmm": 11, "lsmlib": 11, "environ": [11, 17, 22], "nix": [11, 13], "get": [11, 13], "start": [11, 13], "addit": [11, 13], "us": [11, 12, 13, 17], "pip": [11, 13], "public": 14, "present": 14, "overview": 15, "even": 15, "you": 15, "read": [15, 451], "manual": [15, 17, 441], "download": 15, "support": 15, "convent": 15, "notat": 15, "solver": [16, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320], "petsc": 16, "pyamg": [16, 254, 255, 256, 257, 258, 259, 260, 261], "pyamgx": [16, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274], "command": [17, 22], "line": [17, 22, 140], "openmp": 17, "thread": 17, "v": 17, "mpi": 17, "rank": 17, "mesh": [17, 154, 155, 156, 157, 158, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252], "coupl": [17, 73], "vector": [17, 381], "appli": 17, "valu": 17, "dirichlet": 17, "gradient": 17, "neumann": 17, "flux": 17, "outlet": 17, "inlet": 17, "spatial": 17, "vari": 17, "robin": [17, 66], "intern": 17, "under": 17, "matplotlib": 18, "mayavi": 18, "virtual": 19, "kinet": 19, "materi": 19, "laboratori": 19, "content": 20, "implement": 21, "numer": [21, 444, 445], "approach": 21, "structur": 21, "base": [21, 449], "open": 21, "high": 21, "languag": 21, "extern": 22, "benchmark": [24, 25, 26, 27, 28, 29], "size": 26, "step": 27, "util": 28, "cahnhilliard": [30, 31, 32, 33, 34, 35, 36], "mesh2d": [31, 60, 111, 229], "mesh2dcoupl": 32, "mesh3d": 33, "sphere": [34, 157], "tanh1d": 35, "chemotaxi": [37, 38, 39, 40, 41], "input": [38, 98, 112], "input2d": 39, "paramet": 40, "advect": [43, 44, 45, 46, 121, 122, 123, 124, 125], "explicitupwind": 44, "implicitupwind": 45, "vanleerupwind": 46, "exponential1d": [47, 48, 49, 50, 51], "cylindricalmesh1d": 48, "cylindricalmesh1dnonuniform": 49, "mesh1d": [50, 53, 55, 64, 76, 80, 88, 89, 90, 109, 123, 129, 171, 228], "tri2d": [51, 56, 61, 65, 79, 248], "exponential1dback": [52, 53], "exponential1dsourc": [54, 55, 56], "exponential2d": [57, 58, 59, 60, 61], "cylindricalmesh2d": 58, "cylindricalmesh2dnonuniform": 59, "peclet": 62, "powerlaw1d": [63, 64, 65], "anisotropi": [70, 161], "circl": [71, 122, 127, 149, 170], "circlequad": 72, "electrostat": 74, "explicit": [75, 76, 77, 78, 79], "mixedel": 77, "mesh20x20": [81, 91, 92, 93, 94, 95, 96, 166], "mesh20x20coupl": 82, "nthorder": [83, 84, 85, 86], "input4thorder1d": 84, "input4thorder_lin": 85, "steadyst": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "inputperiod": 89, "tri2dinput": [90, 96, 99], "gmshinput": 92, "isotropi": 93, "modifiedmeshinput": 94, "orthoerror": 95, "mesh50x50": [97, 98, 99], "othermesh": [100, 101, 102, 103], "cubicalproblem": 101, "grid3dinput": 102, "prism": 103, "elphf": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116], "mesh1ddimension": 110, "phasediffus": 114, "poisson": 115, "stokescav": 118, "levelset": [120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], "trench": 125, "distancefunct": [126, 127, 128, 129, 130, 131], "interior": 128, "squar": [130, 151], "electrochem": [132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "adsorbingsurfactantequ": 133, "adsorpt": 134, "gapfilldistancevari": 135, "gapfillmesh": 136, "gold": 137, "howtowriteascript": 138, "matplotlibsurfactantview": 141, "mayavisurfactantview": 142, "metaliondiffusionequ": 143, "simpletrenchsystem": 144, "surfactantbulkdiffusionequ": 145, "trenchmesh": 147, "surfact": [148, 149, 150, 151, 152], "expandingcircl": 150, "gmshrefin": 155, "inputgrid2d": 156, "anisotropyold": 162, "binari": 163, "binarycoupl": 164, "imping": [165, 166, 167, 168], "mesh40x1": 167, "missorient": [169, 170, 171, 172, 173], "modcircl": 172, "polyxt": 174, "polyxtalcoupl": 175, "quaternari": 176, "simpl": 177, "symmetri": 178, "reactivewet": [180, 181, 182, 183], "liquidvapor1d": 181, "liquidvapor2d": 182, "riemann": [184, 185, 186], "acoust": 185, "update0_1to1_0": 189, "update1_0to2_0": 190, "update2_0to3_0": 191, "boundarycondit": [193, 194, 195, 196, 197, 198, 199], "constraint": 195, "fixedflux": 196, "fixedvalu": 197, "nthorderboundarycondit": 198, "matric": [200, 201, 202, 203, 204, 205, 206], "offsetsparsematrix": 201, "pysparsematrix": 202, "scipymatrix": 203, "sparsematrix": 204, "trilinosmatrix": 206, "abstractmesh": 208, "builder": [209, 210, 211, 212, 213, 214, 215], "abstractgridbuild": 210, "grid1dbuild": 211, "grid2dbuild": 212, "grid3dbuild": 213, "periodicgrid1dbuild": 214, "utilityclass": 215, "cylindricalgrid1d": 216, "cylindricalgrid2d": 217, "cylindricalnonuniformgrid1d": 218, "cylindricalnonuniformgrid2d": 219, "cylindricaluniformgrid1d": 220, "cylindricaluniformgrid2d": 221, "factorymesh": 222, "gmshmesh": 223, "grid1d": 224, "grid2d": 225, "grid3d": 226, "nonuniformgrid1d": 230, "nonuniformgrid2d": 231, "nonuniformgrid3d": 232, "periodicgrid1d": 233, "periodicgrid2d": 234, "periodicgrid3d": 235, "represent": [236, 237, 238, 239], "abstractrepresent": 237, "gridrepresent": 238, "meshrepresent": 239, "skewedgrid2d": 240, "sphericalnonuniformgrid1d": 241, "sphericaluniformgrid1d": 242, "topologi": [244, 245, 246, 247], "abstracttopologi": 245, "gridtopologi": 246, "meshtopologi": 247, "uniformgrid": 249, "uniformgrid1d": 250, "uniformgrid2d": 251, "uniformgrid3d": 252, "linearcgssolv": [255, 276, 289, 302], "lineargmressolv": [256, 268, 277, 290, 303], "lineargeneralsolv": 257, "linearlusolv": [258, 269, 279, 291, 304], "linearpcgsolv": [259, 280, 292, 305], "precondition": [260, 261, 270, 271, 281, 282, 283, 284, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "smoothedaggregationprecondition": 261, "aggregationamgsolv": 263, "classicalamgsolv": 264, "linearbicgstabsolv": [265, 288, 301], "linearcgsolv": 266, "linearfgmressolv": 267, "pyamgxsolv": 272, "smoother": [273, 274], "linearjorsolv": 278, "jacobiprecondition": [282, 309], "ssorprecondition": 284, "pysparsesolv": 285, "pysparsematrixsolv": 286, "scipykrylovsolv": 293, "scipysolv": 294, "comm": [298, 299, 300, 365, 366, 367], "epetracommwrapp": 299, "serialepetracommwrapp": 300, "domdecompprecondition": 307, "icprecondition": 308, "multilevelddmlprecondition": 310, "multilevelddprecondition": 311, "multilevelnssaprecondition": 312, "multilevelsaprecondition": 313, "multilevelsgsprecondition": 314, "multilevelsolversmootherprecondition": 315, "trilinosaztecoosolv": 317, "trilinosmltest": 318, "trilinosnonlinearsolv": 319, "trilinossolv": 320, "stepper": [321, 322, 323, 324], "pidstepp": 322, "pseudorkqsstepp": 323, "abstractbinaryterm": 326, "abstractconvectionterm": 327, "abstractdiffusionterm": 328, "abstractupwindconvectionterm": 329, "advectionterm": 330, "asymmetricconvectionterm": 331, "binaryterm": 332, "cellterm": 333, "centraldiffconvectionterm": 334, "coupledbinaryterm": 335, "diffusionterm": 336, "diffusiontermcorrect": 337, "diffusiontermnocorrect": 338, "explicitdiffusionterm": 339, "explicitsourceterm": 340, "explicitupwindconvectionterm": 341, "exponentialconvectionterm": 342, "faceterm": 343, "firstorderadvectionterm": 344, "hybridconvectionterm": 345, "implicitdiffusionterm": 346, "implicitsourceterm": 347, "nondiffusionterm": 348, "powerlawconvectionterm": 349, "residualterm": 350, "sourceterm": 351, "transientterm": 354, "unaryterm": 355, "upwindconvectionterm": 356, "vanleerconvectionterm": 357, "testfipi": 358, "doctestplu": 360, "lateimporttest": 361, "testprogram": 363, "tool": [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383], "commwrapp": 366, "dummycomm": 367, "debug": 368, "decor": 369, "dimens": [370, 371, 372, 373], "dictwithdefault": 371, "numberdict": 372, "physicalfield": 373, "dump": 374, "inlin": 375, "numerix": 377, "parser": 378, "sharedtempfil": 379, "vital": 383, "addoverfacesvari": 385, "arithmeticcelltofacevari": 386, "betanoisevari": 387, "binaryoperatorvari": 388, "celltofacevari": 389, "constant": 391, "constraintmask": 392, "coupledcellvari": 393, "distancevari": 394, "exponentialnoisevari": 395, "facegradcontributionsvari": 396, "facegradvari": 397, "gammanoisevari": 399, "gausscellgradvari": 400, "gaussiannoisevari": 401, "harmoniccelltofacevari": 402, "histogramvari": 403, "interfaceareavari": 404, "interfaceflagvari": 405, "leastsquarescellgradvari": 406, "levelsetdiffusionvari": 407, "meshvari": 408, "minmodcelltofacevari": 409, "modcellgradvari": 410, "modcelltofacevari": 411, "modfacegradvari": 412, "modphysicalfield": 413, "modularvari": 414, "noisevari": 415, "operatorvari": 416, "scharfettergummelfacevari": 417, "surfactantconvectionvari": 418, "surfactantvari": 419, "unaryoperatorvari": 421, "uniformnoisevari": 422, "matplotlibview": 425, "mayaviview": [426, 427, 428], "mayavicli": 427, "multiview": 429, "testinteract": 431, "tsvviewer": 432, "vtkviewer": [434, 435, 436, 437, 438], "vtkcellview": 436, "vtkfaceview": 437, "glossari": 439, "introduct": 440, "finit": 442, "volum": 442, "cell": 442, "center": 442, "fvm": 442, "cc": 442, "vertex": 442, "vc": 442, "discret": 442, "partial": 442, "rho": 442, "nabla": 442, "cdot": 442, "left": 442, "vec": 442, "u": 442, "right": 442, "gamma_1": 442, "higher": 442, "order": 442, "linear": 442, "conserv": 443, "theoret": 444, "background": 444, "scheme": 445, "refer": 446, "subpackag": [448, 449, 450], "modul": 451}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"Git practices": [[0, "git-practices"]], "Branches": [[0, "branches"]], "Merging changes from master to the branch": [[0, "merging-changes-from-master-to-the-branch"]], "Submit branch for code review": [[0, "submit-branch-for-code-review"]], "Refactoring complete: merge branch to master": [[0, "refactoring-complete-merge-branch-to-master"]], "Continuous Integration": [[0, "continuous-integration"]], "Making a Release": [[0, "making-a-release"]], "Source": [[0, "source"]], "Release from master": [[0, "release-from-master"]], "Upload": [[0, "upload"]], "Update conda-forge feedstock": [[0, "update-conda-forge-feedstock"]], "Announce": [[0, "announce"]], "fipy Package Documentation": [[1, "fipy-package-documentation"]], "Change Log": [[2, "change-log"]], "Version 3.4.4+256.g961ca499": [[2, "version-release"]], "Pulls": [[2, "pulls"], [2, "id7"], [2, "id52"], [2, "id61"], [2, "id67"], [2, "id80"], [2, "id98"], [2, "id171"]], "Fixes": [[2, "fixes"], [2, "id25"], [2, "id57"], [2, "id65"], [2, "id76"], [2, "id86"], [2, "id130"], [2, "id169"], [2, "id206"], [2, "id231"], [2, "id241"], [2, "id304"], [2, "id308"], [2, "id367"], [2, "id391"], [2, "id399"], [2, "id407"], [2, "id416"], [2, "id423"], [2, "id427"], [2, "id439"], [2, "id441"], [2, "id484"], [2, "id500"], [2, "id519"]], "Version 3.4.3 - 2022-06-15": [[2, "version-3-4-3-2022-06-15"]], "Version 3.4.2.1 - 2020-08-01": [[2, "version-3-4-2-1-2020-08-01"]], "Version 3.4.1 - 2020-02-14": [[2, "version-3-4-1-2020-02-14"]], "Version 3.4 - 2020-02-06": [[2, "version-3-4-2020-02-06"]], "Version 3.3 - 2019-06-28": [[2, "version-3-3-2019-06-28"]], "Version 3.2 - 2019-04-22": [[2, "version-3-2-2019-04-22"]], "Version 3.1.3 - 2017-01-17": [[2, "version-3-1-3-2017-01-17"]], "Version 3.1.2 - 2016-12-24": [[2, "version-3-1-2-2016-12-24"]], "Version 3.1.1 - 2015-12-17": [[2, "version-3-1-1-2015-12-17"]], "Version 3.1 - 2013-09-30": [[2, "version-3-1-2013-09-30"]], "Version 3.0.1 - 2012-10-03": [[2, "version-3-0-1-2012-10-03"]], "Version 3.0 - 2012-08-16": [[2, "version-3-0-2012-08-16"]], "Version 2.1.3 - 2012-01-17": [[2, "version-2-1-3-2012-01-17"]], "Version 2.1.2 - 2011-04-20": [[2, "version-2-1-2-2011-04-20"]], "Version 2.1.1 - 2010-10-05": [[2, "version-2-1-1-2010-10-05"]], "Version 2.1 - 2010-04-01": [[2, "version-2-1-2010-04-01"]], "Version 2.0.3 - 2010-03-17": [[2, "version-2-0-3-2010-03-17"]], "Version 2.0.2 - 2009-06-11": [[2, "version-2-0-2-2009-06-11"]], "Version 2.0.1 - 2009-04-23": [[2, "version-2-0-1-2009-04-23"]], "Version 2.0 - 2009-02-09": [[2, "version-2-0-2009-02-09"]], "Version 1.2.3 - 2009-01-0": [[2, "version-1-2-3-2009-01-0"]], "Version 1.2.2 - 2008-12-30": [[2, "version-1-2-2-2008-12-30"]], "Version 1.2.1 - 2008-02-08": [[2, "version-1-2-1-2008-02-08"]], "Version 1.2 - 2007-02-12": [[2, "version-1-2-2007-02-12"]], "Version 1.1 - 2006-06-06": [[2, "version-1-1-2006-06-06"]], "Version 1.0 - 2005-09-16": [[2, "version-1-0-2005-09-16"]], "Version 0.1.1": [[2, "version-0-1-1"]], "Version 0.1 - 2004-11-05": [[2, "version-0-1-2004-11-05"]], "Contact": [[3, "contact"]], "GitHub Discussions": [[3, "github-discussions"]], "GitHub Issues": [[3, "github-issues"]], "StackOverflow": [[3, "stackoverflow"]], "Mailing List": [[3, "mailing-list"]], "List Archive": [[3, "list-archive"]], "Contributors": [[4, "contributors"]], "Disclaimer": [[5, "disclaimer"]], "Efficiency": [[6, "efficiency"]], "Efficiency comparison between --no-cache and --cache flags": [[6, "efficiency-comparison-between-no-cache-and-cache-flags"]], "Efficiency discussion of Pysparse and Trilinos": [[6, "efficiency-discussion-of-pysparse-and-trilinos"]], "Examples": [[7, "examples"]], "Diffusion Examples": [[7, "diffusion-examples"]], "Convection Examples": [[7, "convection-examples"]], "Phase Field Examples": [[7, "phase-field-examples"]], "Level Set Examples": [[7, "level-set-examples"]], "Cahn-Hilliard Examples": [[7, "cahn-hilliard-examples"]], "Fluid Flow Examples": [[7, "fluid-flow-examples"]], "Reactive Wetting Examples": [[7, "reactive-wetting-examples"]], "Updating FiPy": [[7, "updating-fipy"]], "Frequently Asked Questions": [[8, "frequently-asked-questions"]], "How do I represent an equation in FiPy?": [[8, "how-do-i-represent-an-equation-in-fipy"]], "Is there a way to model an anisotropic diffusion process or more generally to represent the diffusion coefficient as a tensor so that the diffusion term takes the form \\partial_i \\Gamma_{ij}\\partial_j \\phi?": [[8, "is-there-a-way-to-model-an-anisotropic-diffusion-process-or-more-generally-to-represent-the-diffusion-coefficient-as-a-tensor-so-that-the-diffusion-term-takes-the-form-partial-i-gamma-ij-partial-j-phi"]], "How do I represent a \u2026 term that doesn\u2019t involve the dependent variable?": [[8, "how-do-i-represent-a-term-that-doesn-t-involve-the-dependent-variable"]], "How do I represent a diffusive source?": [[8, "how-do-i-represent-a-diffusive-source"]], "How do I represent a convective source?": [[8, "how-do-i-represent-a-convective-source"]], "How do I represent a transient source?": [[8, "how-do-i-represent-a-transient-source"]], "What if my term involves the dependent variable, but not where FiPy puts it?": [[8, "what-if-my-term-involves-the-dependent-variable-but-not-where-fipy-puts-it"]], "What if the coefficient of a term depends on the variable that I\u2019m solving for?": [[8, "what-if-the-coefficient-of-a-term-depends-on-the-variable-that-i-m-solving-for"]], "How can I see what I\u2019m doing?": [[8, "how-can-i-see-what-i-m-doing"]], "How do I export data?": [[8, "how-do-i-export-data"]], "How do I save a plot image?": [[8, "how-do-i-save-a-plot-image"]], "What if I only want the saved file, with no display on screen?": [[8, "what-if-i-only-want-the-saved-file-with-no-display-on-screen"]], "How do I make a movie?": [[8, "how-do-i-make-a-movie"]], "Why doesn\u2019t the Viewer look the way I want?": [[8, "why-doesn-t-the-viewer-look-the-way-i-want"]], "Iterations, timesteps, and sweeps? Oh, my!": [[8, "iterations-timesteps-and-sweeps-oh-my"]], "Why the distinction between CellVariable and FaceVariable coefficients?": [[8, "why-the-distinction-between-cellvariable-and-facevariable-coefficients"]], "How do I represent boundary conditions?": [[8, "how-do-i-represent-boundary-conditions"]], "What does this error message mean?": [[8, "what-does-this-error-message-mean"]], "How do I change FiPy\u2019s default behavior?": [[8, "how-do-i-change-fipy-s-default-behavior"]], "How can I tell if I\u2019m running in parallel?": [[8, "how-can-i-tell-if-i-m-running-in-parallel"]], "Why don\u2019t my scripts work anymore?": [[8, "why-don-t-my-scripts-work-anymore"]], "What if my question isn\u2019t answered here?": [[8, "what-if-my-question-isn-t-answered-here"]], "Git usage": [[9, "git-usage"], [11, "git-usage"]], "Git client": [[9, "git-client"], [11, "git-client"]], "Git branches": [[9, "git-branches"], [11, "git-branches"]], "Development Guidelines": [[10, "development-guidelines"]], "Object Oriented Design": [[10, "object-oriented-design"]], "Programming Style": [[10, "programming-style"]], "Testing": [[10, "testing"]], "Installation": [[11, "installation"]], "Pre-Installed on Binder": [[11, "pre-installed-on-binder"]], "Recommended Method": [[11, "recommended-method"]], "Obtaining FiPy": [[11, "obtaining-fipy"]], "Installing FiPy": [[11, "installing-fipy"]], "Required Packages": [[11, "required-packages"]], "Python": [[11, "python"]], "NumPy": [[11, "numpy"]], "Optional Packages": [[11, "optional-packages"]], "Gmsh": [[11, "gmsh"]], "SciPy": [[11, "scipy"], [16, "scipy"]], "Level Set Packages": [[11, "level-set-packages"]], "Scikit-fmm": [[11, "scikit-fmm"]], "LSMLIB": [[11, "lsmlib"]], "Development Environment": [[11, "development-environment"]], "Nix": [[11, "nix"]], "Nix Installation": [[11, "nix-installation"], [13, "nix-installation"]], "Getting Started with Nix": [[11, "getting-started-with-nix"], [13, "getting-started-with-nix"]], "Installing": [[11, "installing"], [13, "installing"]], "Additional Packages": [[11, "additional-packages"], [13, "additional-packages"]], "Using Pip": [[11, "using-pip"], [13, "using-pip"]], "Terms of Use": [[12, "terms-of-use"]], "Publications": [[14, "publications"]], "Presentations": [[14, "presentations"]], "Overview": [[15, "overview"]], "Even if you don\u2019t read manuals\u2026": [[15, "even-if-you-don-t-read-manuals"]], "Download and Installation": [[15, "download-and-installation"]], "Support": [[15, "support"]], "Conventions and Notation": [[15, "conventions-and-notation"]], "Solvers": [[16, "solvers"]], "PETSc": [[16, "petsc"]], "Pysparse": [[16, "pysparse"]], "PyAMG": [[16, "pyamg"]], "pyamgx": [[16, "pyamgx"]], "Trilinos": [[16, "trilinos"]], "Using FiPy": [[17, "using-fipy"]], "Logging": [[17, "logging"]], "Testing FiPy": [[17, "testing-fipy"]], "Parallel Tests": [[17, "parallel-tests"]], "Command-line Flags and Environment Variables": [[17, "command-line-flags-and-environment-variables"]], "Command-line Flags": [[17, "command-line-flags"]], "Environment Variables": [[17, "environment-variables"]], "Solving in Parallel": [[17, "solving-in-parallel"]], "OpenMP Threads vs. MPI Ranks": [[17, "openmp-threads-vs-mpi-ranks"]], "Meshing with Gmsh": [[17, "meshing-with-gmsh"]], "Coupled and Vector Equations": [[17, "coupled-and-vector-equations"]], "Boundary Conditions": [[17, "boundary-conditions"], [442, "boundary-conditions"]], "Default boundary conditions": [[17, "default-boundary-conditions"]], "Applying fixed value (Dirichlet) boundary conditions": [[17, "applying-fixed-value-dirichlet-boundary-conditions"]], "Applying fixed gradient boundary conditions (Neumann)": [[17, "applying-fixed-gradient-boundary-conditions-neumann"]], "Applying fixed flux boundary conditions": [[17, "applying-fixed-flux-boundary-conditions"]], "Applying outlet or inlet boundary conditions": [[17, "applying-outlet-or-inlet-boundary-conditions"]], "Applying spatially varying boundary conditions": [[17, "applying-spatially-varying-boundary-conditions"]], "Applying Robin boundary conditions": [[17, "applying-robin-boundary-conditions"]], "Applying internal \u201cboundary\u201d conditions": [[17, "applying-internal-boundary-conditions"]], "Internal fixed value": [[17, "internal-fixed-value"]], "Internal fixed gradient": [[17, "internal-fixed-gradient"]], "Internal Robin condition": [[17, "internal-robin-condition"]], "Running under Python 2": [[17, "running-under-python-2"]], "Manual": [[17, "manual"]], "Viewers": [[18, "viewers"]], "Matplotlib": [[18, "matplotlib"]], "Mayavi": [[18, "mayavi"]], "Virtual Kinetics of Materials Laboratory": [[19, "virtual-kinetics-of-materials-laboratory"]], "FiPy Contents": [[20, "fipy-contents"]], "Design and Implementation": [[21, "design-and-implementation"]], "Design": [[21, "design"]], "Numerical Approach": [[21, "numerical-approach"]], "Object Oriented Structure": [[21, "object-oriented-structure"]], "Test Based Development": [[21, "test-based-development"]], "Open Source": [[21, "open-source"]], "High-Level Scripting Language": [[21, "high-level-scripting-language"]], "Python Programming Language": [[21, "python-programming-language"]], "Implementation": [[21, "implementation"]], "External Command-line Flags": [[22, "external-command-line-flags"]], "External Environment Variables": [[22, "external-environment-variables"]], "examples": [[23, "module-examples"]], "examples.benchmarking": [[24, "module-examples.benchmarking"]], "examples.benchmarking.benchmarker": [[25, "module-examples.benchmarking.benchmarker"]], "examples.benchmarking.size": [[26, "module-examples.benchmarking.size"]], "examples.benchmarking.steps": [[27, "module-examples.benchmarking.steps"]], "examples.benchmarking.utils": [[28, "module-examples.benchmarking.utils"]], "examples.benchmarking.versions": [[29, "module-examples.benchmarking.versions"]], "examples.cahnHilliard": [[30, "module-examples.cahnHilliard"]], "examples.cahnHilliard.mesh2D": [[31, "module-examples.cahnHilliard.mesh2D"]], "examples.cahnHilliard.mesh2DCoupled": [[32, "module-examples.cahnHilliard.mesh2DCoupled"]], "examples.cahnHilliard.mesh3D": [[33, "module-examples.cahnHilliard.mesh3D"]], "examples.cahnHilliard.sphere": [[34, "module-examples.cahnHilliard.sphere"]], "examples.cahnHilliard.tanh1D": [[35, "module-examples.cahnHilliard.tanh1D"]], "examples.cahnHilliard.test": [[36, "module-examples.cahnHilliard.test"]], "examples.chemotaxis": [[37, "module-examples.chemotaxis"]], "examples.chemotaxis.input": [[38, "module-examples.chemotaxis.input"]], "examples.chemotaxis.input2D": [[39, "module-examples.chemotaxis.input2D"]], "examples.chemotaxis.parameters": [[40, "module-examples.chemotaxis.parameters"]], "examples.chemotaxis.test": [[41, "module-examples.chemotaxis.test"]], "examples.convection": [[42, "module-examples.convection"]], "examples.convection.advection": [[43, "module-examples.convection.advection"]], "examples.convection.advection.explicitUpwind": [[44, "module-examples.convection.advection.explicitUpwind"]], "examples.convection.advection.implicitUpwind": [[45, "module-examples.convection.advection.implicitUpwind"]], "examples.convection.advection.vanLeerUpwind": [[46, "module-examples.convection.advection.vanLeerUpwind"]], "examples.convection.exponential1D": [[47, "module-examples.convection.exponential1D"]], "examples.convection.exponential1D.cylindricalMesh1D": [[48, "module-examples.convection.exponential1D.cylindricalMesh1D"]], "examples.convection.exponential1D.cylindricalMesh1DNonUniform": [[49, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"]], "examples.convection.exponential1D.mesh1D": [[50, "module-examples.convection.exponential1D.mesh1D"]], "examples.convection.exponential1D.tri2D": [[51, "module-examples.convection.exponential1D.tri2D"]], "examples.convection.exponential1DBack": [[52, "module-examples.convection.exponential1DBack"]], "examples.convection.exponential1DBack.mesh1D": [[53, "module-examples.convection.exponential1DBack.mesh1D"]], "examples.convection.exponential1DSource": [[54, "module-examples.convection.exponential1DSource"]], "examples.convection.exponential1DSource.mesh1D": [[55, "module-examples.convection.exponential1DSource.mesh1D"]], "examples.convection.exponential1DSource.tri2D": [[56, "module-examples.convection.exponential1DSource.tri2D"]], "examples.convection.exponential2D": [[57, "module-examples.convection.exponential2D"]], "examples.convection.exponential2D.cylindricalMesh2D": [[58, "module-examples.convection.exponential2D.cylindricalMesh2D"]], "examples.convection.exponential2D.cylindricalMesh2DNonUniform": [[59, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"]], "examples.convection.exponential2D.mesh2D": [[60, "module-examples.convection.exponential2D.mesh2D"]], "examples.convection.exponential2D.tri2D": [[61, "module-examples.convection.exponential2D.tri2D"]], "examples.convection.peclet": [[62, "module-examples.convection.peclet"]], "examples.convection.powerLaw1D": [[63, "module-examples.convection.powerLaw1D"]], "examples.convection.powerLaw1D.mesh1D": [[64, "module-examples.convection.powerLaw1D.mesh1D"]], "examples.convection.powerLaw1D.tri2D": [[65, "module-examples.convection.powerLaw1D.tri2D"]], "examples.convection.robin": [[66, "module-examples.convection.robin"]], "examples.convection.source": [[67, "module-examples.convection.source"]], "examples.convection.test": [[68, "module-examples.convection.test"]], "examples.diffusion": [[69, "module-examples.diffusion"]], "examples.diffusion.anisotropy": [[70, "module-examples.diffusion.anisotropy"]], "examples.diffusion.circle": [[71, "module-examples.diffusion.circle"]], "examples.diffusion.circleQuad": [[72, "module-examples.diffusion.circleQuad"]], "examples.diffusion.coupled": [[73, "module-examples.diffusion.coupled"]], "examples.diffusion.electrostatics": [[74, "module-examples.diffusion.electrostatics"]], "examples.diffusion.explicit": [[75, "module-examples.diffusion.explicit"]], "examples.diffusion.explicit.mesh1D": [[76, "module-examples.diffusion.explicit.mesh1D"]], "examples.diffusion.explicit.mixedelement": [[77, "module-examples.diffusion.explicit.mixedelement"]], "examples.diffusion.explicit.test": [[78, "module-examples.diffusion.explicit.test"]], "examples.diffusion.explicit.tri2D": [[79, "module-examples.diffusion.explicit.tri2D"]], "examples.diffusion.mesh1D": [[80, "module-examples.diffusion.mesh1D"]], "examples.diffusion.mesh20x20": [[81, "module-examples.diffusion.mesh20x20"]], "examples.diffusion.mesh20x20Coupled": [[82, "module-examples.diffusion.mesh20x20Coupled"]], "examples.diffusion.nthOrder": [[83, "module-examples.diffusion.nthOrder"]], "examples.diffusion.nthOrder.input4thOrder1D": [[84, "module-examples.diffusion.nthOrder.input4thOrder1D"]], "examples.diffusion.nthOrder.input4thOrder_line": [[85, "module-examples.diffusion.nthOrder.input4thOrder_line"]], "examples.diffusion.nthOrder.test": [[86, "module-examples.diffusion.nthOrder.test"]], "examples.diffusion.steadyState": [[87, "module-examples.diffusion.steadyState"]], "examples.diffusion.steadyState.mesh1D": [[88, "module-examples.diffusion.steadyState.mesh1D"]], "examples.diffusion.steadyState.mesh1D.inputPeriodic": [[89, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"]], "examples.diffusion.steadyState.mesh1D.tri2Dinput": [[90, "module-examples.diffusion.steadyState.mesh1D.tri2Dinput"]], "examples.diffusion.steadyState.mesh20x20": [[91, "module-examples.diffusion.steadyState.mesh20x20"]], "examples.diffusion.steadyState.mesh20x20.gmshinput": [[92, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"]], "examples.diffusion.steadyState.mesh20x20.isotropy": [[93, "module-examples.diffusion.steadyState.mesh20x20.isotropy"]], "examples.diffusion.steadyState.mesh20x20.modifiedMeshInput": [[94, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"]], "examples.diffusion.steadyState.mesh20x20.orthoerror": [[95, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"]], "examples.diffusion.steadyState.mesh20x20.tri2Dinput": [[96, "module-examples.diffusion.steadyState.mesh20x20.tri2Dinput"]], "examples.diffusion.steadyState.mesh50x50": [[97, "module-examples.diffusion.steadyState.mesh50x50"]], "examples.diffusion.steadyState.mesh50x50.input": [[98, "module-examples.diffusion.steadyState.mesh50x50.input"]], "examples.diffusion.steadyState.mesh50x50.tri2Dinput": [[99, "module-examples.diffusion.steadyState.mesh50x50.tri2Dinput"]], "examples.diffusion.steadyState.otherMeshes": [[100, "module-examples.diffusion.steadyState.otherMeshes"]], "examples.diffusion.steadyState.otherMeshes.cubicalProblem": [[101, "module-examples.diffusion.steadyState.otherMeshes.cubicalProblem"]], "examples.diffusion.steadyState.otherMeshes.grid3Dinput": [[102, "module-examples.diffusion.steadyState.otherMeshes.grid3Dinput"]], "examples.diffusion.steadyState.otherMeshes.prism": [[103, "module-examples.diffusion.steadyState.otherMeshes.prism"]], "examples.diffusion.steadyState.test": [[104, "module-examples.diffusion.steadyState.test"]], "examples.diffusion.test": [[105, "module-examples.diffusion.test"]], "examples.diffusion.variable": [[106, "module-examples.diffusion.variable"]], "examples.elphf": [[107, "module-examples.elphf"]], "examples.elphf.diffusion": [[108, "module-examples.elphf.diffusion"]], "examples.elphf.diffusion.mesh1D": [[109, "module-examples.elphf.diffusion.mesh1D"]], "examples.elphf.diffusion.mesh1Ddimensional": [[110, "module-examples.elphf.diffusion.mesh1Ddimensional"]], "examples.elphf.diffusion.mesh2D": [[111, "module-examples.elphf.diffusion.mesh2D"]], "examples.elphf.input": [[112, "module-examples.elphf.input"]], "examples.elphf.phase": [[113, "module-examples.elphf.phase"]], "examples.elphf.phaseDiffusion": [[114, "module-examples.elphf.phaseDiffusion"]], "examples.elphf.poisson": [[115, "module-examples.elphf.poisson"]], "examples.elphf.test": [[116, "module-examples.elphf.test"]], "examples.flow": [[117, "module-examples.flow"]], "examples.flow.stokesCavity": [[118, "module-examples.flow.stokesCavity"]], "examples.flow.test": [[119, "module-examples.flow.test"]], "examples.levelSet": [[120, "module-examples.levelSet"]], "examples.levelSet.advection": [[121, "module-examples.levelSet.advection"]], "examples.levelSet.advection.circle": [[122, "module-examples.levelSet.advection.circle"]], "examples.levelSet.advection.mesh1D": [[123, "module-examples.levelSet.advection.mesh1D"]], "examples.levelSet.advection.test": [[124, "module-examples.levelSet.advection.test"]], "examples.levelSet.advection.trench": [[125, "module-examples.levelSet.advection.trench"]], "examples.levelSet.distanceFunction": [[126, "module-examples.levelSet.distanceFunction"]], "examples.levelSet.distanceFunction.circle": [[127, "module-examples.levelSet.distanceFunction.circle"]], "examples.levelSet.distanceFunction.interior": [[128, "module-examples.levelSet.distanceFunction.interior"]], "examples.levelSet.distanceFunction.mesh1D": [[129, "module-examples.levelSet.distanceFunction.mesh1D"]], "examples.levelSet.distanceFunction.square": [[130, "module-examples.levelSet.distanceFunction.square"]], "examples.levelSet.distanceFunction.test": [[131, "module-examples.levelSet.distanceFunction.test"]], "examples.levelSet.electroChem": [[132, "module-examples.levelSet.electroChem"]], "examples.levelSet.electroChem.adsorbingSurfactantEquation": [[133, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"]], "examples.levelSet.electroChem.adsorption": [[134, "module-examples.levelSet.electroChem.adsorption"]], "examples.levelSet.electroChem.gapFillDistanceVariable": [[135, "module-examples.levelSet.electroChem.gapFillDistanceVariable"]], "examples.levelSet.electroChem.gapFillMesh": [[136, "module-examples.levelSet.electroChem.gapFillMesh"]], "examples.levelSet.electroChem.gold": [[137, "module-examples.levelSet.electroChem.gold"]], "examples.levelSet.electroChem.howToWriteAScript": [[138, "module-examples.levelSet.electroChem.howToWriteAScript"]], "examples.levelSet.electroChem.leveler": [[139, "module-examples.levelSet.electroChem.leveler"]], "examples.levelSet.electroChem.lines": [[140, "module-examples.levelSet.electroChem.lines"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer": [[141, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"]], "examples.levelSet.electroChem.mayaviSurfactantViewer": [[142, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"]], "examples.levelSet.electroChem.metalIonDiffusionEquation": [[143, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"]], "examples.levelSet.electroChem.simpleTrenchSystem": [[144, "module-examples.levelSet.electroChem.simpleTrenchSystem"]], "examples.levelSet.electroChem.surfactantBulkDiffusionEquation": [[145, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"]], "examples.levelSet.electroChem.test": [[146, "module-examples.levelSet.electroChem.test"]], "examples.levelSet.electroChem.trenchMesh": [[147, "module-examples.levelSet.electroChem.trenchMesh"]], "examples.levelSet.surfactant": [[148, "module-examples.levelSet.surfactant"]], "examples.levelSet.surfactant.circle": [[149, "module-examples.levelSet.surfactant.circle"]], "examples.levelSet.surfactant.expandingCircle": [[150, "module-examples.levelSet.surfactant.expandingCircle"]], "examples.levelSet.surfactant.square": [[151, "module-examples.levelSet.surfactant.square"]], "examples.levelSet.surfactant.test": [[152, "module-examples.levelSet.surfactant.test"]], "examples.levelSet.test": [[153, "module-examples.levelSet.test"]], "examples.meshing": [[154, "module-examples.meshing"]], "examples.meshing.gmshRefinement": [[155, "module-examples.meshing.gmshRefinement"]], "examples.meshing.inputGrid2D": [[156, "module-examples.meshing.inputGrid2D"]], "examples.meshing.sphere": [[157, "module-examples.meshing.sphere"]], "examples.meshing.test": [[158, "module-examples.meshing.test"]], "examples.parallel": [[159, "module-examples.parallel"]], "examples.phase": [[160, "module-examples.phase"]], "examples.phase.anisotropy": [[161, "module-examples.phase.anisotropy"]], "examples.phase.anisotropyOLD": [[162, "module-examples.phase.anisotropyOLD"]], "examples.phase.binary": [[163, "module-examples.phase.binary"]], "examples.phase.binaryCoupled": [[164, "module-examples.phase.binaryCoupled"]], "examples.phase.impingement": [[165, "module-examples.phase.impingement"]], "examples.phase.impingement.mesh20x20": [[166, "module-examples.phase.impingement.mesh20x20"]], "examples.phase.impingement.mesh40x1": [[167, "module-examples.phase.impingement.mesh40x1"]], "examples.phase.impingement.test": [[168, "module-examples.phase.impingement.test"]], "examples.phase.missOrientation": [[169, "module-examples.phase.missOrientation"]], "examples.phase.missOrientation.circle": [[170, "module-examples.phase.missOrientation.circle"]], "examples.phase.missOrientation.mesh1D": [[171, "module-examples.phase.missOrientation.mesh1D"]], "examples.phase.missOrientation.modCircle": [[172, "module-examples.phase.missOrientation.modCircle"]], "examples.phase.missOrientation.test": [[173, "module-examples.phase.missOrientation.test"]], "examples.phase.polyxtal": [[174, "module-examples.phase.polyxtal"]], "examples.phase.polyxtalCoupled": [[175, "module-examples.phase.polyxtalCoupled"]], "examples.phase.quaternary": [[176, "module-examples.phase.quaternary"]], "examples.phase.simple": [[177, "module-examples.phase.simple"]], "examples.phase.symmetry": [[178, "module-examples.phase.symmetry"]], "examples.phase.test": [[179, "module-examples.phase.test"]], "examples.reactiveWetting": [[180, "module-examples.reactiveWetting"]], "examples.reactiveWetting.liquidVapor1D": [[181, "module-examples.reactiveWetting.liquidVapor1D"]], "examples.reactiveWetting.liquidVapor2D": [[182, "module-examples.reactiveWetting.liquidVapor2D"]], "examples.reactiveWetting.test": [[183, "module-examples.reactiveWetting.test"]], "examples.riemann": [[184, "module-examples.riemann"]], "examples.riemann.acoustics": [[185, "module-examples.riemann.acoustics"]], "examples.riemann.test": [[186, "module-examples.riemann.test"]], "examples.test": [[187, "module-examples.test"]], "examples.updating": [[188, "module-examples.updating"]], "examples.updating.update0_1to1_0": [[189, "module-examples.updating.update0_1to1_0"]], "examples.updating.update1_0to2_0": [[190, "module-examples.updating.update1_0to2_0"]], "examples.updating.update2_0to3_0": [[191, "module-examples.updating.update2_0to3_0"]], "fipy": [[192, "module-fipy"]], "fipy.boundaryConditions": [[193, "module-fipy.boundaryConditions"]], "fipy.boundaryConditions.boundaryCondition": [[194, "module-fipy.boundaryConditions.boundaryCondition"]], "fipy.boundaryConditions.constraint": [[195, "module-fipy.boundaryConditions.constraint"]], "fipy.boundaryConditions.fixedFlux": [[196, "module-fipy.boundaryConditions.fixedFlux"]], "fipy.boundaryConditions.fixedValue": [[197, "module-fipy.boundaryConditions.fixedValue"]], "fipy.boundaryConditions.nthOrderBoundaryCondition": [[198, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"]], "fipy.boundaryConditions.test": [[199, "module-fipy.boundaryConditions.test"]], "fipy.matrices": [[200, "module-fipy.matrices"]], "fipy.matrices.offsetSparseMatrix": [[201, "module-fipy.matrices.offsetSparseMatrix"]], "fipy.matrices.pysparseMatrix": [[202, "module-fipy.matrices.pysparseMatrix"]], "fipy.matrices.scipyMatrix": [[203, "module-fipy.matrices.scipyMatrix"]], "fipy.matrices.sparseMatrix": [[204, "module-fipy.matrices.sparseMatrix"]], "fipy.matrices.test": [[205, "module-fipy.matrices.test"]], "fipy.matrices.trilinosMatrix": [[206, "module-fipy.matrices.trilinosMatrix"]], "fipy.meshes": [[207, "module-fipy.meshes"]], "fipy.meshes.abstractMesh": [[208, "module-fipy.meshes.abstractMesh"]], "fipy.meshes.builders": [[209, "module-fipy.meshes.builders"]], "fipy.meshes.builders.abstractGridBuilder": [[210, "module-fipy.meshes.builders.abstractGridBuilder"]], "fipy.meshes.builders.grid1DBuilder": [[211, "module-fipy.meshes.builders.grid1DBuilder"]], "fipy.meshes.builders.grid2DBuilder": [[212, "module-fipy.meshes.builders.grid2DBuilder"]], "fipy.meshes.builders.grid3DBuilder": [[213, "module-fipy.meshes.builders.grid3DBuilder"]], "fipy.meshes.builders.periodicGrid1DBuilder": [[214, "module-fipy.meshes.builders.periodicGrid1DBuilder"]], "fipy.meshes.builders.utilityClasses": [[215, "module-fipy.meshes.builders.utilityClasses"]], "fipy.meshes.cylindricalGrid1D": [[216, "module-fipy.meshes.cylindricalGrid1D"]], "fipy.meshes.cylindricalGrid2D": [[217, "module-fipy.meshes.cylindricalGrid2D"]], "fipy.meshes.cylindricalNonUniformGrid1D": [[218, "module-fipy.meshes.cylindricalNonUniformGrid1D"]], "fipy.meshes.cylindricalNonUniformGrid2D": [[219, "module-fipy.meshes.cylindricalNonUniformGrid2D"]], "fipy.meshes.cylindricalUniformGrid1D": [[220, "module-fipy.meshes.cylindricalUniformGrid1D"]], "fipy.meshes.cylindricalUniformGrid2D": [[221, "module-fipy.meshes.cylindricalUniformGrid2D"]], "fipy.meshes.factoryMeshes": [[222, "module-fipy.meshes.factoryMeshes"]], "fipy.meshes.gmshMesh": [[223, "module-fipy.meshes.gmshMesh"]], "fipy.meshes.grid1D": [[224, "module-fipy.meshes.grid1D"]], "fipy.meshes.grid2D": [[225, "module-fipy.meshes.grid2D"]], "fipy.meshes.grid3D": [[226, "module-fipy.meshes.grid3D"]], "fipy.meshes.mesh": [[227, "module-fipy.meshes.mesh"]], "fipy.meshes.mesh1D": [[228, "module-fipy.meshes.mesh1D"]], "fipy.meshes.mesh2D": [[229, "module-fipy.meshes.mesh2D"]], "fipy.meshes.nonUniformGrid1D": [[230, "module-fipy.meshes.nonUniformGrid1D"]], "fipy.meshes.nonUniformGrid2D": [[231, "module-fipy.meshes.nonUniformGrid2D"]], "fipy.meshes.nonUniformGrid3D": [[232, "module-fipy.meshes.nonUniformGrid3D"]], "fipy.meshes.periodicGrid1D": [[233, "module-fipy.meshes.periodicGrid1D"]], "fipy.meshes.periodicGrid2D": [[234, "module-fipy.meshes.periodicGrid2D"]], "fipy.meshes.periodicGrid3D": [[235, "module-fipy.meshes.periodicGrid3D"]], "fipy.meshes.representations": [[236, "module-fipy.meshes.representations"]], "fipy.meshes.representations.abstractRepresentation": [[237, "module-fipy.meshes.representations.abstractRepresentation"]], "fipy.meshes.representations.gridRepresentation": [[238, "module-fipy.meshes.representations.gridRepresentation"]], "fipy.meshes.representations.meshRepresentation": [[239, "module-fipy.meshes.representations.meshRepresentation"]], "fipy.meshes.skewedGrid2D": [[240, "module-fipy.meshes.skewedGrid2D"]], "fipy.meshes.sphericalNonUniformGrid1D": [[241, "module-fipy.meshes.sphericalNonUniformGrid1D"]], "fipy.meshes.sphericalUniformGrid1D": [[242, "module-fipy.meshes.sphericalUniformGrid1D"]], "fipy.meshes.test": [[243, "module-fipy.meshes.test"]], "fipy.meshes.topologies": [[244, "module-fipy.meshes.topologies"]], "fipy.meshes.topologies.abstractTopology": [[245, "module-fipy.meshes.topologies.abstractTopology"]], "fipy.meshes.topologies.gridTopology": [[246, "module-fipy.meshes.topologies.gridTopology"]], "fipy.meshes.topologies.meshTopology": [[247, "module-fipy.meshes.topologies.meshTopology"]], "fipy.meshes.tri2D": [[248, "module-fipy.meshes.tri2D"]], "fipy.meshes.uniformGrid": [[249, "module-fipy.meshes.uniformGrid"]], "fipy.meshes.uniformGrid1D": [[250, "module-fipy.meshes.uniformGrid1D"]], "fipy.meshes.uniformGrid2D": [[251, "module-fipy.meshes.uniformGrid2D"]], "fipy.meshes.uniformGrid3D": [[252, "module-fipy.meshes.uniformGrid3D"]], "fipy.solvers": [[253, "module-fipy.solvers"]], "fipy.solvers.pyAMG": [[254, "module-fipy.solvers.pyAMG"]], "fipy.solvers.pyAMG.linearCGSSolver": [[255, "module-fipy.solvers.pyAMG.linearCGSSolver"]], "fipy.solvers.pyAMG.linearGMRESSolver": [[256, "module-fipy.solvers.pyAMG.linearGMRESSolver"]], "fipy.solvers.pyAMG.linearGeneralSolver": [[257, "module-fipy.solvers.pyAMG.linearGeneralSolver"]], "fipy.solvers.pyAMG.linearLUSolver": [[258, "module-fipy.solvers.pyAMG.linearLUSolver"]], "fipy.solvers.pyAMG.linearPCGSolver": [[259, "module-fipy.solvers.pyAMG.linearPCGSolver"]], "fipy.solvers.pyAMG.preconditioners": [[260, "module-fipy.solvers.pyAMG.preconditioners"]], "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner": [[261, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[262, "module-fipy.solvers.pyamgx"]], "fipy.solvers.pyamgx.aggregationAMGSolver": [[263, "module-fipy.solvers.pyamgx.aggregationAMGSolver"]], "fipy.solvers.pyamgx.classicalAMGSolver": [[264, "module-fipy.solvers.pyamgx.classicalAMGSolver"]], "fipy.solvers.pyamgx.linearBiCGStabSolver": [[265, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"]], "fipy.solvers.pyamgx.linearCGSolver": [[266, "module-fipy.solvers.pyamgx.linearCGSolver"]], "fipy.solvers.pyamgx.linearFGMRESSolver": [[267, "module-fipy.solvers.pyamgx.linearFGMRESSolver"]], "fipy.solvers.pyamgx.linearGMRESSolver": [[268, "module-fipy.solvers.pyamgx.linearGMRESSolver"]], "fipy.solvers.pyamgx.linearLUSolver": [[269, "module-fipy.solvers.pyamgx.linearLUSolver"]], "fipy.solvers.pyamgx.preconditioners": [[270, "module-fipy.solvers.pyamgx.preconditioners"]], "fipy.solvers.pyamgx.preconditioners.preconditioners": [[271, "module-fipy.solvers.pyamgx.preconditioners.preconditioners"]], "fipy.solvers.pyamgx.pyAMGXSolver": [[272, "module-fipy.solvers.pyamgx.pyAMGXSolver"]], "fipy.solvers.pyamgx.smoothers": [[273, "module-fipy.solvers.pyamgx.smoothers"]], "fipy.solvers.pyamgx.smoothers.smoothers": [[274, "module-fipy.solvers.pyamgx.smoothers.smoothers"]], "fipy.solvers.pysparse": [[275, "module-fipy.solvers.pysparse"]], "fipy.solvers.pysparse.linearCGSSolver": [[276, "module-fipy.solvers.pysparse.linearCGSSolver"]], "fipy.solvers.pysparse.linearGMRESSolver": [[277, "module-fipy.solvers.pysparse.linearGMRESSolver"]], "fipy.solvers.pysparse.linearJORSolver": [[278, "module-fipy.solvers.pysparse.linearJORSolver"]], "fipy.solvers.pysparse.linearLUSolver": [[279, "module-fipy.solvers.pysparse.linearLUSolver"]], "fipy.solvers.pysparse.linearPCGSolver": [[280, "module-fipy.solvers.pysparse.linearPCGSolver"]], "fipy.solvers.pysparse.preconditioners": [[281, "module-fipy.solvers.pysparse.preconditioners"]], "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner": [[282, "module-fipy.solvers.pysparse.preconditioners.jacobiPreconditioner"]], "fipy.solvers.pysparse.preconditioners.preconditioner": [[283, "module-fipy.solvers.pysparse.preconditioners.preconditioner"]], "fipy.solvers.pysparse.preconditioners.ssorPreconditioner": [[284, "module-fipy.solvers.pysparse.preconditioners.ssorPreconditioner"]], "fipy.solvers.pysparse.pysparseSolver": [[285, "module-fipy.solvers.pysparse.pysparseSolver"]], "fipy.solvers.pysparseMatrixSolver": [[286, "module-fipy.solvers.pysparseMatrixSolver"]], "fipy.solvers.scipy": [[287, "module-fipy.solvers.scipy"]], "fipy.solvers.scipy.linearBicgstabSolver": [[288, "module-fipy.solvers.scipy.linearBicgstabSolver"]], "fipy.solvers.scipy.linearCGSSolver": [[289, "module-fipy.solvers.scipy.linearCGSSolver"]], "fipy.solvers.scipy.linearGMRESSolver": [[290, "module-fipy.solvers.scipy.linearGMRESSolver"]], "fipy.solvers.scipy.linearLUSolver": [[291, "module-fipy.solvers.scipy.linearLUSolver"]], "fipy.solvers.scipy.linearPCGSolver": [[292, "module-fipy.solvers.scipy.linearPCGSolver"]], "fipy.solvers.scipy.scipyKrylovSolver": [[293, "module-fipy.solvers.scipy.scipyKrylovSolver"]], "fipy.solvers.scipy.scipySolver": [[294, "module-fipy.solvers.scipy.scipySolver"]], "fipy.solvers.solver": [[295, "module-fipy.solvers.solver"]], "fipy.solvers.test": [[296, "module-fipy.solvers.test"]], "fipy.solvers.trilinos": [[297, "module-fipy.solvers.trilinos"]], "fipy.solvers.trilinos.comms": [[298, "module-fipy.solvers.trilinos.comms"]], "fipy.solvers.trilinos.comms.epetraCommWrapper": [[299, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper": [[300, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"]], "fipy.solvers.trilinos.linearBicgstabSolver": [[301, "module-fipy.solvers.trilinos.linearBicgstabSolver"]], "fipy.solvers.trilinos.linearCGSSolver": [[302, "module-fipy.solvers.trilinos.linearCGSSolver"]], "fipy.solvers.trilinos.linearGMRESSolver": [[303, "module-fipy.solvers.trilinos.linearGMRESSolver"]], "fipy.solvers.trilinos.linearLUSolver": [[304, "module-fipy.solvers.trilinos.linearLUSolver"]], "fipy.solvers.trilinos.linearPCGSolver": [[305, "module-fipy.solvers.trilinos.linearPCGSolver"]], "fipy.solvers.trilinos.preconditioners": [[306, "module-fipy.solvers.trilinos.preconditioners"]], "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner": [[307, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icPreconditioner": [[308, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner": [[309, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner": [[310, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner": [[311, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner": [[312, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner": [[313, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner": [[314, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner": [[315, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.preconditioner": [[316, "module-fipy.solvers.trilinos.preconditioners.preconditioner"]], "fipy.solvers.trilinos.trilinosAztecOOSolver": [[317, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"]], "fipy.solvers.trilinos.trilinosMLTest": [[318, "module-fipy.solvers.trilinos.trilinosMLTest"]], "fipy.solvers.trilinos.trilinosNonlinearSolver": [[319, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"]], "fipy.solvers.trilinos.trilinosSolver": [[320, "module-fipy.solvers.trilinos.trilinosSolver"]], "fipy.steppers": [[321, "module-fipy.steppers"]], "fipy.steppers.pidStepper": [[322, "module-fipy.steppers.pidStepper"]], "fipy.steppers.pseudoRKQSStepper": [[323, "module-fipy.steppers.pseudoRKQSStepper"]], "fipy.steppers.stepper": [[324, "module-fipy.steppers.stepper"]], "fipy.terms": [[325, "module-fipy.terms"]], "fipy.terms.abstractBinaryTerm": [[326, "module-fipy.terms.abstractBinaryTerm"]], "fipy.terms.abstractConvectionTerm": [[327, "module-fipy.terms.abstractConvectionTerm"]], "fipy.terms.abstractDiffusionTerm": [[328, "module-fipy.terms.abstractDiffusionTerm"]], "fipy.terms.abstractUpwindConvectionTerm": [[329, "module-fipy.terms.abstractUpwindConvectionTerm"]], "fipy.terms.advectionTerm": [[330, "module-fipy.terms.advectionTerm"]], "fipy.terms.asymmetricConvectionTerm": [[331, "module-fipy.terms.asymmetricConvectionTerm"]], "fipy.terms.binaryTerm": [[332, "module-fipy.terms.binaryTerm"]], "fipy.terms.cellTerm": [[333, "module-fipy.terms.cellTerm"]], "fipy.terms.centralDiffConvectionTerm": [[334, "module-fipy.terms.centralDiffConvectionTerm"]], "fipy.terms.coupledBinaryTerm": [[335, "module-fipy.terms.coupledBinaryTerm"]], "fipy.terms.diffusionTerm": [[336, "module-fipy.terms.diffusionTerm"]], "fipy.terms.diffusionTermCorrection": [[337, "module-fipy.terms.diffusionTermCorrection"]], "fipy.terms.diffusionTermNoCorrection": [[338, "module-fipy.terms.diffusionTermNoCorrection"]], "fipy.terms.explicitDiffusionTerm": [[339, "module-fipy.terms.explicitDiffusionTerm"]], "fipy.terms.explicitSourceTerm": [[340, "module-fipy.terms.explicitSourceTerm"]], "fipy.terms.explicitUpwindConvectionTerm": [[341, "module-fipy.terms.explicitUpwindConvectionTerm"]], "fipy.terms.exponentialConvectionTerm": [[342, "module-fipy.terms.exponentialConvectionTerm"]], "fipy.terms.faceTerm": [[343, "module-fipy.terms.faceTerm"]], "fipy.terms.firstOrderAdvectionTerm": [[344, "module-fipy.terms.firstOrderAdvectionTerm"]], "fipy.terms.hybridConvectionTerm": [[345, "module-fipy.terms.hybridConvectionTerm"]], "fipy.terms.implicitDiffusionTerm": [[346, "module-fipy.terms.implicitDiffusionTerm"]], "fipy.terms.implicitSourceTerm": [[347, "module-fipy.terms.implicitSourceTerm"]], "fipy.terms.nonDiffusionTerm": [[348, "module-fipy.terms.nonDiffusionTerm"]], "fipy.terms.powerLawConvectionTerm": [[349, "module-fipy.terms.powerLawConvectionTerm"]], "fipy.terms.residualTerm": [[350, "module-fipy.terms.residualTerm"]], "fipy.terms.sourceTerm": [[351, "module-fipy.terms.sourceTerm"]], "fipy.terms.term": [[352, "module-fipy.terms.term"]], "fipy.terms.test": [[353, "module-fipy.terms.test"]], "fipy.terms.transientTerm": [[354, "module-fipy.terms.transientTerm"]], "fipy.terms.unaryTerm": [[355, "module-fipy.terms.unaryTerm"]], "fipy.terms.upwindConvectionTerm": [[356, "module-fipy.terms.upwindConvectionTerm"]], "fipy.terms.vanLeerConvectionTerm": [[357, "module-fipy.terms.vanLeerConvectionTerm"]], "fipy.testFiPy": [[358, "module-fipy.testFiPy"]], "fipy.tests": [[359, "module-fipy.tests"]], "fipy.tests.doctestPlus": [[360, "module-fipy.tests.doctestPlus"]], "fipy.tests.lateImportTest": [[361, "module-fipy.tests.lateImportTest"]], "fipy.tests.test": [[362, "module-fipy.tests.test"]], "fipy.tests.testProgram": [[363, "module-fipy.tests.testProgram"]], "fipy.tools": [[364, "module-fipy.tools"]], "fipy.tools.comms": [[365, "module-fipy.tools.comms"]], "fipy.tools.comms.commWrapper": [[366, "module-fipy.tools.comms.commWrapper"]], "fipy.tools.comms.dummyComm": [[367, "module-fipy.tools.comms.dummyComm"]], "fipy.tools.debug": [[368, "module-fipy.tools.debug"]], "fipy.tools.decorators": [[369, "module-fipy.tools.decorators"]], "fipy.tools.dimensions": [[370, "module-fipy.tools.dimensions"]], "fipy.tools.dimensions.DictWithDefault": [[371, "module-fipy.tools.dimensions.DictWithDefault"]], "fipy.tools.dimensions.NumberDict": [[372, "module-fipy.tools.dimensions.NumberDict"]], "fipy.tools.dimensions.physicalField": [[373, "module-fipy.tools.dimensions.physicalField"]], "fipy.tools.dump": [[374, "module-fipy.tools.dump"]], "fipy.tools.inline": [[375, "module-fipy.tools.inline"]], "fipy.tools.logging": [[376, "module-fipy.tools.logging"]], "fipy.tools.numerix": [[377, "module-fipy.tools.numerix"]], "fipy.tools.parser": [[378, "module-fipy.tools.parser"]], "fipy.tools.sharedtempfile": [[379, "module-fipy.tools.sharedtempfile"]], "fipy.tools.test": [[380, "module-fipy.tools.test"]], "fipy.tools.vector": [[381, "module-fipy.tools.vector"]], "fipy.tools.version": [[382, "module-fipy.tools.version"]], "fipy.tools.vitals": [[383, "module-fipy.tools.vitals"]], "fipy.variables": [[384, "module-fipy.variables"]], "fipy.variables.addOverFacesVariable": [[385, "module-fipy.variables.addOverFacesVariable"]], "fipy.variables.arithmeticCellToFaceVariable": [[386, "module-fipy.variables.arithmeticCellToFaceVariable"]], "fipy.variables.betaNoiseVariable": [[387, "module-fipy.variables.betaNoiseVariable"]], "fipy.variables.binaryOperatorVariable": [[388, "module-fipy.variables.binaryOperatorVariable"]], "fipy.variables.cellToFaceVariable": [[389, "module-fipy.variables.cellToFaceVariable"]], "fipy.variables.cellVariable": [[390, "module-fipy.variables.cellVariable"]], "fipy.variables.constant": [[391, "module-fipy.variables.constant"]], "fipy.variables.constraintMask": [[392, "module-fipy.variables.constraintMask"]], "fipy.variables.coupledCellVariable": [[393, "module-fipy.variables.coupledCellVariable"]], "fipy.variables.distanceVariable": [[394, "module-fipy.variables.distanceVariable"]], "fipy.variables.exponentialNoiseVariable": [[395, "module-fipy.variables.exponentialNoiseVariable"]], "fipy.variables.faceGradContributionsVariable": [[396, "module-fipy.variables.faceGradContributionsVariable"]], "fipy.variables.faceGradVariable": [[397, "module-fipy.variables.faceGradVariable"]], "fipy.variables.faceVariable": [[398, "module-fipy.variables.faceVariable"]], "fipy.variables.gammaNoiseVariable": [[399, "module-fipy.variables.gammaNoiseVariable"]], "fipy.variables.gaussCellGradVariable": [[400, "module-fipy.variables.gaussCellGradVariable"]], "fipy.variables.gaussianNoiseVariable": [[401, "module-fipy.variables.gaussianNoiseVariable"]], "fipy.variables.harmonicCellToFaceVariable": [[402, "module-fipy.variables.harmonicCellToFaceVariable"]], "fipy.variables.histogramVariable": [[403, "module-fipy.variables.histogramVariable"]], "fipy.variables.interfaceAreaVariable": [[404, "module-fipy.variables.interfaceAreaVariable"]], "fipy.variables.interfaceFlagVariable": [[405, "module-fipy.variables.interfaceFlagVariable"]], "fipy.variables.leastSquaresCellGradVariable": [[406, "module-fipy.variables.leastSquaresCellGradVariable"]], "fipy.variables.levelSetDiffusionVariable": [[407, "module-fipy.variables.levelSetDiffusionVariable"]], "fipy.variables.meshVariable": [[408, "module-fipy.variables.meshVariable"]], "fipy.variables.minmodCellToFaceVariable": [[409, "module-fipy.variables.minmodCellToFaceVariable"]], "fipy.variables.modCellGradVariable": [[410, "module-fipy.variables.modCellGradVariable"]], "fipy.variables.modCellToFaceVariable": [[411, "module-fipy.variables.modCellToFaceVariable"]], "fipy.variables.modFaceGradVariable": [[412, "module-fipy.variables.modFaceGradVariable"]], "fipy.variables.modPhysicalField": [[413, "module-fipy.variables.modPhysicalField"]], "fipy.variables.modularVariable": [[414, "module-fipy.variables.modularVariable"]], "fipy.variables.noiseVariable": [[415, "module-fipy.variables.noiseVariable"]], "fipy.variables.operatorVariable": [[416, "module-fipy.variables.operatorVariable"]], "fipy.variables.scharfetterGummelFaceVariable": [[417, "module-fipy.variables.scharfetterGummelFaceVariable"]], "fipy.variables.surfactantConvectionVariable": [[418, "module-fipy.variables.surfactantConvectionVariable"]], "fipy.variables.surfactantVariable": [[419, "module-fipy.variables.surfactantVariable"]], "fipy.variables.test": [[420, "module-fipy.variables.test"]], "fipy.variables.unaryOperatorVariable": [[421, "module-fipy.variables.unaryOperatorVariable"]], "fipy.variables.uniformNoiseVariable": [[422, "module-fipy.variables.uniformNoiseVariable"]], "fipy.variables.variable": [[423, "module-fipy.variables.variable"]], "fipy.viewers": [[424, "module-fipy.viewers"]], "fipy.viewers.matplotlibViewer": [[425, "module-fipy.viewers.matplotlibViewer"]], "fipy.viewers.mayaviViewer": [[426, "module-fipy.viewers.mayaviViewer"]], "fipy.viewers.mayaviViewer.mayaviClient": [[427, "module-fipy.viewers.mayaviViewer.mayaviClient"]], "fipy.viewers.mayaviViewer.test": [[428, "module-fipy.viewers.mayaviViewer.test"]], "fipy.viewers.multiViewer": [[429, "module-fipy.viewers.multiViewer"]], "fipy.viewers.test": [[430, "module-fipy.viewers.test"]], "fipy.viewers.testinteractive": [[431, "module-fipy.viewers.testinteractive"]], "fipy.viewers.tsvViewer": [[432, "module-fipy.viewers.tsvViewer"]], "fipy.viewers.viewer": [[433, "module-fipy.viewers.viewer"]], "fipy.viewers.vtkViewer": [[434, "module-fipy.viewers.vtkViewer"]], "fipy.viewers.vtkViewer.test": [[435, "module-fipy.viewers.vtkViewer.test"]], "fipy.viewers.vtkViewer.vtkCellViewer": [[436, "module-fipy.viewers.vtkViewer.vtkCellViewer"]], "fipy.viewers.vtkViewer.vtkFaceViewer": [[437, "module-fipy.viewers.vtkViewer.vtkFaceViewer"]], "fipy.viewers.vtkViewer.vtkViewer": [[438, "module-fipy.viewers.vtkViewer.vtkViewer"]], "Glossary": [[439, "glossary"]], "Introduction": [[440, "introduction"]], "FiPy Manual": [[441, "fipy-manual"]], "Finite Volume Method": [[442, "finite-volume-method"]], "Cell Centered FVM (CC-FVM)": [[442, "cell-centered-fvm-cc-fvm"]], "Vertex Centered FVM (VC-FVM)": [[442, "vertex-centered-fvm-vc-fvm"]], "Discretization": [[442, "discretization"]], "Transient Term \\partial (\\rho \\phi) / \\partial t": [[442, "transient-term-partial-rho-phi-partial-t"]], "Convection Term \\nabla \\cdot \\left( \\vec{u} \\phi \\right)": [[442, "convection-term-nabla-cdot-left-vec-u-phi-right"]], "Diffusion Term \\nabla \\cdot \\left( \\Gamma_1 \\nabla \\phi \\right)": [[442, "diffusion-term-nabla-cdot-left-gamma-1-nabla-phi-right"]], "Higher Order Diffusion": [[442, "higher-order-diffusion"]], "Source Term": [[442, "source-term"]], "Linear Equations": [[442, "linear-equations"]], "General Conservation Equation": [[443, "general-conservation-equation"]], "Theoretical and Numerical Background": [[444, "theoretical-and-numerical-background"]], "Numerical Schemes": [[445, "numerical-schemes"]], "References": [[446, "references"]], "package": [[447, "module-package"]], "package.subpackage": [[448, "module-package.subpackage"]], "package.subpackage.base": [[449, "module-package.subpackage.base"]], "package.subpackage.object": [[450, "module-package.subpackage.object"]], "How to Read the Modules Documentation": [[451, "how-to-read-the-modules-documentation"]]}, "indexentries": {"path": [[10, "index-1"]], "pep 8": [[10, "index-0"]], "python enhancement proposals": [[10, "index-0"], [439, "index-0"]], "environment variable": [[10, "index-1"], [16, "index-0"], [17, "envvar-FIPY_CACHE"], [17, "envvar-FIPY_DISPLAY_MATRIX"], [17, "envvar-FIPY_INCLUDE_NUMERIX_ALL"], [17, "envvar-FIPY_INLINE"], [17, "envvar-FIPY_INLINE_COMMENT"], [17, "envvar-FIPY_LOG_CONFIG"], [17, "envvar-FIPY_SOLVERS"], [17, "envvar-FIPY_VERBOSE_SOLVER"], [17, "envvar-FIPY_VIEWER"], [17, "envvar-PETSC_OPTIONS"], [17, "index-0"], [17, "index-1"], [17, "index-2"], [22, "envvar-DYLD_LIBRARY_PATH"], [22, "envvar-LD_LIBRARY_PATH"], [191, "index-0"]], "fipy_solvers": [[16, "index-0"], [17, "envvar-FIPY_SOLVERS"], [17, "index-1"]], "--cache": [[17, "cmdoption-cache"]], "--inline": [[17, "cmdoption-inline"]], "--lsmlib": [[17, "cmdoption-lsmlib"]], "--no-cache": [[17, "cmdoption-no-cache"]], "--no-pysparse": [[17, "cmdoption-no-pysparse"]], "--pyamg": [[17, "cmdoption-pyamg"]], "--pyamgx": [[17, "cmdoption-pyamgx"]], "--pysparse": [[17, "cmdoption-pysparse"]], "--scipy": [[17, "cmdoption-scipy"]], "--skfmm": [[17, "cmdoption-skfmm"]], "--trilinos": [[17, "cmdoption-trilinos"]], "fipy_cache": [[17, "envvar-FIPY_CACHE"]], "fipy_display_matrix": [[17, "envvar-FIPY_DISPLAY_MATRIX"]], "fipy_include_numerix_all": [[17, "envvar-FIPY_INCLUDE_NUMERIX_ALL"], [191, "index-0"]], "fipy_inline": [[17, "envvar-FIPY_INLINE"]], "fipy_inline_comment": [[17, "envvar-FIPY_INLINE_COMMENT"]], "fipy_log_config": [[17, "envvar-FIPY_LOG_CONFIG"], [17, "index-0"], [17, "index-2"]], "fipy_verbose_solver": [[17, "envvar-FIPY_VERBOSE_SOLVER"]], "fipy_viewer": [[17, "envvar-FIPY_VIEWER"]], "petsc_options": [[17, "envvar-PETSC_OPTIONS"]], "command line option": [[17, "cmdoption-cache"], [17, "cmdoption-inline"], [17, "cmdoption-lsmlib"], [17, "cmdoption-no-cache"], [17, "cmdoption-no-pysparse"], [17, "cmdoption-pyamg"], [17, "cmdoption-pyamgx"], [17, "cmdoption-pysparse"], [17, "cmdoption-scipy"], [17, "cmdoption-skfmm"], [17, "cmdoption-trilinos"], [22, "cmdoption-home"], [22, "cmdoption-prefix"]], "--home": [[22, "cmdoption-home"]], "--prefix": [[22, "cmdoption-prefix"]], "dyld_library_path": [[22, "envvar-DYLD_LIBRARY_PATH"]], "ld_library_path": [[22, "envvar-LD_LIBRARY_PATH"]], "examples": [[23, "module-examples"]], "module": [[23, "module-examples"], [24, "module-examples.benchmarking"], [25, "module-examples.benchmarking.benchmarker"], [26, "module-examples.benchmarking.size"], [27, "module-examples.benchmarking.steps"], [28, "module-examples.benchmarking.utils"], [29, "module-examples.benchmarking.versions"], [30, "module-examples.cahnHilliard"], [31, "module-examples.cahnHilliard.mesh2D"], [32, "module-examples.cahnHilliard.mesh2DCoupled"], [33, "module-examples.cahnHilliard.mesh3D"], [34, "module-examples.cahnHilliard.sphere"], [35, "index-5"], [35, "module-examples.cahnHilliard.tanh1D"], [36, "module-examples.cahnHilliard.test"], [37, "module-examples.chemotaxis"], [38, "module-examples.chemotaxis.input"], [39, "module-examples.chemotaxis.input2D"], [40, "module-examples.chemotaxis.parameters"], [41, "module-examples.chemotaxis.test"], [42, "module-examples.convection"], [43, "module-examples.convection.advection"], [44, "module-examples.convection.advection.explicitUpwind"], [45, "module-examples.convection.advection.implicitUpwind"], [46, "module-examples.convection.advection.vanLeerUpwind"], [47, "module-examples.convection.exponential1D"], [48, "index-2"], [48, "module-examples.convection.exponential1D.cylindricalMesh1D"], [49, "index-1"], [49, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"], [50, "index-2"], [50, "module-examples.convection.exponential1D.mesh1D"], [51, "module-examples.convection.exponential1D.tri2D"], [52, "module-examples.convection.exponential1DBack"], [53, "module-examples.convection.exponential1DBack.mesh1D"], [54, "module-examples.convection.exponential1DSource"], [55, "index-4"], [55, "module-examples.convection.exponential1DSource.mesh1D"], [56, "module-examples.convection.exponential1DSource.tri2D"], [57, "module-examples.convection.exponential2D"], [58, "index-2"], [58, "module-examples.convection.exponential2D.cylindricalMesh2D"], [59, "index-1"], [59, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"], [60, "module-examples.convection.exponential2D.mesh2D"], [61, "module-examples.convection.exponential2D.tri2D"], [62, "module-examples.convection.peclet"], [63, "module-examples.convection.powerLaw1D"], [64, "module-examples.convection.powerLaw1D.mesh1D"], [65, "module-examples.convection.powerLaw1D.tri2D"], [66, "module-examples.convection.robin"], [67, "module-examples.convection.source"], [68, "module-examples.convection.test"], [69, "module-examples.diffusion"], [70, "module-examples.diffusion.anisotropy"], [71, "index-3"], [71, "module-examples.diffusion.circle"], [72, "index-3"], [72, "module-examples.diffusion.circleQuad"], [73, "module-examples.diffusion.coupled"], [74, "module-examples.diffusion.electrostatics"], [75, "module-examples.diffusion.explicit"], [76, "module-examples.diffusion.explicit.mesh1D"], [77, "module-examples.diffusion.explicit.mixedelement"], [78, "module-examples.diffusion.explicit.test"], [79, "module-examples.diffusion.explicit.tri2D"], [80, "index-1"], [80, "module-examples.diffusion.mesh1D"], [81, "index-1"], [81, "module-examples.diffusion.mesh20x20"], [82, "index-1"], [82, "module-examples.diffusion.mesh20x20Coupled"], [83, "module-examples.diffusion.nthOrder"], [84, "index-3"], [84, "module-examples.diffusion.nthOrder.input4thOrder1D"], [85, "module-examples.diffusion.nthOrder.input4thOrder_line"], [86, "module-examples.diffusion.nthOrder.test"], [87, "module-examples.diffusion.steadyState"], [88, "module-examples.diffusion.steadyState.mesh1D"], [89, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"], [90, "module-examples.diffusion.steadyState.mesh1D.tri2Dinput"], [91, "module-examples.diffusion.steadyState.mesh20x20"], [92, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"], [93, "module-examples.diffusion.steadyState.mesh20x20.isotropy"], [94, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"], [95, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"], [96, "module-examples.diffusion.steadyState.mesh20x20.tri2Dinput"], [97, "module-examples.diffusion.steadyState.mesh50x50"], [98, "module-examples.diffusion.steadyState.mesh50x50.input"], [99, "module-examples.diffusion.steadyState.mesh50x50.tri2Dinput"], [100, "module-examples.diffusion.steadyState.otherMeshes"], [101, "module-examples.diffusion.steadyState.otherMeshes.cubicalProblem"], [102, "module-examples.diffusion.steadyState.otherMeshes.grid3Dinput"], [103, "module-examples.diffusion.steadyState.otherMeshes.prism"], [104, "module-examples.diffusion.steadyState.test"], [105, "module-examples.diffusion.test"], [106, "module-examples.diffusion.variable"], [107, "module-examples.elphf"], [108, "module-examples.elphf.diffusion"], [109, "module-examples.elphf.diffusion.mesh1D"], [110, "module-examples.elphf.diffusion.mesh1Ddimensional"], [111, "module-examples.elphf.diffusion.mesh2D"], [112, "module-examples.elphf.input"], [113, "module-examples.elphf.phase"], [114, "module-examples.elphf.phaseDiffusion"], [115, "module-examples.elphf.poisson"], [116, "module-examples.elphf.test"], [117, "module-examples.flow"], [118, "index-2"], [118, "module-examples.flow.stokesCavity"], [119, "module-examples.flow.test"], [120, "module-examples.levelSet"], [121, "module-examples.levelSet.advection"], [122, "module-examples.levelSet.advection.circle"], [123, "module-examples.levelSet.advection.mesh1D"], [124, "module-examples.levelSet.advection.test"], [125, "module-examples.levelSet.advection.trench"], [126, "module-examples.levelSet.distanceFunction"], [127, "module-examples.levelSet.distanceFunction.circle"], [128, "module-examples.levelSet.distanceFunction.interior"], [129, "module-examples.levelSet.distanceFunction.mesh1D"], [130, "module-examples.levelSet.distanceFunction.square"], [131, "module-examples.levelSet.distanceFunction.test"], [132, "module-examples.levelSet.electroChem"], [133, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"], [134, "module-examples.levelSet.electroChem.adsorption"], [135, "module-examples.levelSet.electroChem.gapFillDistanceVariable"], [136, "module-examples.levelSet.electroChem.gapFillMesh"], [137, "index-1"], [137, "module-examples.levelSet.electroChem.gold"], [138, "index-0"], [138, "module-examples.levelSet.electroChem.howToWriteAScript"], [139, "index-1"], [139, "module-examples.levelSet.electroChem.leveler"], [140, "module-examples.levelSet.electroChem.lines"], [141, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"], [142, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"], [143, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"], [144, "index-1"], [144, "module-examples.levelSet.electroChem.simpleTrenchSystem"], [145, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"], [146, "module-examples.levelSet.electroChem.test"], [147, "module-examples.levelSet.electroChem.trenchMesh"], [148, "module-examples.levelSet.surfactant"], [149, "module-examples.levelSet.surfactant.circle"], [150, "module-examples.levelSet.surfactant.expandingCircle"], [151, "module-examples.levelSet.surfactant.square"], [152, "module-examples.levelSet.surfactant.test"], [153, "module-examples.levelSet.test"], [154, "module-examples.meshing"], [155, "module-examples.meshing.gmshRefinement"], [156, "module-examples.meshing.inputGrid2D"], [157, "module-examples.meshing.sphere"], [158, "module-examples.meshing.test"], [159, "module-examples.parallel"], [160, "module-examples.phase"], [161, "module-examples.phase.anisotropy"], [162, "index-4"], [162, "module-examples.phase.anisotropyOLD"], [163, "index-7"], [163, "module-examples.phase.binary"], [164, "index-5"], [164, "index-6"], [164, "module-examples.phase.binaryCoupled"], [165, "module-examples.phase.impingement"], [166, "index-0"], [166, "index-6"], [166, "index-8"], [166, "module-examples.phase.impingement.mesh20x20"], [167, "index-4"], [167, "module-examples.phase.impingement.mesh40x1"], [168, "module-examples.phase.impingement.test"], [169, "module-examples.phase.missOrientation"], [170, "module-examples.phase.missOrientation.circle"], [171, "module-examples.phase.missOrientation.mesh1D"], [172, "module-examples.phase.missOrientation.modCircle"], [173, "module-examples.phase.missOrientation.test"], [174, "module-examples.phase.polyxtal"], [175, "module-examples.phase.polyxtalCoupled"], [176, "index-4"], [176, "module-examples.phase.quaternary"], [177, "index-2"], [177, "index-8"], [177, "module-examples.phase.simple"], [178, "module-examples.phase.symmetry"], [179, "module-examples.phase.test"], [180, "module-examples.reactiveWetting"], [181, "module-examples.reactiveWetting.liquidVapor1D"], [182, "module-examples.reactiveWetting.liquidVapor2D"], [183, "module-examples.reactiveWetting.test"], [184, "module-examples.riemann"], [185, "module-examples.riemann.acoustics"], [186, "module-examples.riemann.test"], [187, "module-examples.test"], [188, "module-examples.updating"], [189, "index-5"], [189, "module-examples.updating.update0_1to1_0"], [190, "module-examples.updating.update1_0to2_0"], [191, "module-examples.updating.update2_0to3_0"], [192, "module-fipy"], [193, "module-fipy.boundaryConditions"], [194, "module-fipy.boundaryConditions.boundaryCondition"], [195, "module-fipy.boundaryConditions.constraint"], [196, "module-fipy.boundaryConditions.fixedFlux"], [197, "module-fipy.boundaryConditions.fixedValue"], [198, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"], [199, "module-fipy.boundaryConditions.test"], [200, "module-fipy.matrices"], [201, "module-fipy.matrices.offsetSparseMatrix"], [202, "module-fipy.matrices.pysparseMatrix"], [203, "module-fipy.matrices.scipyMatrix"], [204, "module-fipy.matrices.sparseMatrix"], [205, "module-fipy.matrices.test"], [206, "module-fipy.matrices.trilinosMatrix"], [207, "module-fipy.meshes"], [208, "module-fipy.meshes.abstractMesh"], [209, "module-fipy.meshes.builders"], [210, "module-fipy.meshes.builders.abstractGridBuilder"], [211, "module-fipy.meshes.builders.grid1DBuilder"], [212, "module-fipy.meshes.builders.grid2DBuilder"], [213, "module-fipy.meshes.builders.grid3DBuilder"], [214, "module-fipy.meshes.builders.periodicGrid1DBuilder"], [215, "module-fipy.meshes.builders.utilityClasses"], [216, "module-fipy.meshes.cylindricalGrid1D"], [217, "module-fipy.meshes.cylindricalGrid2D"], [218, "module-fipy.meshes.cylindricalNonUniformGrid1D"], [219, "module-fipy.meshes.cylindricalNonUniformGrid2D"], [220, "module-fipy.meshes.cylindricalUniformGrid1D"], [221, "module-fipy.meshes.cylindricalUniformGrid2D"], [222, "module-fipy.meshes.factoryMeshes"], [223, "module-fipy.meshes.gmshMesh"], [224, "module-fipy.meshes.grid1D"], [225, "module-fipy.meshes.grid2D"], [226, "module-fipy.meshes.grid3D"], [227, "module-fipy.meshes.mesh"], [228, "module-fipy.meshes.mesh1D"], [229, "module-fipy.meshes.mesh2D"], [230, "module-fipy.meshes.nonUniformGrid1D"], [231, "module-fipy.meshes.nonUniformGrid2D"], [232, "module-fipy.meshes.nonUniformGrid3D"], [233, "module-fipy.meshes.periodicGrid1D"], [234, "module-fipy.meshes.periodicGrid2D"], [235, "module-fipy.meshes.periodicGrid3D"], [236, "module-fipy.meshes.representations"], [237, "module-fipy.meshes.representations.abstractRepresentation"], [238, "module-fipy.meshes.representations.gridRepresentation"], [239, "module-fipy.meshes.representations.meshRepresentation"], [240, "module-fipy.meshes.skewedGrid2D"], [241, "module-fipy.meshes.sphericalNonUniformGrid1D"], [242, "module-fipy.meshes.sphericalUniformGrid1D"], [243, "module-fipy.meshes.test"], [244, "module-fipy.meshes.topologies"], [245, "module-fipy.meshes.topologies.abstractTopology"], [246, "module-fipy.meshes.topologies.gridTopology"], [247, "module-fipy.meshes.topologies.meshTopology"], [248, "module-fipy.meshes.tri2D"], [249, "module-fipy.meshes.uniformGrid"], [250, "module-fipy.meshes.uniformGrid1D"], [251, "module-fipy.meshes.uniformGrid2D"], [252, "module-fipy.meshes.uniformGrid3D"], [253, "module-fipy.solvers"], [254, "module-fipy.solvers.pyAMG"], [255, "module-fipy.solvers.pyAMG.linearCGSSolver"], [256, "module-fipy.solvers.pyAMG.linearGMRESSolver"], [257, "module-fipy.solvers.pyAMG.linearGeneralSolver"], [258, "module-fipy.solvers.pyAMG.linearLUSolver"], [259, "module-fipy.solvers.pyAMG.linearPCGSolver"], [260, "module-fipy.solvers.pyAMG.preconditioners"], [261, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"], [262, "module-fipy.solvers.pyamgx"], [263, "module-fipy.solvers.pyamgx.aggregationAMGSolver"], [264, "module-fipy.solvers.pyamgx.classicalAMGSolver"], [265, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"], [266, "module-fipy.solvers.pyamgx.linearCGSolver"], [267, "module-fipy.solvers.pyamgx.linearFGMRESSolver"], [268, "module-fipy.solvers.pyamgx.linearGMRESSolver"], [269, "module-fipy.solvers.pyamgx.linearLUSolver"], [270, "module-fipy.solvers.pyamgx.preconditioners"], [271, "module-fipy.solvers.pyamgx.preconditioners.preconditioners"], [272, "module-fipy.solvers.pyamgx.pyAMGXSolver"], [273, "module-fipy.solvers.pyamgx.smoothers"], [274, "module-fipy.solvers.pyamgx.smoothers.smoothers"], [275, "module-fipy.solvers.pysparse"], [276, "module-fipy.solvers.pysparse.linearCGSSolver"], [277, "module-fipy.solvers.pysparse.linearGMRESSolver"], [278, "module-fipy.solvers.pysparse.linearJORSolver"], [279, "module-fipy.solvers.pysparse.linearLUSolver"], [280, "module-fipy.solvers.pysparse.linearPCGSolver"], [281, "module-fipy.solvers.pysparse.preconditioners"], [282, "module-fipy.solvers.pysparse.preconditioners.jacobiPreconditioner"], [283, "module-fipy.solvers.pysparse.preconditioners.preconditioner"], [284, "module-fipy.solvers.pysparse.preconditioners.ssorPreconditioner"], [285, "module-fipy.solvers.pysparse.pysparseSolver"], [286, "module-fipy.solvers.pysparseMatrixSolver"], [287, "module-fipy.solvers.scipy"], [288, "module-fipy.solvers.scipy.linearBicgstabSolver"], [289, "module-fipy.solvers.scipy.linearCGSSolver"], [290, "module-fipy.solvers.scipy.linearGMRESSolver"], [291, "module-fipy.solvers.scipy.linearLUSolver"], [292, "module-fipy.solvers.scipy.linearPCGSolver"], [293, "module-fipy.solvers.scipy.scipyKrylovSolver"], [294, "module-fipy.solvers.scipy.scipySolver"], [295, "module-fipy.solvers.solver"], [296, "module-fipy.solvers.test"], [297, "module-fipy.solvers.trilinos"], [298, "module-fipy.solvers.trilinos.comms"], [299, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"], [300, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"], [301, "module-fipy.solvers.trilinos.linearBicgstabSolver"], [302, "module-fipy.solvers.trilinos.linearCGSSolver"], [303, "module-fipy.solvers.trilinos.linearGMRESSolver"], [304, "module-fipy.solvers.trilinos.linearLUSolver"], [305, "module-fipy.solvers.trilinos.linearPCGSolver"], [306, "module-fipy.solvers.trilinos.preconditioners"], [307, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"], [308, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"], [309, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"], [310, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"], [311, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"], [312, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"], [313, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"], [314, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"], [315, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"], [316, "module-fipy.solvers.trilinos.preconditioners.preconditioner"], [317, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"], [318, "module-fipy.solvers.trilinos.trilinosMLTest"], [319, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"], [320, "module-fipy.solvers.trilinos.trilinosSolver"], [321, "module-fipy.steppers"], [322, "module-fipy.steppers.pidStepper"], [323, "module-fipy.steppers.pseudoRKQSStepper"], [324, "module-fipy.steppers.stepper"], [325, "module-fipy.terms"], [326, "module-fipy.terms.abstractBinaryTerm"], [327, "module-fipy.terms.abstractConvectionTerm"], [328, "module-fipy.terms.abstractDiffusionTerm"], [329, "module-fipy.terms.abstractUpwindConvectionTerm"], [330, "module-fipy.terms.advectionTerm"], [331, "module-fipy.terms.asymmetricConvectionTerm"], [332, "module-fipy.terms.binaryTerm"], [333, "module-fipy.terms.cellTerm"], [334, "module-fipy.terms.centralDiffConvectionTerm"], [335, "module-fipy.terms.coupledBinaryTerm"], [336, "module-fipy.terms.diffusionTerm"], [337, "module-fipy.terms.diffusionTermCorrection"], [338, "module-fipy.terms.diffusionTermNoCorrection"], [339, "module-fipy.terms.explicitDiffusionTerm"], [340, "module-fipy.terms.explicitSourceTerm"], [341, "module-fipy.terms.explicitUpwindConvectionTerm"], [342, "module-fipy.terms.exponentialConvectionTerm"], [343, "module-fipy.terms.faceTerm"], [344, "module-fipy.terms.firstOrderAdvectionTerm"], [345, "module-fipy.terms.hybridConvectionTerm"], [346, "module-fipy.terms.implicitDiffusionTerm"], [347, "module-fipy.terms.implicitSourceTerm"], [348, "module-fipy.terms.nonDiffusionTerm"], [349, "module-fipy.terms.powerLawConvectionTerm"], [350, "module-fipy.terms.residualTerm"], [351, "module-fipy.terms.sourceTerm"], [352, "module-fipy.terms.term"], [353, "module-fipy.terms.test"], [354, "module-fipy.terms.transientTerm"], [355, "module-fipy.terms.unaryTerm"], [356, "module-fipy.terms.upwindConvectionTerm"], [357, "module-fipy.terms.vanLeerConvectionTerm"], [358, "module-fipy.testFiPy"], [359, "module-fipy.tests"], [360, "module-fipy.tests.doctestPlus"], [361, "module-fipy.tests.lateImportTest"], [362, "module-fipy.tests.test"], [363, "module-fipy.tests.testProgram"], [364, "module-fipy.tools"], [365, "module-fipy.tools.comms"], [366, "module-fipy.tools.comms.commWrapper"], [367, "module-fipy.tools.comms.dummyComm"], [368, "module-fipy.tools.debug"], [369, "module-fipy.tools.decorators"], [370, "module-fipy.tools.dimensions"], [371, "module-fipy.tools.dimensions.DictWithDefault"], [372, "module-fipy.tools.dimensions.NumberDict"], [373, "module-fipy.tools.dimensions.physicalField"], [374, "module-fipy.tools.dump"], [375, "module-fipy.tools.inline"], [376, "module-fipy.tools.logging"], [377, "module-fipy.tools.numerix"], [378, "module-fipy.tools.parser"], [379, "module-fipy.tools.sharedtempfile"], [380, "module-fipy.tools.test"], [381, "module-fipy.tools.vector"], [382, "module-fipy.tools.version"], [383, "module-fipy.tools.vitals"], [384, "module-fipy.variables"], [385, "module-fipy.variables.addOverFacesVariable"], [386, "module-fipy.variables.arithmeticCellToFaceVariable"], [387, "module-fipy.variables.betaNoiseVariable"], [388, "module-fipy.variables.binaryOperatorVariable"], [389, "module-fipy.variables.cellToFaceVariable"], [390, "module-fipy.variables.cellVariable"], [391, "module-fipy.variables.constant"], [392, "module-fipy.variables.constraintMask"], [393, "module-fipy.variables.coupledCellVariable"], [394, "module-fipy.variables.distanceVariable"], [395, "module-fipy.variables.exponentialNoiseVariable"], [396, "module-fipy.variables.faceGradContributionsVariable"], [397, "module-fipy.variables.faceGradVariable"], [398, "module-fipy.variables.faceVariable"], [399, "module-fipy.variables.gammaNoiseVariable"], [400, "module-fipy.variables.gaussCellGradVariable"], [401, "module-fipy.variables.gaussianNoiseVariable"], [402, "module-fipy.variables.harmonicCellToFaceVariable"], [403, "module-fipy.variables.histogramVariable"], [404, "module-fipy.variables.interfaceAreaVariable"], [405, "module-fipy.variables.interfaceFlagVariable"], [406, "module-fipy.variables.leastSquaresCellGradVariable"], [407, "module-fipy.variables.levelSetDiffusionVariable"], [408, "module-fipy.variables.meshVariable"], [409, "module-fipy.variables.minmodCellToFaceVariable"], [410, "module-fipy.variables.modCellGradVariable"], [411, "module-fipy.variables.modCellToFaceVariable"], [412, "module-fipy.variables.modFaceGradVariable"], [413, "module-fipy.variables.modPhysicalField"], [414, "module-fipy.variables.modularVariable"], [415, "module-fipy.variables.noiseVariable"], [416, "module-fipy.variables.operatorVariable"], [417, "module-fipy.variables.scharfetterGummelFaceVariable"], [418, "module-fipy.variables.surfactantConvectionVariable"], [419, "module-fipy.variables.surfactantVariable"], [420, "module-fipy.variables.test"], [421, "module-fipy.variables.unaryOperatorVariable"], [422, "module-fipy.variables.uniformNoiseVariable"], [423, "module-fipy.variables.variable"], [424, "module-fipy.viewers"], [425, "module-fipy.viewers.matplotlibViewer"], [426, "module-fipy.viewers.mayaviViewer"], [427, "module-fipy.viewers.mayaviViewer.mayaviClient"], [428, "module-fipy.viewers.mayaviViewer.test"], [429, "module-fipy.viewers.multiViewer"], [430, "module-fipy.viewers.test"], [431, "module-fipy.viewers.testinteractive"], [432, "module-fipy.viewers.tsvViewer"], [433, "module-fipy.viewers.viewer"], [434, "module-fipy.viewers.vtkViewer"], [435, "module-fipy.viewers.vtkViewer.test"], [436, "module-fipy.viewers.vtkViewer.vtkCellViewer"], [437, "module-fipy.viewers.vtkViewer.vtkFaceViewer"], [438, "module-fipy.viewers.vtkViewer.vtkViewer"], [447, "module-package"], [448, "module-package.subpackage"], [449, "module-package.subpackage.base"], [450, "module-package.subpackage.object"]], "examples.benchmarking": [[24, "module-examples.benchmarking"]], "examples.benchmarking.benchmarker": [[25, "module-examples.benchmarking.benchmarker"]], "examples.benchmarking.size": [[26, "module-examples.benchmarking.size"]], "examples.benchmarking.steps": [[27, "module-examples.benchmarking.steps"]], "examples.benchmarking.utils": [[28, "module-examples.benchmarking.utils"]], "examples.benchmarking.versions": [[29, "module-examples.benchmarking.versions"]], "examples.cahnhilliard": [[30, "module-examples.cahnHilliard"]], "examples.cahnhilliard.mesh2d": [[31, "module-examples.cahnHilliard.mesh2D"]], "examples.cahnhilliard.mesh2dcoupled": [[32, "module-examples.cahnHilliard.mesh2DCoupled"]], "examples.cahnhilliard.mesh3d": [[33, "module-examples.cahnHilliard.mesh3D"]], "examples.cahnhilliard.sphere": [[34, "module-examples.cahnHilliard.sphere"]], "cellvariable": [[35, "index-1"], [55, "index-1"], [84, "index-1"], [118, "index-1"], [138, "index-5"], [162, "index-1"], [163, "index-1"], [164, "index-1"], [166, "index-2"], [167, "index-1"], [176, "index-1"], [177, "index-1"], [189, "index-2"], [189, "index-9"]], "defaultsolver": [[35, "index-3"]], "grid2d": [[35, "index-0"], [81, "index-0"], [82, "index-0"], [118, "index-0"], [127, "index-0"], [129, "index-0"], [138, "index-2"], [162, "index-0"], [166, "index-1"], [189, "index-0"]], "linearlusolver": [[35, "index-3"], [164, "index-7"], [189, "index-3"]], "nthorderboundarycondition": [[35, "index-2"], [84, "index-2"]], "examples.cahnhilliard.tanh1d": [[35, "module-examples.cahnHilliard.tanh1D"]], "exp": [[35, "index-4"], [48, "index-1"], [49, "index-0"], [50, "index-1"], [55, "index-3"], [58, "index-1"], [59, "index-0"], [138, "index-1"], [163, "index-4"], [164, "index-3"], [166, "index-5"], [167, "index-3"]], "fipy.viewers": [[35, "index-5"], [48, "index-2"], [49, "index-1"], [50, "index-2"], [55, "index-4"], [58, "index-2"], [59, "index-1"], [80, "index-1"], [81, "index-1"], [82, "index-1"], [84, "index-3"], [118, "index-2"], [162, "index-4"], [163, "index-7"], [164, "index-6"], [166, "index-6"], [167, "index-4"], [177, "index-2"], [189, "index-11"], [424, "module-fipy.viewers"]], "sqrt": [[35, "index-4"], [71, "index-3"], [72, "index-3"], [138, "index-1"], [166, "index-1"], [177, "index-3"]], "examples.cahnhilliard.test": [[36, "module-examples.cahnHilliard.test"]], "examples.chemotaxis": [[37, "module-examples.chemotaxis"]], "examples.chemotaxis.input": [[38, "module-examples.chemotaxis.input"]], "examples.chemotaxis.input2d": [[39, "module-examples.chemotaxis.input2D"]], "examples.chemotaxis.parameters": [[40, "module-examples.chemotaxis.parameters"]], "examples.chemotaxis.test": [[41, "module-examples.chemotaxis.test"]], "examples.convection": [[42, "module-examples.convection"]], "examples.convection.advection": [[43, "module-examples.convection.advection"]], "examples.convection.advection.explicitupwind": [[44, "module-examples.convection.advection.explicitUpwind"]], "examples.convection.advection.implicitupwind": [[45, "module-examples.convection.advection.implicitUpwind"]], "examples.convection.advection.vanleerupwind": [[46, "module-examples.convection.advection.vanLeerUpwind"]], "examples.convection.exponential1d": [[47, "module-examples.convection.exponential1D"]], "grid1d": [[48, "index-0"], [50, "index-0"], [55, "index-0"], [58, "index-0"], [84, "index-0"], [123, "index-0"], [163, "index-0"], [164, "index-0"], [167, "index-0"], [176, "index-0"], [177, "index-0"], [189, "index-7"]], "examples.convection.exponential1d.cylindricalmesh1d": [[48, "module-examples.convection.exponential1D.cylindricalMesh1D"]], "examples.convection.exponential1d.cylindricalmesh1dnonuniform": [[49, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"]], "examples.convection.exponential1d.mesh1d": [[50, "module-examples.convection.exponential1D.mesh1D"]], "examples.convection.exponential1d.tri2d": [[51, "module-examples.convection.exponential1D.tri2D"]], "examples.convection.exponential1dback": [[52, "module-examples.convection.exponential1DBack"]], "examples.convection.exponential1dback.mesh1d": [[53, "module-examples.convection.exponential1DBack.mesh1D"]], "examples.convection.exponential1dsource": [[54, "module-examples.convection.exponential1DSource"]], "defaultasymmetricsolver": [[55, "index-2"], [176, "index-5"]], "examples.convection.exponential1dsource.mesh1d": [[55, "module-examples.convection.exponential1DSource.mesh1D"]], "examples.convection.exponential1dsource.tri2d": [[56, "module-examples.convection.exponential1DSource.tri2D"]], "examples.convection.exponential2d": [[57, "module-examples.convection.exponential2D"]], "examples.convection.exponential2d.cylindricalmesh2d": [[58, "module-examples.convection.exponential2D.cylindricalMesh2D"]], "examples.convection.exponential2d.cylindricalmesh2dnonuniform": [[59, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"]], "examples.convection.exponential2d.mesh2d": [[60, "module-examples.convection.exponential2D.mesh2D"]], "examples.convection.exponential2d.tri2d": [[61, "module-examples.convection.exponential2D.tri2D"]], "examples.convection.peclet": [[62, "module-examples.convection.peclet"]], "examples.convection.powerlaw1d": [[63, "module-examples.convection.powerLaw1D"]], "examples.convection.powerlaw1d.mesh1d": [[64, "module-examples.convection.powerLaw1D.mesh1D"]], "examples.convection.powerlaw1d.tri2d": [[65, "module-examples.convection.powerLaw1D.tri2D"]], "examples.convection.robin": [[66, "module-examples.convection.robin"]], "examples.convection.source": [[67, "module-examples.convection.source"]], "examples.convection.test": [[68, "module-examples.convection.test"]], "examples.diffusion": [[69, "module-examples.diffusion"]], "examples.diffusion.anisotropy": [[70, "module-examples.diffusion.anisotropy"]], "arcsin; cos": [[71, "index-3"], [72, "index-3"]], "examples.diffusion.circle": [[71, "module-examples.diffusion.circle"]], "fipy.terms.implicitdiffusionterm.diffusionterm": [[71, "index-1"], [72, "index-1"]], "fipy.terms.transientterm.transientterm": [[71, "index-1"], [72, "index-1"]], "fipy.variables.cellvariable.cellvariable": [[71, "index-0"], [72, "index-0"]], "fipy.viewers.tsvviewer.tsvviewer": [[71, "index-2"], [72, "index-2"]], "object": [[71, "index-0"], [71, "index-1"], [71, "index-2"], [72, "index-0"], [72, "index-1"], [72, "index-2"]], "scipy": [[71, "index-3"], [72, "index-3"], [163, "index-6"], [164, "index-5"], [177, "index-8"], [439, "term-SciPy"]], "examples.diffusion.circlequad": [[72, "module-examples.diffusion.circleQuad"]], "examples.diffusion.coupled": [[73, "module-examples.diffusion.coupled"]], "examples.diffusion.electrostatics": [[74, "module-examples.diffusion.electrostatics"]], "examples.diffusion.explicit": [[75, "module-examples.diffusion.explicit"]], "examples.diffusion.explicit.mesh1d": [[76, "module-examples.diffusion.explicit.mesh1D"]], "examples.diffusion.explicit.mixedelement": [[77, "module-examples.diffusion.explicit.mixedelement"]], "examples.diffusion.explicit.test": [[78, "module-examples.diffusion.explicit.test"]], "examples.diffusion.explicit.tri2d": [[79, "module-examples.diffusion.explicit.tri2D"]], "explicitdiffusionterm": [[80, "index-0"], [162, "index-3"], [166, "index-4"], [167, "index-2"]], "facevariable": [[80, "index-2"]], "transientterm": [[80, "index-0"], [162, "index-3"], [166, "index-4"], [167, "index-2"], [177, "index-4"]], "examples.diffusion.mesh1d": [[80, "module-examples.diffusion.mesh1D"]], "examples.diffusion.mesh20x20": [[81, "module-examples.diffusion.mesh20x20"]], "examples.diffusion.mesh20x20coupled": [[82, "module-examples.diffusion.mesh20x20Coupled"]], "examples.diffusion.nthorder": [[83, "module-examples.diffusion.nthOrder"]], "examples.diffusion.nthorder.input4thorder1d": [[84, "module-examples.diffusion.nthOrder.input4thOrder1D"]], "examples.diffusion.nthorder.input4thorder_line": [[85, "module-examples.diffusion.nthOrder.input4thOrder_line"]], "examples.diffusion.nthorder.test": [[86, "module-examples.diffusion.nthOrder.test"]], "examples.diffusion.steadystate": [[87, "module-examples.diffusion.steadyState"]], "examples.diffusion.steadystate.mesh1d": [[88, "module-examples.diffusion.steadyState.mesh1D"]], "examples.diffusion.steadystate.mesh1d.inputperiodic": [[89, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"]], "examples.diffusion.steadystate.mesh1d.tri2dinput": [[90, "module-examples.diffusion.steadyState.mesh1D.tri2Dinput"]], "examples.diffusion.steadystate.mesh20x20": [[91, "module-examples.diffusion.steadyState.mesh20x20"]], "examples.diffusion.steadystate.mesh20x20.gmshinput": [[92, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"]], "examples.diffusion.steadystate.mesh20x20.isotropy": [[93, "module-examples.diffusion.steadyState.mesh20x20.isotropy"]], "examples.diffusion.steadystate.mesh20x20.modifiedmeshinput": [[94, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"]], "examples.diffusion.steadystate.mesh20x20.orthoerror": [[95, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"]], "examples.diffusion.steadystate.mesh20x20.tri2dinput": [[96, "module-examples.diffusion.steadyState.mesh20x20.tri2Dinput"]], "examples.diffusion.steadystate.mesh50x50": [[97, "module-examples.diffusion.steadyState.mesh50x50"]], "examples.diffusion.steadystate.mesh50x50.input": [[98, "module-examples.diffusion.steadyState.mesh50x50.input"]], "examples.diffusion.steadystate.mesh50x50.tri2dinput": [[99, "module-examples.diffusion.steadyState.mesh50x50.tri2Dinput"]], "examples.diffusion.steadystate.othermeshes": [[100, "module-examples.diffusion.steadyState.otherMeshes"]], "examples.diffusion.steadystate.othermeshes.cubicalproblem": [[101, "module-examples.diffusion.steadyState.otherMeshes.cubicalProblem"]], "examples.diffusion.steadystate.othermeshes.grid3dinput": [[102, "module-examples.diffusion.steadyState.otherMeshes.grid3Dinput"]], "examples.diffusion.steadystate.othermeshes.prism": [[103, "module-examples.diffusion.steadyState.otherMeshes.prism"]], "examples.diffusion.steadystate.test": [[104, "module-examples.diffusion.steadyState.test"]], "examples.diffusion.test": [[105, "module-examples.diffusion.test"]], "examples.diffusion.variable": [[106, "module-examples.diffusion.variable"]], "examples.elphf": [[107, "module-examples.elphf"]], "examples.elphf.diffusion": [[108, "module-examples.elphf.diffusion"]], "examples.elphf.diffusion.mesh1d": [[109, "module-examples.elphf.diffusion.mesh1D"]], "examples.elphf.diffusion.mesh1ddimensional": [[110, "module-examples.elphf.diffusion.mesh1Ddimensional"]], "examples.elphf.diffusion.mesh2d": [[111, "module-examples.elphf.diffusion.mesh2D"]], "examples.elphf.input": [[112, "module-examples.elphf.input"]], "examples.elphf.phase": [[113, "module-examples.elphf.phase"]], "examples.elphf.phasediffusion": [[114, "module-examples.elphf.phaseDiffusion"]], "examples.elphf.poisson": [[115, "module-examples.elphf.poisson"]], "examples.elphf.test": [[116, "module-examples.elphf.test"]], "examples.flow": [[117, "module-examples.flow"]], "rhsvector": [[118, "index-3"]], "cachematrix": [[118, "index-3"]], "cacherhsvector": [[118, "index-3"]], "examples.flow.stokescavity": [[118, "module-examples.flow.stokesCavity"]], "matrix": [[118, "index-3"]], "sweep": [[118, "index-3"], [164, "index-7"], [177, "index-7"]], "examples.flow.test": [[119, "module-examples.flow.test"]], "examples.levelset": [[120, "module-examples.levelSet"]], "examples.levelset.advection": [[121, "module-examples.levelSet.advection"]], "examples.levelset.advection.circle": [[122, "module-examples.levelSet.advection.circle"]], "examples.levelset.advection.mesh1d": [[123, "module-examples.levelSet.advection.mesh1D"]], "examples.levelset.advection.test": [[124, "module-examples.levelSet.advection.test"]], "examples.levelset.advection.trench": [[125, "module-examples.levelSet.advection.trench"]], "examples.levelset.distancefunction": [[126, "module-examples.levelSet.distanceFunction"]], "examples.levelset.distancefunction.circle": [[127, "module-examples.levelSet.distanceFunction.circle"]], "examples.levelset.distancefunction.interior": [[128, "module-examples.levelSet.distanceFunction.interior"]], "examples.levelset.distancefunction.mesh1d": [[129, "module-examples.levelSet.distanceFunction.mesh1D"]], "examples.levelset.distancefunction.square": [[130, "module-examples.levelSet.distanceFunction.square"]], "examples.levelset.distancefunction.test": [[131, "module-examples.levelSet.distanceFunction.test"]], "examples.levelset.electrochem": [[132, "module-examples.levelSet.electroChem"]], "examples.levelset.electrochem.adsorbingsurfactantequation": [[133, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"]], "examples.levelset.electrochem.adsorption": [[134, "module-examples.levelSet.electroChem.adsorption"]], "examples.levelset.electrochem.gapfilldistancevariable": [[135, "module-examples.levelSet.electroChem.gapFillDistanceVariable"]], "examples.levelset.electrochem.gapfillmesh": [[136, "module-examples.levelSet.electroChem.gapFillMesh"]], "examples.levelset.electrochem.gold": [[137, "module-examples.levelSet.electroChem.gold"]], "gmsh": [[137, "index-1"], [139, "index-1"], [144, "index-1"], [439, "term-Gmsh"]], "rungold": [[137, "index-0"]], "advectionterm": [[138, "index-6"]], "distancevariable": [[138, "index-3"]], "mayavisurfactantviewer": [[138, "index-7"]], "surfactantvariable": [[138, "index-4"]], "examples.levelset.electrochem.howtowriteascript": [[138, "module-examples.levelSet.electroChem.howToWriteAScript"]], "fipy.tools.parser": [[138, "index-0"], [166, "index-0"], [378, "module-fipy.tools.parser"]], "loadtxt": [[138, "index-8"], [162, "index-5"], [166, "index-7"], [167, "index-6"]], "examples.levelset.electrochem.leveler": [[139, "module-examples.levelSet.electroChem.leveler"]], "runleveler": [[139, "index-0"]], "examples.levelset.electrochem.lines": [[140, "module-examples.levelSet.electroChem.lines"]], "matplotlibsurfactantviewer (class in examples.levelset.electrochem.matplotlibsurfactantviewer)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer"]], "axes (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.axes"]], "cmap (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.cmap"]], "colorbar (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.colorbar"]], "examples.levelset.electrochem.matplotlibsurfactantviewer": [[141, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"]], "fig (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.fig"]], "id (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.id"]], "log (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.log"]], "plot() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.plot"]], "plotmesh() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.plotMesh"]], "setlimits() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.setLimits"]], "title (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.title"]], "vars (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.vars"]], "mayavisurfactantviewer (class in examples.levelset.electrochem.mayavisurfactantviewer)": [[142, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer"]], "examples.levelset.electrochem.mayavisurfactantviewer": [[142, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"]], "plotmesh() (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer method)": [[142, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.plotMesh"]], "setlimits() (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer method)": [[142, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.setLimits"]], "title (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer property)": [[142, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.title"]], "vars (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer property)": [[142, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.vars"]], "examples.levelset.electrochem.metaliondiffusionequation": [[143, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"]], "examples.levelset.electrochem.simpletrenchsystem": [[144, "module-examples.levelSet.electroChem.simpleTrenchSystem"]], "runsimpletrenchsystem": [[144, "index-0"]], "examples.levelset.electrochem.surfactantbulkdiffusionequation": [[145, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"]], "examples.levelset.electrochem.test": [[146, "module-examples.levelSet.electroChem.test"]], "examples.levelset.electrochem.trenchmesh": [[147, "module-examples.levelSet.electroChem.trenchMesh"]], "examples.levelset.surfactant": [[148, "module-examples.levelSet.surfactant"]], "examples.levelset.surfactant.circle": [[149, "module-examples.levelSet.surfactant.circle"]], "examples.levelset.surfactant.expandingcircle": [[150, "module-examples.levelSet.surfactant.expandingCircle"]], "examples.levelset.surfactant.square": [[151, "module-examples.levelSet.surfactant.square"]], "examples.levelset.surfactant.test": [[152, "module-examples.levelSet.surfactant.test"]], "examples.levelset.test": [[153, "module-examples.levelSet.test"]], "examples.meshing": [[154, "module-examples.meshing"]], "examples.meshing.gmshrefinement": [[155, "module-examples.meshing.gmshRefinement"]], "examples.meshing.inputgrid2d": [[156, "module-examples.meshing.inputGrid2D"]], "examples.meshing.sphere": [[157, "module-examples.meshing.sphere"]], "examples.meshing.test": [[158, "module-examples.meshing.test"]], "examples.parallel": [[159, "module-examples.parallel"]], "examples.phase": [[160, "module-examples.phase"]], ":math:`\\pi`": [[161, "index-0"], [162, "index-2"], [166, "index-3"], [167, "index-5"]], "arctan": [[161, "index-0"], [162, "index-2"]], "arctan2": [[161, "index-0"], [162, "index-2"]], "examples.phase.anisotropy": [[161, "module-examples.phase.anisotropy"]], "pi": [[161, "index-0"], [162, "index-2"], [166, "index-3"], [167, "index-5"]], "tan": [[161, "index-0"], [162, "index-2"]], "implicitsourceterm": [[162, "index-3"], [166, "index-4"], [167, "index-2"], [177, "index-5"]], "allclose": [[162, "index-5"], [176, "index-6"]], "examples.phase.anisotropyold": [[162, "module-examples.phase.anisotropyOLD"]], "powerlawconvectionterm": [[163, "index-3"], [176, "index-3"]], "variable": [[163, "index-2"], [164, "index-2"], [177, "index-6"]], "array": [[163, "index-5"], [164, "index-4"]], "examples.phase.binary": [[163, "module-examples.phase.binary"]], "log": [[163, "index-5"], [164, "index-4"], [176, "index-2"]], "examples.phase.binarycoupled": [[164, "module-examples.phase.binaryCoupled"]], "solve": [[164, "index-7"]], "examples.phase.impingement": [[165, "module-examples.phase.impingement"]], "modularvariable": [[166, "index-3"]], "examples.phase.impingement.mesh20x20": [[166, "module-examples.phase.impingement.mesh20x20"]], "fipy.tools.dump": [[166, "index-8"], [374, "module-fipy.tools.dump"]], "examples.phase.impingement.mesh40x1": [[167, "module-examples.phase.impingement.mesh40x1"]], "examples.phase.impingement.test": [[168, "module-examples.phase.impingement.test"]], "examples.phase.missorientation": [[169, "module-examples.phase.missOrientation"]], "examples.phase.missorientation.circle": [[170, "module-examples.phase.missOrientation.circle"]], "examples.phase.missorientation.mesh1d": [[171, "module-examples.phase.missOrientation.mesh1D"]], "examples.phase.missorientation.modcircle": [[172, "module-examples.phase.missOrientation.modCircle"]], "examples.phase.missorientation.test": [[173, "module-examples.phase.missOrientation.test"]], "examples.phase.polyxtal": [[174, "module-examples.phase.polyxtal"]], "examples.phase.polyxtalcoupled": [[175, "module-examples.phase.polyxtalCoupled"]], "examples.phase.quaternary": [[176, "module-examples.phase.quaternary"]], "viewers": [[176, "index-4"]], "examples.phase.simple": [[177, "module-examples.phase.simple"]], "tanh": [[177, "index-3"]], "examples.phase.symmetry": [[178, "module-examples.phase.symmetry"]], "examples.phase.test": [[179, "module-examples.phase.test"]], "examples.reactivewetting": [[180, "module-examples.reactiveWetting"]], "examples.reactivewetting.liquidvapor1d": [[181, "module-examples.reactiveWetting.liquidVapor1D"]], "examples.reactivewetting.liquidvapor2d": [[182, "module-examples.reactiveWetting.liquidVapor2D"]], "examples.reactivewetting.test": [[183, "module-examples.reactiveWetting.test"]], "examples.riemann": [[184, "module-examples.riemann"]], "examples.riemann.acoustics": [[185, "module-examples.riemann.acoustics"]], "examples.riemann.test": [[186, "module-examples.riemann.test"]], "examples.test": [[187, "module-examples.test"]], "examples.updating": [[188, "module-examples.updating"]], "exponentialconvectionterm": [[189, "index-3"]], "fixedflux": [[189, "index-1"]], "fixedvalue": [[189, "index-1"], [189, "index-8"]], "gist1dviewer": [[189, "index-10"]], "grid2dgistviewer": [[189, "index-6"]], "iterator": [[189, "index-4"]], "steadyconvectiondiffusionscequation": [[189, "index-3"]], "examples.updating.update0_1to1_0": [[189, "module-examples.updating.update0_1to1_0"]], "fipy.numerix": [[189, "index-5"]], "examples.updating.update1_0to2_0": [[190, "module-examples.updating.update1_0to2_0"]], "examples.updating.update2_0to3_0": [[191, "module-examples.updating.update2_0to3_0"]], "doctest_raw_input() (in module fipy)": [[192, "fipy.doctest_raw_input"]], "fipy": [[192, "module-fipy"], [439, "term-FiPy"]], "serialcomm (in module fipy)": [[192, "fipy.serialComm"]], "test() (in module fipy)": [[192, "fipy.test"]], "fipy.boundaryconditions": [[193, "module-fipy.boundaryConditions"]], "boundarycondition (class in fipy.boundaryconditions.boundarycondition)": [[194, "fipy.boundaryConditions.boundaryCondition.BoundaryCondition"]], "__repr__() (fipy.boundaryconditions.boundarycondition.boundarycondition method)": [[194, "fipy.boundaryConditions.boundaryCondition.BoundaryCondition.__repr__"]], "fipy.boundaryconditions.boundarycondition": [[194, "module-fipy.boundaryConditions.boundaryCondition"]], "constraint (class in fipy.boundaryconditions.constraint)": [[195, "fipy.boundaryConditions.constraint.Constraint"]], "__repr__() (fipy.boundaryconditions.constraint.constraint method)": [[195, "fipy.boundaryConditions.constraint.Constraint.__repr__"]], "fipy.boundaryconditions.constraint": [[195, "module-fipy.boundaryConditions.constraint"]], "fixedflux (class in fipy.boundaryconditions.fixedflux)": [[196, "fipy.boundaryConditions.fixedFlux.FixedFlux"]], "__repr__() (fipy.boundaryconditions.fixedflux.fixedflux method)": [[196, "fipy.boundaryConditions.fixedFlux.FixedFlux.__repr__"]], "fipy.boundaryconditions.fixedflux": [[196, "module-fipy.boundaryConditions.fixedFlux"]], "fixedvalue (class in fipy.boundaryconditions.fixedvalue)": [[197, "fipy.boundaryConditions.fixedValue.FixedValue"]], "__repr__() (fipy.boundaryconditions.fixedvalue.fixedvalue method)": [[197, "fipy.boundaryConditions.fixedValue.FixedValue.__repr__"]], "fipy.boundaryconditions.fixedvalue": [[197, "module-fipy.boundaryConditions.fixedValue"]], "nthorderboundarycondition (class in fipy.boundaryconditions.nthorderboundarycondition)": [[198, "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition"]], "__repr__() (fipy.boundaryconditions.nthorderboundarycondition.nthorderboundarycondition method)": [[198, "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition.__repr__"]], "fipy.boundaryconditions.nthorderboundarycondition": [[198, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"]], "fipy.boundaryconditions.test": [[199, "module-fipy.boundaryConditions.test"]], "fipy.matrices": [[200, "module-fipy.matrices"]], "offsetsparsematrix() (in module fipy.matrices.offsetsparsematrix)": [[201, "fipy.matrices.offsetSparseMatrix.OffsetSparseMatrix"]], "fipy.matrices.offsetsparsematrix": [[201, "module-fipy.matrices.offsetSparseMatrix"]], "fipy.matrices.pysparsematrix": [[202, "module-fipy.matrices.pysparseMatrix"]], "fipy.matrices.scipymatrix": [[203, "module-fipy.matrices.scipyMatrix"]], "fipy.matrices.sparsematrix": [[204, "module-fipy.matrices.sparseMatrix"]], "fipy.matrices.test": [[205, "module-fipy.matrices.test"]], "fipy.matrices.trilinosmatrix": [[206, "module-fipy.matrices.trilinosMatrix"]], "fipy.meshes": [[207, "module-fipy.meshes"]], "abstractmesh (class in fipy.meshes.abstractmesh)": [[208, "fipy.meshes.abstractMesh.AbstractMesh"]], "vtkcelldataset (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.VTKFaceDataSet"]], "__add__() (fipy.meshes.abstractmesh.abstractmesh method)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.__add__"]], "__div__() (fipy.meshes.abstractmesh.abstractmesh method)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.__div__"]], "__radd__() (fipy.meshes.abstractmesh.abstractmesh method)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.__radd__"]], "__repr__() (fipy.meshes.abstractmesh.abstractmesh method)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.__repr__"]], "__sub__() (fipy.meshes.abstractmesh.abstractmesh method)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.__sub__"]], "__truediv__() (fipy.meshes.abstractmesh.abstractmesh method)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.__truediv__"]], "aspect2d (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.aspect2D"]], "cellfaceids (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.cellFaceIDs"]], "facesback (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.facesBack"]], "facesbottom (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.facesBottom"]], "facesdown (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.facesDown"]], "facesfront (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.facesFront"]], "facesleft (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.facesLeft"]], "facesright (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.facesRight"]], "facestop (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.facesTop"]], "facesup (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.facesUp"]], "fipy.meshes.abstractmesh": [[208, "module-fipy.meshes.abstractMesh"]], "x (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.x"]], "y (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.y"]], "z (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.z"]], "fipy.meshes.builders": [[209, "module-fipy.meshes.builders"]], "fipy.meshes.builders.abstractgridbuilder": [[210, "module-fipy.meshes.builders.abstractGridBuilder"]], "fipy.meshes.builders.grid1dbuilder": [[211, "module-fipy.meshes.builders.grid1DBuilder"]], "fipy.meshes.builders.grid2dbuilder": [[212, "module-fipy.meshes.builders.grid2DBuilder"]], "fipy.meshes.builders.grid3dbuilder": [[213, "module-fipy.meshes.builders.grid3DBuilder"]], "fipy.meshes.builders.periodicgrid1dbuilder": [[214, "module-fipy.meshes.builders.periodicGrid1DBuilder"]], "fipy.meshes.builders.utilityclasses": [[215, "module-fipy.meshes.builders.utilityClasses"]], "fipy.meshes.cylindricalgrid1d": [[216, "module-fipy.meshes.cylindricalGrid1D"]], "fipy.meshes.cylindricalgrid2d": [[217, "module-fipy.meshes.cylindricalGrid2D"]], "cylindricalnonuniformgrid1d (class in fipy.meshes.cylindricalnonuniformgrid1d)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__div__"]], "__mul__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.aspect2D"]], "cellfaceids (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesUp"]], "fipy.meshes.cylindricalnonuniformgrid1d": [[218, "module-fipy.meshes.cylindricalNonUniformGrid1D"]], "x (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.x"]], "y (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.y"]], "z (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.z"]], "cylindricalnonuniformgrid2d (class in fipy.meshes.cylindricalnonuniformgrid2d)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D"]], "vtkcelldataset (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__add__"]], "__div__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__div__"]], "__mul__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__mul__"]], "__radd__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__repr__"]], "__rmul__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__rmul__"]], "__sub__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.aspect2D"]], "cellfaceids (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.extrude"]], "facesback (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesRight"]], "facestop (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesTop"]], "facesup (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesUp"]], "fipy.meshes.cylindricalnonuniformgrid2d": [[219, "module-fipy.meshes.cylindricalNonUniformGrid2D"]], "x (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.x"]], "y (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.y"]], "z (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.z"]], "cylindricaluniformgrid1d (class in fipy.meshes.cylindricaluniformgrid1d)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D"]], "vtkcelldataset (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__add__"]], "__div__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__div__"]], "__radd__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.aspect2D"]], "cellfaceids (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesRight"]], "facestop (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesTop"]], "facesup (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesUp"]], "fipy.meshes.cylindricaluniformgrid1d": [[220, "module-fipy.meshes.cylindricalUniformGrid1D"]], "x (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.x"]], "y (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.y"]], "z (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.z"]], "cylindricaluniformgrid2d (class in fipy.meshes.cylindricaluniformgrid2d)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D"]], "vtkcelldataset (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__add__"]], "__div__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__div__"]], "__radd__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__repr__"]], "__sub__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.aspect2D"]], "cellfaceids (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.cellFaceIDs"]], "facesback (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesRight"]], "facestop (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesTop"]], "facesup (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesUp"]], "fipy.meshes.cylindricaluniformgrid2d": [[221, "module-fipy.meshes.cylindricalUniformGrid2D"]], "x (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.x"]], "y (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.y"]], "z (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.z"]], "cylindricalgrid1d() (in module fipy.meshes.factorymeshes)": [[222, "fipy.meshes.factoryMeshes.CylindricalGrid1D"]], "cylindricalgrid2d() (in module fipy.meshes.factorymeshes)": [[222, "fipy.meshes.factoryMeshes.CylindricalGrid2D"]], "grid1d() (in module fipy.meshes.factorymeshes)": [[222, "fipy.meshes.factoryMeshes.Grid1D"]], "grid2d() (in module fipy.meshes.factorymeshes)": [[222, "fipy.meshes.factoryMeshes.Grid2D"]], "grid3d() (in module fipy.meshes.factorymeshes)": [[222, "fipy.meshes.factoryMeshes.Grid3D"]], "sphericalgrid1d() (in module fipy.meshes.factorymeshes)": [[222, "fipy.meshes.factoryMeshes.SphericalGrid1D"]], "fipy.meshes.factorymeshes": [[222, "module-fipy.meshes.factoryMeshes"]], "gmsh2d (class in fipy.meshes.gmshmesh)": [[223, "fipy.meshes.gmshMesh.Gmsh2D"]], "gmsh2din3dspace (class in fipy.meshes.gmshmesh)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace"]], "gmsh3d (class in fipy.meshes.gmshmesh)": [[223, "fipy.meshes.gmshMesh.Gmsh3D"]], "gmshgrid2d (class in fipy.meshes.gmshmesh)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D"]], "gmshgrid3d (class in fipy.meshes.gmshmesh)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.VTKFaceDataSet"]], "__add__() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmsh3d method)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.__add__"]], "__div__() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmsh3d method)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.__div__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh3d method)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.__mul__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh3d method)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.__radd__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh3d method)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.__repr__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh3d method)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.__rmul__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh3d method)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.__sub__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh3d method)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.__truediv__"]], "aspect2d (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.aspect2D"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.cellFaceIDs"]], "extrude() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.extrude"]], "extrude() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.extrude"]], "extrude() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.extrude"]], "facesback (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.facesBack"]], "facesbottom (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.facesBottom"]], "facesdown (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.facesDown"]], "facesfront (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.facesFront"]], "facesleft (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.facesLeft"]], "facesright (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.facesRight"]], "facestop (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.facesTop"]], "facesup (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.facesUp"]], "fipy.meshes.gmshmesh": [[223, "module-fipy.meshes.gmshMesh"]], "openmshfile() (in module fipy.meshes.gmshmesh)": [[223, "fipy.meshes.gmshMesh.openMSHFile"]], "openposfile() (in module fipy.meshes.gmshmesh)": [[223, "fipy.meshes.gmshMesh.openPOSFile"]], "x (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.x"]], "x (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.x"]], "x (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.x"]], "x (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.x"]], "x (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.x"]], "y (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.y"]], "y (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.y"]], "y (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.y"]], "y (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.y"]], "y (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.y"]], "z (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.z"]], "z (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.z"]], "z (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.z"]], "z (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.z"]], "z (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.z"]], "fipy.meshes.grid1d": [[224, "module-fipy.meshes.grid1D"]], "fipy.meshes.grid2d": [[225, "module-fipy.meshes.grid2D"]], "fipy.meshes.grid3d": [[226, "module-fipy.meshes.grid3D"]], "mesh (class in fipy.meshes.mesh)": [[227, "fipy.meshes.mesh.Mesh"]], "meshadditionerror": [[227, "fipy.meshes.mesh.MeshAdditionError"]], "vtkcelldataset (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh.mesh method)": [[227, "fipy.meshes.mesh.Mesh.__add__"]], "__cause__ (fipy.meshes.mesh.meshadditionerror attribute)": [[227, "fipy.meshes.mesh.MeshAdditionError.__cause__"]], "__context__ (fipy.meshes.mesh.meshadditionerror attribute)": [[227, "fipy.meshes.mesh.MeshAdditionError.__context__"]], "__delattr__() (fipy.meshes.mesh.meshadditionerror method)": [[227, "fipy.meshes.mesh.MeshAdditionError.__delattr__"]], "__div__() (fipy.meshes.mesh.mesh method)": [[227, "fipy.meshes.mesh.Mesh.__div__"]], "__getattribute__() (fipy.meshes.mesh.meshadditionerror method)": [[227, "fipy.meshes.mesh.MeshAdditionError.__getattribute__"]], "__mul__() (fipy.meshes.mesh.mesh method)": [[227, "fipy.meshes.mesh.Mesh.__mul__"]], "__radd__() (fipy.meshes.mesh.mesh method)": [[227, "fipy.meshes.mesh.Mesh.__radd__"]], "__reduce__() (fipy.meshes.mesh.meshadditionerror method)": [[227, "fipy.meshes.mesh.MeshAdditionError.__reduce__"]], "__repr__() (fipy.meshes.mesh.mesh method)": [[227, "fipy.meshes.mesh.Mesh.__repr__"]], "__repr__() (fipy.meshes.mesh.meshadditionerror method)": [[227, "fipy.meshes.mesh.MeshAdditionError.__repr__"]], "__rmul__() (fipy.meshes.mesh.mesh method)": [[227, "fipy.meshes.mesh.Mesh.__rmul__"]], "__setattr__() (fipy.meshes.mesh.meshadditionerror method)": [[227, "fipy.meshes.mesh.MeshAdditionError.__setattr__"]], "__str__() (fipy.meshes.mesh.meshadditionerror method)": [[227, "fipy.meshes.mesh.MeshAdditionError.__str__"]], "__sub__() (fipy.meshes.mesh.mesh method)": [[227, "fipy.meshes.mesh.Mesh.__sub__"]], "__truediv__() (fipy.meshes.mesh.mesh method)": [[227, "fipy.meshes.mesh.Mesh.__truediv__"]], "aspect2d (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.aspect2D"]], "cellfaceids (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.cellFaceIDs"]], "facesback (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.facesBack"]], "facesbottom (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.facesBottom"]], "facesdown (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.facesDown"]], "facesfront (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.facesFront"]], "facesleft (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.facesLeft"]], "facesright (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.facesRight"]], "facestop (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.facesTop"]], "facesup (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.facesUp"]], "fipy.meshes.mesh": [[227, "module-fipy.meshes.mesh"]], "with_traceback() (fipy.meshes.mesh.meshadditionerror method)": [[227, "fipy.meshes.mesh.MeshAdditionError.with_traceback"]], "x (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.x"]], "y (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.y"]], "z (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.z"]], "mesh1d (class in fipy.meshes.mesh1d)": [[228, "fipy.meshes.mesh1D.Mesh1D"]], "vtkcelldataset (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh1d.mesh1d method)": [[228, "fipy.meshes.mesh1D.Mesh1D.__add__"]], "__div__() (fipy.meshes.mesh1d.mesh1d method)": [[228, "fipy.meshes.mesh1D.Mesh1D.__div__"]], "__mul__() (fipy.meshes.mesh1d.mesh1d method)": [[228, "fipy.meshes.mesh1D.Mesh1D.__mul__"]], "__radd__() (fipy.meshes.mesh1d.mesh1d method)": [[228, "fipy.meshes.mesh1D.Mesh1D.__radd__"]], "__repr__() (fipy.meshes.mesh1d.mesh1d method)": [[228, "fipy.meshes.mesh1D.Mesh1D.__repr__"]], "__rmul__() (fipy.meshes.mesh1d.mesh1d method)": [[228, "fipy.meshes.mesh1D.Mesh1D.__rmul__"]], "__sub__() (fipy.meshes.mesh1d.mesh1d method)": [[228, "fipy.meshes.mesh1D.Mesh1D.__sub__"]], "__truediv__() (fipy.meshes.mesh1d.mesh1d method)": [[228, "fipy.meshes.mesh1D.Mesh1D.__truediv__"]], "aspect2d (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.aspect2D"]], "cellfaceids (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.cellFaceIDs"]], "facesback (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.facesBack"]], "facesbottom (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.facesBottom"]], "facesdown (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.facesDown"]], "facesfront (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.facesFront"]], "facesleft (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.facesLeft"]], "facesright (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.facesRight"]], "facestop (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.facesTop"]], "facesup (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.facesUp"]], "fipy.meshes.mesh1d": [[228, "module-fipy.meshes.mesh1D"]], "x (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.x"]], "y (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.y"]], "z (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.z"]], "mesh2d (class in fipy.meshes.mesh2d)": [[229, "fipy.meshes.mesh2D.Mesh2D"]], "vtkcelldataset (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.__add__"]], "__div__() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.__div__"]], "__mul__() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.__mul__"]], "__radd__() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.__radd__"]], "__repr__() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.__repr__"]], "__rmul__() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.__rmul__"]], "__sub__() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.__sub__"]], "__truediv__() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.__truediv__"]], "aspect2d (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.aspect2D"]], "cellfaceids (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.cellFaceIDs"]], "extrude() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.extrude"]], "facesback (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.facesBack"]], "facesbottom (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.facesBottom"]], "facesdown (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.facesDown"]], "facesfront (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.facesFront"]], "facesleft (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.facesLeft"]], "facesright (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.facesRight"]], "facestop (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.facesTop"]], "facesup (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.facesUp"]], "fipy.meshes.mesh2d": [[229, "module-fipy.meshes.mesh2D"]], "x (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.x"]], "y (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.y"]], "z (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.z"]], "nonuniformgrid1d (class in fipy.meshes.nonuniformgrid1d)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__div__"]], "__mul__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.aspect2D"]], "cellfaceids (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesUp"]], "fipy.meshes.nonuniformgrid1d": [[230, "module-fipy.meshes.nonUniformGrid1D"]], "x (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.x"]], "y (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.y"]], "z (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.z"]], "nonuniformgrid2d (class in fipy.meshes.nonuniformgrid2d)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__div__"]], "__mul__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.aspect2D"]], "cellfaceids (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.extrude"]], "facesback (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesUp"]], "fipy.meshes.nonuniformgrid2d": [[231, "module-fipy.meshes.nonUniformGrid2D"]], "x (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.x"]], "y (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.y"]], "z (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.z"]], "nonuniformgrid3d (class in fipy.meshes.nonuniformgrid3d)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__div__"]], "__mul__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.aspect2D"]], "cellfaceids (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.cellFaceIDs"]], "facesback (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesUp"]], "fipy.meshes.nonuniformgrid3d": [[232, "module-fipy.meshes.nonUniformGrid3D"]], "x (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.x"]], "y (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.y"]], "z (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.z"]], "periodicgrid1d (class in fipy.meshes.periodicgrid1d)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D"]], "vtkcelldataset (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__add__"]], "__div__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__div__"]], "__mul__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__mul__"]], "__radd__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__radd__"]], "__repr__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesBack"]], "facesbottom (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesBottom"]], "facesdown (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesDown"]], "facesfront (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesFront"]], "facesleft (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesLeft"]], "facesright (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesRight"]], "facestop (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesTop"]], "facesup (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesUp"]], "fipy.meshes.periodicgrid1d": [[233, "module-fipy.meshes.periodicGrid1D"]], "x (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.x"]], "y (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.y"]], "z (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.z"]], "periodicgrid2d (class in fipy.meshes.periodicgrid2d)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D"]], "periodicgrid2dleftright (class in fipy.meshes.periodicgrid2d)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight"]], "periodicgrid2dtopbottom (class in fipy.meshes.periodicgrid2d)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__add__"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__add__"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__add__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__div__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__div__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__div__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__mul__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__mul__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__mul__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__radd__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__radd__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__radd__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__repr__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__repr__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__sub__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__sub__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.aspect2D"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.cellFaceIDs"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.extrude"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.extrude"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.extrude"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesBack"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesBack"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesBack"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesBottom"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesDown"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesDown"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesDown"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesFront"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesFront"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesFront"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesLeft"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesLeft"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesLeft"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesRight"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesRight"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesRight"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesTop"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesTop"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesTop"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesUp"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesUp"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesUp"]], "fipy.meshes.periodicgrid2d": [[234, "module-fipy.meshes.periodicGrid2D"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.x"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.x"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.x"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.y"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.y"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.y"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.z"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.z"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.z"]], "periodicgrid3d (class in fipy.meshes.periodicgrid3d)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D"]], "periodicgrid3dfrontback (class in fipy.meshes.periodicgrid3d)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack"]], "periodicgrid3dleftright (class in fipy.meshes.periodicgrid3d)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight"]], "periodicgrid3dleftrightfrontback (class in fipy.meshes.periodicgrid3d)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack"]], "periodicgrid3dleftrighttopbottom (class in fipy.meshes.periodicgrid3d)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom"]], "periodicgrid3dtopbottom (class in fipy.meshes.periodicgrid3d)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom"]], "periodicgrid3dtopbottomfrontback (class in fipy.meshes.periodicgrid3d)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__add__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__div__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__mul__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__radd__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.aspect2D"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.cellFaceIDs"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesBack"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesBottom"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesDown"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesFront"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesLeft"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesRight"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesTop"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesUp"]], "fipy.meshes.periodicgrid3d": [[235, "module-fipy.meshes.periodicGrid3D"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.x"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.y"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.z"]], "fipy.meshes.representations": [[236, "module-fipy.meshes.representations"]], "fipy.meshes.representations.abstractrepresentation": [[237, "module-fipy.meshes.representations.abstractRepresentation"]], "fipy.meshes.representations.gridrepresentation": [[238, "module-fipy.meshes.representations.gridRepresentation"]], "fipy.meshes.representations.meshrepresentation": [[239, "module-fipy.meshes.representations.meshRepresentation"]], "skewedgrid2d (class in fipy.meshes.skewedgrid2d)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D"]], "vtkcelldataset (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__add__"]], "__div__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__div__"]], "__mul__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__mul__"]], "__radd__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__radd__"]], "__repr__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__repr__"]], "__rmul__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__rmul__"]], "__sub__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__sub__"]], "__truediv__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__truediv__"]], "aspect2d (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.aspect2D"]], "cellfaceids (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.extrude"]], "facesback (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesBack"]], "facesbottom (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesBottom"]], "facesdown (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesDown"]], "facesfront (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesFront"]], "facesleft (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesLeft"]], "facesright (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesRight"]], "facestop (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesTop"]], "facesup (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesUp"]], "fipy.meshes.skewedgrid2d": [[240, "module-fipy.meshes.skewedGrid2D"]], "physicalshape (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.physicalShape"]], "x (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.x"]], "y (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.y"]], "z (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.z"]], "sphericalnonuniformgrid1d (class in fipy.meshes.sphericalnonuniformgrid1d)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__div__"]], "__mul__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.aspect2D"]], "cellfaceids (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesUp"]], "fipy.meshes.sphericalnonuniformgrid1d": [[241, "module-fipy.meshes.sphericalNonUniformGrid1D"]], "x (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.x"]], "y (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.y"]], "z (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.z"]], "sphericaluniformgrid1d (class in fipy.meshes.sphericaluniformgrid1d)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D"]], "vtkcelldataset (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__add__"]], "__div__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__div__"]], "__radd__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.aspect2D"]], "cellfaceids (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesRight"]], "facestop (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesTop"]], "facesup (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesUp"]], "fipy.meshes.sphericaluniformgrid1d": [[242, "module-fipy.meshes.sphericalUniformGrid1D"]], "x (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.x"]], "y (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.y"]], "z (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.z"]], "fipy.meshes.test": [[243, "module-fipy.meshes.test"]], "fipy.meshes.topologies": [[244, "module-fipy.meshes.topologies"]], "fipy.meshes.topologies.abstracttopology": [[245, "module-fipy.meshes.topologies.abstractTopology"]], "fipy.meshes.topologies.gridtopology": [[246, "module-fipy.meshes.topologies.gridTopology"]], "fipy.meshes.topologies.meshtopology": [[247, "module-fipy.meshes.topologies.meshTopology"]], "tri2d (class in fipy.meshes.tri2d)": [[248, "fipy.meshes.tri2D.Tri2D"]], "vtkcelldataset (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.__add__"]], "__div__() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.__div__"]], "__mul__() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.__mul__"]], "__radd__() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.__radd__"]], "__repr__() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.__repr__"]], "__rmul__() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.__rmul__"]], "__sub__() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.__sub__"]], "__truediv__() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.__truediv__"]], "aspect2d (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.aspect2D"]], "cellfaceids (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.cellFaceIDs"]], "extrude() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.extrude"]], "facesback (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.facesBack"]], "facesbottom (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.facesBottom"]], "facesdown (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.facesDown"]], "facesfront (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.facesFront"]], "facesleft (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.facesLeft"]], "facesright (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.facesRight"]], "facestop (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.facesTop"]], "facesup (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.facesUp"]], "fipy.meshes.tri2d": [[248, "module-fipy.meshes.tri2D"]], "physicalshape (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.physicalShape"]], "x (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.x"]], "y (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.y"]], "z (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.z"]], "uniformgrid (class in fipy.meshes.uniformgrid)": [[249, "fipy.meshes.uniformGrid.UniformGrid"]], "vtkcelldataset (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid.uniformgrid method)": [[249, "fipy.meshes.uniformGrid.UniformGrid.__add__"]], "__div__() (fipy.meshes.uniformgrid.uniformgrid method)": [[249, "fipy.meshes.uniformGrid.UniformGrid.__div__"]], "__radd__() (fipy.meshes.uniformgrid.uniformgrid method)": [[249, "fipy.meshes.uniformGrid.UniformGrid.__radd__"]], "__repr__() (fipy.meshes.uniformgrid.uniformgrid method)": [[249, "fipy.meshes.uniformGrid.UniformGrid.__repr__"]], "__sub__() (fipy.meshes.uniformgrid.uniformgrid method)": [[249, "fipy.meshes.uniformGrid.UniformGrid.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid.uniformgrid method)": [[249, "fipy.meshes.uniformGrid.UniformGrid.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.aspect2D"]], "cellfaceids (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.cellFaceIDs"]], "facesback (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.facesBack"]], "facesbottom (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.facesBottom"]], "facesdown (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.facesDown"]], "facesfront (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.facesFront"]], "facesleft (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.facesLeft"]], "facesright (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.facesRight"]], "facestop (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.facesTop"]], "facesup (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.facesUp"]], "fipy.meshes.uniformgrid": [[249, "module-fipy.meshes.uniformGrid"]], "x (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.x"]], "y (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.y"]], "z (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.z"]], "uniformgrid1d (class in fipy.meshes.uniformgrid1d)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D"]], "vtkcelldataset (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.__add__"]], "__div__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.__div__"]], "__radd__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.aspect2D"]], "cellfaceids (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesDown"]], "facesfront (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesFront"]], "facesleft (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesLeft"]], "facesright (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesRight"]], "facestop (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesTop"]], "facesup (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesUp"]], "fipy.meshes.uniformgrid1d": [[250, "module-fipy.meshes.uniformGrid1D"]], "x (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.x"]], "y (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.y"]], "z (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.z"]], "uniformgrid2d (class in fipy.meshes.uniformgrid2d)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D"]], "vtkcelldataset (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.__add__"]], "__div__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.__div__"]], "__radd__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.__repr__"]], "__sub__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.aspect2D"]], "cellfaceids (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.cellFaceIDs"]], "facesback (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesDown"]], "facesfront (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesFront"]], "facesleft (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesLeft"]], "facesright (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesRight"]], "facestop (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesTop"]], "facesup (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesUp"]], "fipy.meshes.uniformgrid2d": [[251, "module-fipy.meshes.uniformGrid2D"]], "x (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.x"]], "y (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.y"]], "z (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.z"]], "uniformgrid3d (class in fipy.meshes.uniformgrid3d)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D"]], "vtkcelldataset (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.__add__"]], "__div__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.__div__"]], "__radd__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.__radd__"]], "__repr__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.__repr__"]], "__sub__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.aspect2D"]], "cellfaceids (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.cellFaceIDs"]], "facesback (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesBack"]], "facesbottom (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesBottom"]], "facesdown (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesDown"]], "facesfront (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesFront"]], "facesleft (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesLeft"]], "facesright (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesRight"]], "facestop (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesTop"]], "facesup (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesUp"]], "fipy.meshes.uniformgrid3d": [[252, "module-fipy.meshes.uniformGrid3D"]], "x (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.x"]], "y (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.y"]], "z (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[252, "fipy.meshes.uniformGrid3D.UniformGrid3D.z"]], "defaultasymmetricsolver (in module fipy.solvers)": [[253, "fipy.solvers.DefaultAsymmetricSolver"]], "defaultsolver (in module fipy.solvers)": [[253, "fipy.solvers.DefaultSolver"]], "dummysolver (in module fipy.solvers)": [[253, "fipy.solvers.DummySolver"]], "generalsolver (in module fipy.solvers)": [[253, "fipy.solvers.GeneralSolver"]], "serialsolvererror": [[253, "fipy.solvers.SerialSolverError"]], "__cause__ (fipy.solvers.serialsolvererror attribute)": [[253, "fipy.solvers.SerialSolverError.__cause__"]], "__context__ (fipy.solvers.serialsolvererror attribute)": [[253, "fipy.solvers.SerialSolverError.__context__"]], "__delattr__() (fipy.solvers.serialsolvererror method)": [[253, "fipy.solvers.SerialSolverError.__delattr__"]], "__getattribute__() (fipy.solvers.serialsolvererror method)": [[253, "fipy.solvers.SerialSolverError.__getattribute__"]], "__reduce__() (fipy.solvers.serialsolvererror method)": [[253, "fipy.solvers.SerialSolverError.__reduce__"]], "__repr__() (fipy.solvers.serialsolvererror method)": [[253, "fipy.solvers.SerialSolverError.__repr__"]], "__setattr__() (fipy.solvers.serialsolvererror method)": [[253, "fipy.solvers.SerialSolverError.__setattr__"]], "__str__() (fipy.solvers.serialsolvererror method)": [[253, "fipy.solvers.SerialSolverError.__str__"]], "fipy.solvers": [[253, "module-fipy.solvers"]], "with_traceback() (fipy.solvers.serialsolvererror method)": [[253, "fipy.solvers.SerialSolverError.with_traceback"]], "fipy.solvers.pyamg": [[254, "module-fipy.solvers.pyAMG"]], "linearcgssolver (class in fipy.solvers.pyamg.linearcgssolver)": [[255, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.pyamg.linearcgssolver.linearcgssolver method)": [[255, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.__repr__"]], "fipy.solvers.pyamg.linearcgssolver": [[255, "module-fipy.solvers.pyAMG.linearCGSSolver"]], "lineargmressolver (class in fipy.solvers.pyamg.lineargmressolver)": [[256, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pyamg.lineargmressolver.lineargmressolver method)": [[256, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "fipy.solvers.pyamg.lineargmressolver": [[256, "module-fipy.solvers.pyAMG.linearGMRESSolver"]], "lineargeneralsolver (class in fipy.solvers.pyamg.lineargeneralsolver)": [[257, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver"]], "__repr__() (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver method)": [[257, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.__repr__"]], "fipy.solvers.pyamg.lineargeneralsolver": [[257, "module-fipy.solvers.pyAMG.linearGeneralSolver"]], "linearlusolver (class in fipy.solvers.pyamg.linearlusolver)": [[258, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pyamg.linearlusolver.linearlusolver method)": [[258, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.__repr__"]], "fipy.solvers.pyamg.linearlusolver": [[258, "module-fipy.solvers.pyAMG.linearLUSolver"]], "linearpcgsolver (class in fipy.solvers.pyamg.linearpcgsolver)": [[259, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver method)": [[259, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.__repr__"]], "fipy.solvers.pyamg.linearpcgsolver": [[259, "module-fipy.solvers.pyAMG.linearPCGSolver"]], "fipy.solvers.pyamg.preconditioners": [[260, "module-fipy.solvers.pyAMG.preconditioners"]], "fipy.solvers.pyamg.preconditioners.smoothedaggregationpreconditioner": [[261, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[262, "module-fipy.solvers.pyamgx"]], "aggregationamgsolver (class in fipy.solvers.pyamgx.aggregationamgsolver)": [[263, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver"]], "__repr__() (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver method)": [[263, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.__repr__"]], "fipy.solvers.pyamgx.aggregationamgsolver": [[263, "module-fipy.solvers.pyamgx.aggregationAMGSolver"]], "classicalamgsolver (class in fipy.solvers.pyamgx.classicalamgsolver)": [[264, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver"]], "__repr__() (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver method)": [[264, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.__repr__"]], "fipy.solvers.pyamgx.classicalamgsolver": [[264, "module-fipy.solvers.pyamgx.classicalAMGSolver"]], "linearbicgstabsolver (class in fipy.solvers.pyamgx.linearbicgstabsolver)": [[265, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver"]], "__repr__() (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver method)": [[265, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.__repr__"]], "fipy.solvers.pyamgx.linearbicgstabsolver": [[265, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"]], "linearcgsolver (class in fipy.solvers.pyamgx.linearcgsolver)": [[266, "fipy.solvers.pyamgx.linearCGSolver.LinearCGSolver"]], "linearpcgsolver (in module fipy.solvers.pyamgx.linearcgsolver)": [[266, "fipy.solvers.pyamgx.linearCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pyamgx.linearcgsolver.linearcgsolver method)": [[266, "fipy.solvers.pyamgx.linearCGSolver.LinearCGSolver.__repr__"]], "fipy.solvers.pyamgx.linearcgsolver": [[266, "module-fipy.solvers.pyamgx.linearCGSolver"]], "linearfgmressolver (class in fipy.solvers.pyamgx.linearfgmressolver)": [[267, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver"]], "__repr__() (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver method)": [[267, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.__repr__"]], "fipy.solvers.pyamgx.linearfgmressolver": [[267, "module-fipy.solvers.pyamgx.linearFGMRESSolver"]], "lineargmressolver (class in fipy.solvers.pyamgx.lineargmressolver)": [[268, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver method)": [[268, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "fipy.solvers.pyamgx.lineargmressolver": [[268, "module-fipy.solvers.pyamgx.linearGMRESSolver"]], "linearlusolver (class in fipy.solvers.pyamgx.linearlusolver)": [[269, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pyamgx.linearlusolver.linearlusolver method)": [[269, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.__repr__"]], "fipy.solvers.pyamgx.linearlusolver": [[269, "module-fipy.solvers.pyamgx.linearLUSolver"]], "fipy.solvers.pyamgx.preconditioners": [[270, "module-fipy.solvers.pyamgx.preconditioners"]], "fipy.solvers.pyamgx.preconditioners.preconditioners": [[271, "module-fipy.solvers.pyamgx.preconditioners.preconditioners"]], "pyamgxsolver (class in fipy.solvers.pyamgx.pyamgxsolver)": [[272, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver"]], "__repr__() (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver method)": [[272, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.__repr__"]], "fipy.solvers.pyamgx.pyamgxsolver": [[272, "module-fipy.solvers.pyamgx.pyAMGXSolver"]], "fipy.solvers.pyamgx.smoothers": [[273, "module-fipy.solvers.pyamgx.smoothers"]], "fipy.solvers.pyamgx.smoothers.smoothers": [[274, "module-fipy.solvers.pyamgx.smoothers.smoothers"]], "fipy.solvers.pysparse": [[275, "module-fipy.solvers.pysparse"]], "linearcgssolver (class in fipy.solvers.pysparse.linearcgssolver)": [[276, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.pysparse.linearcgssolver.linearcgssolver method)": [[276, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.__repr__"]], "fipy.solvers.pysparse.linearcgssolver": [[276, "module-fipy.solvers.pysparse.linearCGSSolver"]], "lineargmressolver (class in fipy.solvers.pysparse.lineargmressolver)": [[277, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pysparse.lineargmressolver.lineargmressolver method)": [[277, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "fipy.solvers.pysparse.lineargmressolver": [[277, "module-fipy.solvers.pysparse.linearGMRESSolver"]], "linearjorsolver (class in fipy.solvers.pysparse.linearjorsolver)": [[278, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver"]], "__repr__() (fipy.solvers.pysparse.linearjorsolver.linearjorsolver method)": [[278, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.__repr__"]], "fipy.solvers.pysparse.linearjorsolver": [[278, "module-fipy.solvers.pysparse.linearJORSolver"]], "linearlusolver (class in fipy.solvers.pysparse.linearlusolver)": [[279, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pysparse.linearlusolver.linearlusolver method)": [[279, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.__repr__"]], "fipy.solvers.pysparse.linearlusolver": [[279, "module-fipy.solvers.pysparse.linearLUSolver"]], "linearpcgsolver (class in fipy.solvers.pysparse.linearpcgsolver)": [[280, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver method)": [[280, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.__repr__"]], "fipy.solvers.pysparse.linearpcgsolver": [[280, "module-fipy.solvers.pysparse.linearPCGSolver"]], "fipy.solvers.pysparse.preconditioners": [[281, "module-fipy.solvers.pysparse.preconditioners"]], "jacobipreconditioner (class in fipy.solvers.pysparse.preconditioners.jacobipreconditioner)": [[282, "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.pysparse.preconditioners.jacobipreconditioner": [[282, "module-fipy.solvers.pysparse.preconditioners.jacobiPreconditioner"]], "preconditioner (class in fipy.solvers.pysparse.preconditioners.preconditioner)": [[283, "fipy.solvers.pysparse.preconditioners.preconditioner.Preconditioner"]], "fipy.solvers.pysparse.preconditioners.preconditioner": [[283, "module-fipy.solvers.pysparse.preconditioners.preconditioner"]], "ssorpreconditioner (class in fipy.solvers.pysparse.preconditioners.ssorpreconditioner)": [[284, "fipy.solvers.pysparse.preconditioners.ssorPreconditioner.SsorPreconditioner"]], "fipy.solvers.pysparse.preconditioners.ssorpreconditioner": [[284, "module-fipy.solvers.pysparse.preconditioners.ssorPreconditioner"]], "pysparsesolver (class in fipy.solvers.pysparse.pysparsesolver)": [[285, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver"]], "__repr__() (fipy.solvers.pysparse.pysparsesolver.pysparsesolver method)": [[285, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.__repr__"]], "fipy.solvers.pysparse.pysparsesolver": [[285, "module-fipy.solvers.pysparse.pysparseSolver"]], "fipy.solvers.pysparsematrixsolver": [[286, "module-fipy.solvers.pysparseMatrixSolver"]], "fipy.solvers.scipy": [[287, "module-fipy.solvers.scipy"]], "linearbicgstabsolver (class in fipy.solvers.scipy.linearbicgstabsolver)": [[288, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver"]], "__repr__() (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver method)": [[288, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.__repr__"]], "fipy.solvers.scipy.linearbicgstabsolver": [[288, "module-fipy.solvers.scipy.linearBicgstabSolver"]], "linearcgssolver (class in fipy.solvers.scipy.linearcgssolver)": [[289, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.scipy.linearcgssolver.linearcgssolver method)": [[289, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.__repr__"]], "fipy.solvers.scipy.linearcgssolver": [[289, "module-fipy.solvers.scipy.linearCGSSolver"]], "lineargmressolver (class in fipy.solvers.scipy.lineargmressolver)": [[290, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.scipy.lineargmressolver.lineargmressolver method)": [[290, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "fipy.solvers.scipy.lineargmressolver": [[290, "module-fipy.solvers.scipy.linearGMRESSolver"]], "linearlusolver (class in fipy.solvers.scipy.linearlusolver)": [[291, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.scipy.linearlusolver.linearlusolver method)": [[291, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.__repr__"]], "fipy.solvers.scipy.linearlusolver": [[291, "module-fipy.solvers.scipy.linearLUSolver"]], "linearpcgsolver (class in fipy.solvers.scipy.linearpcgsolver)": [[292, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver method)": [[292, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.__repr__"]], "fipy.solvers.scipy.linearpcgsolver": [[292, "module-fipy.solvers.scipy.linearPCGSolver"]], "fipy.solvers.scipy.scipykrylovsolver": [[293, "module-fipy.solvers.scipy.scipyKrylovSolver"]], "fipy.solvers.scipy.scipysolver": [[294, "module-fipy.solvers.scipy.scipySolver"]], "illconditionedpreconditionerwarning": [[295, "fipy.solvers.solver.IllConditionedPreconditionerWarning"]], "matrixillconditionedwarning": [[295, "fipy.solvers.solver.MatrixIllConditionedWarning"]], "maximumiterationwarning": [[295, "fipy.solvers.solver.MaximumIterationWarning"]], "preconditionernotpositivedefinitewarning": [[295, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning"]], "preconditionerwarning": [[295, "fipy.solvers.solver.PreconditionerWarning"]], "scalarquantityoutofrangewarning": [[295, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning"]], "solver (class in fipy.solvers.solver)": [[295, "fipy.solvers.solver.Solver"]], "solverconvergencewarning": [[295, "fipy.solvers.solver.SolverConvergenceWarning"]], "stagnatedsolverwarning": [[295, "fipy.solvers.solver.StagnatedSolverWarning"]], "__cause__ (fipy.solvers.solver.illconditionedpreconditionerwarning attribute)": [[295, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__cause__"]], "__cause__ (fipy.solvers.solver.matrixillconditionedwarning attribute)": [[295, "fipy.solvers.solver.MatrixIllConditionedWarning.__cause__"]], "__cause__ (fipy.solvers.solver.maximumiterationwarning attribute)": [[295, "fipy.solvers.solver.MaximumIterationWarning.__cause__"]], "__cause__ (fipy.solvers.solver.preconditionernotpositivedefinitewarning attribute)": [[295, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__cause__"]], "__cause__ (fipy.solvers.solver.preconditionerwarning attribute)": [[295, "fipy.solvers.solver.PreconditionerWarning.__cause__"]], "__cause__ (fipy.solvers.solver.scalarquantityoutofrangewarning attribute)": [[295, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__cause__"]], "__cause__ (fipy.solvers.solver.solverconvergencewarning attribute)": [[295, "fipy.solvers.solver.SolverConvergenceWarning.__cause__"]], "__cause__ (fipy.solvers.solver.stagnatedsolverwarning attribute)": [[295, "fipy.solvers.solver.StagnatedSolverWarning.__cause__"]], "__context__ (fipy.solvers.solver.illconditionedpreconditionerwarning attribute)": [[295, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__context__"]], "__context__ (fipy.solvers.solver.matrixillconditionedwarning attribute)": [[295, "fipy.solvers.solver.MatrixIllConditionedWarning.__context__"]], "__context__ (fipy.solvers.solver.maximumiterationwarning attribute)": [[295, "fipy.solvers.solver.MaximumIterationWarning.__context__"]], "__context__ (fipy.solvers.solver.preconditionernotpositivedefinitewarning attribute)": [[295, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__context__"]], "__context__ (fipy.solvers.solver.preconditionerwarning attribute)": [[295, "fipy.solvers.solver.PreconditionerWarning.__context__"]], "__context__ (fipy.solvers.solver.scalarquantityoutofrangewarning attribute)": [[295, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__context__"]], "__context__ (fipy.solvers.solver.solverconvergencewarning attribute)": [[295, "fipy.solvers.solver.SolverConvergenceWarning.__context__"]], "__context__ (fipy.solvers.solver.stagnatedsolverwarning attribute)": [[295, "fipy.solvers.solver.StagnatedSolverWarning.__context__"]], "__delattr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[295, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[295, "fipy.solvers.solver.MatrixIllConditionedWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.maximumiterationwarning method)": [[295, "fipy.solvers.solver.MaximumIterationWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[295, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.preconditionerwarning method)": [[295, "fipy.solvers.solver.PreconditionerWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[295, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.solverconvergencewarning method)": [[295, "fipy.solvers.solver.SolverConvergenceWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[295, "fipy.solvers.solver.StagnatedSolverWarning.__delattr__"]], "__getattribute__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[295, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[295, "fipy.solvers.solver.MatrixIllConditionedWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.maximumiterationwarning method)": [[295, "fipy.solvers.solver.MaximumIterationWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[295, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.preconditionerwarning method)": [[295, "fipy.solvers.solver.PreconditionerWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[295, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.solverconvergencewarning method)": [[295, "fipy.solvers.solver.SolverConvergenceWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[295, "fipy.solvers.solver.StagnatedSolverWarning.__getattribute__"]], "__reduce__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[295, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[295, "fipy.solvers.solver.MatrixIllConditionedWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.maximumiterationwarning method)": [[295, "fipy.solvers.solver.MaximumIterationWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[295, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.preconditionerwarning method)": [[295, "fipy.solvers.solver.PreconditionerWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[295, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.solverconvergencewarning method)": [[295, "fipy.solvers.solver.SolverConvergenceWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[295, "fipy.solvers.solver.StagnatedSolverWarning.__reduce__"]], "__repr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[295, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__repr__"]], "__repr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[295, "fipy.solvers.solver.MatrixIllConditionedWarning.__repr__"]], "__repr__() (fipy.solvers.solver.maximumiterationwarning method)": [[295, "fipy.solvers.solver.MaximumIterationWarning.__repr__"]], "__repr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[295, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__repr__"]], "__repr__() (fipy.solvers.solver.preconditionerwarning method)": [[295, "fipy.solvers.solver.PreconditionerWarning.__repr__"]], "__repr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[295, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__repr__"]], "__repr__() (fipy.solvers.solver.solver method)": [[295, "fipy.solvers.solver.Solver.__repr__"]], "__repr__() (fipy.solvers.solver.solverconvergencewarning method)": [[295, "fipy.solvers.solver.SolverConvergenceWarning.__repr__"]], "__repr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[295, "fipy.solvers.solver.StagnatedSolverWarning.__repr__"]], "__setattr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[295, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[295, "fipy.solvers.solver.MatrixIllConditionedWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.maximumiterationwarning method)": [[295, "fipy.solvers.solver.MaximumIterationWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[295, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.preconditionerwarning method)": [[295, "fipy.solvers.solver.PreconditionerWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[295, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.solverconvergencewarning method)": [[295, "fipy.solvers.solver.SolverConvergenceWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[295, "fipy.solvers.solver.StagnatedSolverWarning.__setattr__"]], "__str__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[295, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__str__"]], "__str__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[295, "fipy.solvers.solver.MatrixIllConditionedWarning.__str__"]], "__str__() (fipy.solvers.solver.maximumiterationwarning method)": [[295, "fipy.solvers.solver.MaximumIterationWarning.__str__"]], "__str__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[295, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__str__"]], "__str__() (fipy.solvers.solver.preconditionerwarning method)": [[295, "fipy.solvers.solver.PreconditionerWarning.__str__"]], "__str__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[295, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__str__"]], "__str__() (fipy.solvers.solver.solverconvergencewarning method)": [[295, "fipy.solvers.solver.SolverConvergenceWarning.__str__"]], "__str__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[295, "fipy.solvers.solver.StagnatedSolverWarning.__str__"]], "fipy.solvers.solver": [[295, "module-fipy.solvers.solver"]], "with_traceback() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[295, "fipy.solvers.solver.IllConditionedPreconditionerWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.matrixillconditionedwarning method)": [[295, "fipy.solvers.solver.MatrixIllConditionedWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.maximumiterationwarning method)": [[295, "fipy.solvers.solver.MaximumIterationWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[295, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.preconditionerwarning method)": [[295, "fipy.solvers.solver.PreconditionerWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[295, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.solverconvergencewarning method)": [[295, "fipy.solvers.solver.SolverConvergenceWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.stagnatedsolverwarning method)": [[295, "fipy.solvers.solver.StagnatedSolverWarning.with_traceback"]], "fipy.solvers.test": [[296, "module-fipy.solvers.test"]], "fipy.solvers.trilinos": [[297, "module-fipy.solvers.trilinos"]], "fipy.solvers.trilinos.comms": [[298, "module-fipy.solvers.trilinos.comms"]], "epetracommwrapper (class in fipy.solvers.trilinos.comms.epetracommwrapper)": [[299, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper"]], "__repr__() (fipy.solvers.trilinos.comms.epetracommwrapper.epetracommwrapper method)": [[299, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper.__repr__"]], "fipy.solvers.trilinos.comms.epetracommwrapper": [[299, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"]], "serialepetracommwrapper (class in fipy.solvers.trilinos.comms.serialepetracommwrapper)": [[300, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper"]], "__repr__() (fipy.solvers.trilinos.comms.serialepetracommwrapper.serialepetracommwrapper method)": [[300, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper.__repr__"]], "fipy.solvers.trilinos.comms.serialepetracommwrapper": [[300, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"]], "linearbicgstabsolver (class in fipy.solvers.trilinos.linearbicgstabsolver)": [[301, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver"]], "__repr__() (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver method)": [[301, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.__repr__"]], "fipy.solvers.trilinos.linearbicgstabsolver": [[301, "module-fipy.solvers.trilinos.linearBicgstabSolver"]], "linearcgssolver (class in fipy.solvers.trilinos.linearcgssolver)": [[302, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.trilinos.linearcgssolver.linearcgssolver method)": [[302, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.__repr__"]], "fipy.solvers.trilinos.linearcgssolver": [[302, "module-fipy.solvers.trilinos.linearCGSSolver"]], "lineargmressolver (class in fipy.solvers.trilinos.lineargmressolver)": [[303, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.trilinos.lineargmressolver.lineargmressolver method)": [[303, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "fipy.solvers.trilinos.lineargmressolver": [[303, "module-fipy.solvers.trilinos.linearGMRESSolver"]], "linearlusolver (class in fipy.solvers.trilinos.linearlusolver)": [[304, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.trilinos.linearlusolver.linearlusolver method)": [[304, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.__repr__"]], "fipy.solvers.trilinos.linearlusolver": [[304, "module-fipy.solvers.trilinos.linearLUSolver"]], "linearpcgsolver (class in fipy.solvers.trilinos.linearpcgsolver)": [[305, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver method)": [[305, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.__repr__"]], "fipy.solvers.trilinos.linearpcgsolver": [[305, "module-fipy.solvers.trilinos.linearPCGSolver"]], "fipy.solvers.trilinos.preconditioners": [[306, "module-fipy.solvers.trilinos.preconditioners"]], "domdecomppreconditioner (class in fipy.solvers.trilinos.preconditioners.domdecomppreconditioner)": [[307, "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner.DomDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.domdecomppreconditioner": [[307, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"]], "icpreconditioner (class in fipy.solvers.trilinos.preconditioners.icpreconditioner)": [[308, "fipy.solvers.trilinos.preconditioners.icPreconditioner.ICPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icpreconditioner": [[308, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.trilinos.preconditioners.jacobipreconditioner)": [[309, "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobipreconditioner": [[309, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"]], "multilevelddmlpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelddmlpreconditioner)": [[310, "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner.MultilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelddmlpreconditioner": [[310, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"]], "multilevelddpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelddpreconditioner)": [[311, "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner.MultilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelddpreconditioner": [[311, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"]], "multilevelnssapreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelnssapreconditioner)": [[312, "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner.MultilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelnssapreconditioner": [[312, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"]], "multilevelsapreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsapreconditioner)": [[313, "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner.MultilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsapreconditioner": [[313, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"]], "multilevelsgspreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsgspreconditioner)": [[314, "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner.MultilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsgspreconditioner": [[314, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"]], "multilevelsolversmootherpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsolversmootherpreconditioner)": [[315, "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner.MultilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsolversmootherpreconditioner": [[315, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"]], "preconditioner (class in fipy.solvers.trilinos.preconditioners.preconditioner)": [[316, "fipy.solvers.trilinos.preconditioners.preconditioner.Preconditioner"]], "fipy.solvers.trilinos.preconditioners.preconditioner": [[316, "module-fipy.solvers.trilinos.preconditioners.preconditioner"]], "trilinosaztecoosolver (class in fipy.solvers.trilinos.trilinosaztecoosolver)": [[317, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver"]], "__repr__() (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver method)": [[317, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.__repr__"]], "fipy.solvers.trilinos.trilinosaztecoosolver": [[317, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"]], "trilinosmltest (class in fipy.solvers.trilinos.trilinosmltest)": [[318, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest"]], "__repr__() (fipy.solvers.trilinos.trilinosmltest.trilinosmltest method)": [[318, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.__repr__"]], "fipy.solvers.trilinos.trilinosmltest": [[318, "module-fipy.solvers.trilinos.trilinosMLTest"]], "trilinosnonlinearsolver (class in fipy.solvers.trilinos.trilinosnonlinearsolver)": [[319, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver"]], "__repr__() (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver method)": [[319, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.__repr__"]], "fipy.solvers.trilinos.trilinosnonlinearsolver": [[319, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"]], "trilinossolver (class in fipy.solvers.trilinos.trilinossolver)": [[320, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver"]], "__repr__() (fipy.solvers.trilinos.trilinossolver.trilinossolver method)": [[320, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.__repr__"]], "fipy.solvers.trilinos.trilinossolver": [[320, "module-fipy.solvers.trilinos.trilinosSolver"]], "l1error() (in module fipy.steppers)": [[321, "fipy.steppers.L1error"]], "l2error() (in module fipy.steppers)": [[321, "fipy.steppers.L2error"]], "linferror() (in module fipy.steppers)": [[321, "fipy.steppers.LINFerror"]], "fipy.steppers": [[321, "module-fipy.steppers"]], "sweepmonotonic() (in module fipy.steppers)": [[321, "fipy.steppers.sweepMonotonic"]], "pidstepper (class in fipy.steppers.pidstepper)": [[322, "fipy.steppers.pidStepper.PIDStepper"]], "fipy.steppers.pidstepper": [[322, "module-fipy.steppers.pidStepper"]], "pseudorkqsstepper (class in fipy.steppers.pseudorkqsstepper)": [[323, "fipy.steppers.pseudoRKQSStepper.PseudoRKQSStepper"]], "fipy.steppers.pseudorkqsstepper": [[323, "module-fipy.steppers.pseudoRKQSStepper"]], "fipy.steppers.stepper": [[324, "module-fipy.steppers.stepper"]], "abstractbaseclasserror": [[325, "fipy.terms.AbstractBaseClassError"]], "explicitvariableerror": [[325, "fipy.terms.ExplicitVariableError"]], "incorrectsolutionvariable": [[325, "fipy.terms.IncorrectSolutionVariable"]], "solutionvariablenumbererror": [[325, "fipy.terms.SolutionVariableNumberError"]], "solutionvariablerequirederror": [[325, "fipy.terms.SolutionVariableRequiredError"]], "termmultiplyerror": [[325, "fipy.terms.TermMultiplyError"]], "transienttermerror": [[325, "fipy.terms.TransientTermError"]], "vectorcoefferror": [[325, "fipy.terms.VectorCoeffError"]], "__cause__ (fipy.terms.abstractbaseclasserror attribute)": [[325, "fipy.terms.AbstractBaseClassError.__cause__"]], "__cause__ (fipy.terms.explicitvariableerror attribute)": [[325, "fipy.terms.ExplicitVariableError.__cause__"]], "__cause__ (fipy.terms.incorrectsolutionvariable attribute)": [[325, "fipy.terms.IncorrectSolutionVariable.__cause__"]], "__cause__ (fipy.terms.solutionvariablenumbererror attribute)": [[325, "fipy.terms.SolutionVariableNumberError.__cause__"]], "__cause__ (fipy.terms.solutionvariablerequirederror attribute)": [[325, "fipy.terms.SolutionVariableRequiredError.__cause__"]], "__cause__ (fipy.terms.termmultiplyerror attribute)": [[325, "fipy.terms.TermMultiplyError.__cause__"]], "__cause__ (fipy.terms.transienttermerror attribute)": [[325, "fipy.terms.TransientTermError.__cause__"]], "__cause__ (fipy.terms.vectorcoefferror attribute)": [[325, "fipy.terms.VectorCoeffError.__cause__"]], "__context__ (fipy.terms.abstractbaseclasserror attribute)": [[325, "fipy.terms.AbstractBaseClassError.__context__"]], "__context__ (fipy.terms.explicitvariableerror attribute)": [[325, "fipy.terms.ExplicitVariableError.__context__"]], "__context__ (fipy.terms.incorrectsolutionvariable attribute)": [[325, "fipy.terms.IncorrectSolutionVariable.__context__"]], "__context__ (fipy.terms.solutionvariablenumbererror attribute)": [[325, "fipy.terms.SolutionVariableNumberError.__context__"]], "__context__ (fipy.terms.solutionvariablerequirederror attribute)": [[325, "fipy.terms.SolutionVariableRequiredError.__context__"]], "__context__ (fipy.terms.termmultiplyerror attribute)": [[325, "fipy.terms.TermMultiplyError.__context__"]], "__context__ (fipy.terms.transienttermerror attribute)": [[325, "fipy.terms.TransientTermError.__context__"]], "__context__ (fipy.terms.vectorcoefferror attribute)": [[325, "fipy.terms.VectorCoeffError.__context__"]], "__delattr__() (fipy.terms.abstractbaseclasserror method)": [[325, "fipy.terms.AbstractBaseClassError.__delattr__"]], "__delattr__() (fipy.terms.explicitvariableerror method)": [[325, "fipy.terms.ExplicitVariableError.__delattr__"]], "__delattr__() (fipy.terms.incorrectsolutionvariable method)": [[325, "fipy.terms.IncorrectSolutionVariable.__delattr__"]], "__delattr__() (fipy.terms.solutionvariablenumbererror method)": [[325, "fipy.terms.SolutionVariableNumberError.__delattr__"]], "__delattr__() (fipy.terms.solutionvariablerequirederror method)": [[325, "fipy.terms.SolutionVariableRequiredError.__delattr__"]], "__delattr__() (fipy.terms.termmultiplyerror method)": [[325, "fipy.terms.TermMultiplyError.__delattr__"]], "__delattr__() (fipy.terms.transienttermerror method)": [[325, "fipy.terms.TransientTermError.__delattr__"]], "__delattr__() (fipy.terms.vectorcoefferror method)": [[325, "fipy.terms.VectorCoeffError.__delattr__"]], "__getattribute__() (fipy.terms.abstractbaseclasserror method)": [[325, "fipy.terms.AbstractBaseClassError.__getattribute__"]], "__getattribute__() (fipy.terms.explicitvariableerror method)": [[325, "fipy.terms.ExplicitVariableError.__getattribute__"]], "__getattribute__() (fipy.terms.incorrectsolutionvariable method)": [[325, "fipy.terms.IncorrectSolutionVariable.__getattribute__"]], "__getattribute__() (fipy.terms.solutionvariablenumbererror method)": [[325, "fipy.terms.SolutionVariableNumberError.__getattribute__"]], "__getattribute__() (fipy.terms.solutionvariablerequirederror method)": [[325, "fipy.terms.SolutionVariableRequiredError.__getattribute__"]], "__getattribute__() (fipy.terms.termmultiplyerror method)": [[325, "fipy.terms.TermMultiplyError.__getattribute__"]], "__getattribute__() (fipy.terms.transienttermerror method)": [[325, "fipy.terms.TransientTermError.__getattribute__"]], "__getattribute__() (fipy.terms.vectorcoefferror method)": [[325, "fipy.terms.VectorCoeffError.__getattribute__"]], "__reduce__() (fipy.terms.abstractbaseclasserror method)": [[325, "fipy.terms.AbstractBaseClassError.__reduce__"]], "__reduce__() (fipy.terms.explicitvariableerror method)": [[325, "fipy.terms.ExplicitVariableError.__reduce__"]], "__reduce__() (fipy.terms.incorrectsolutionvariable method)": [[325, "fipy.terms.IncorrectSolutionVariable.__reduce__"]], "__reduce__() (fipy.terms.solutionvariablenumbererror method)": [[325, "fipy.terms.SolutionVariableNumberError.__reduce__"]], "__reduce__() (fipy.terms.solutionvariablerequirederror method)": [[325, "fipy.terms.SolutionVariableRequiredError.__reduce__"]], "__reduce__() (fipy.terms.termmultiplyerror method)": [[325, "fipy.terms.TermMultiplyError.__reduce__"]], "__reduce__() (fipy.terms.transienttermerror method)": [[325, "fipy.terms.TransientTermError.__reduce__"]], "__reduce__() (fipy.terms.vectorcoefferror method)": [[325, "fipy.terms.VectorCoeffError.__reduce__"]], "__repr__() (fipy.terms.abstractbaseclasserror method)": [[325, "fipy.terms.AbstractBaseClassError.__repr__"]], "__repr__() (fipy.terms.explicitvariableerror method)": [[325, "fipy.terms.ExplicitVariableError.__repr__"]], "__repr__() (fipy.terms.incorrectsolutionvariable method)": [[325, "fipy.terms.IncorrectSolutionVariable.__repr__"]], "__repr__() (fipy.terms.solutionvariablenumbererror method)": [[325, "fipy.terms.SolutionVariableNumberError.__repr__"]], "__repr__() (fipy.terms.solutionvariablerequirederror method)": [[325, "fipy.terms.SolutionVariableRequiredError.__repr__"]], "__repr__() (fipy.terms.termmultiplyerror method)": [[325, "fipy.terms.TermMultiplyError.__repr__"]], "__repr__() (fipy.terms.transienttermerror method)": [[325, "fipy.terms.TransientTermError.__repr__"]], "__repr__() (fipy.terms.vectorcoefferror method)": [[325, "fipy.terms.VectorCoeffError.__repr__"]], "__setattr__() (fipy.terms.abstractbaseclasserror method)": [[325, "fipy.terms.AbstractBaseClassError.__setattr__"]], "__setattr__() (fipy.terms.explicitvariableerror method)": [[325, "fipy.terms.ExplicitVariableError.__setattr__"]], "__setattr__() (fipy.terms.incorrectsolutionvariable method)": [[325, "fipy.terms.IncorrectSolutionVariable.__setattr__"]], "__setattr__() (fipy.terms.solutionvariablenumbererror method)": [[325, "fipy.terms.SolutionVariableNumberError.__setattr__"]], "__setattr__() (fipy.terms.solutionvariablerequirederror method)": [[325, "fipy.terms.SolutionVariableRequiredError.__setattr__"]], "__setattr__() (fipy.terms.termmultiplyerror method)": [[325, "fipy.terms.TermMultiplyError.__setattr__"]], "__setattr__() (fipy.terms.transienttermerror method)": [[325, "fipy.terms.TransientTermError.__setattr__"]], "__setattr__() (fipy.terms.vectorcoefferror method)": [[325, "fipy.terms.VectorCoeffError.__setattr__"]], "__str__() (fipy.terms.abstractbaseclasserror method)": [[325, "fipy.terms.AbstractBaseClassError.__str__"]], "__str__() (fipy.terms.explicitvariableerror method)": [[325, "fipy.terms.ExplicitVariableError.__str__"]], "__str__() (fipy.terms.incorrectsolutionvariable method)": [[325, "fipy.terms.IncorrectSolutionVariable.__str__"]], "__str__() (fipy.terms.solutionvariablenumbererror method)": [[325, "fipy.terms.SolutionVariableNumberError.__str__"]], "__str__() (fipy.terms.solutionvariablerequirederror method)": [[325, "fipy.terms.SolutionVariableRequiredError.__str__"]], "__str__() (fipy.terms.termmultiplyerror method)": [[325, "fipy.terms.TermMultiplyError.__str__"]], "__str__() (fipy.terms.transienttermerror method)": [[325, "fipy.terms.TransientTermError.__str__"]], "__str__() (fipy.terms.vectorcoefferror method)": [[325, "fipy.terms.VectorCoeffError.__str__"]], "fipy.terms": [[325, "module-fipy.terms"]], "with_traceback() (fipy.terms.abstractbaseclasserror method)": [[325, "fipy.terms.AbstractBaseClassError.with_traceback"]], "with_traceback() (fipy.terms.explicitvariableerror method)": [[325, "fipy.terms.ExplicitVariableError.with_traceback"]], "with_traceback() (fipy.terms.incorrectsolutionvariable method)": [[325, "fipy.terms.IncorrectSolutionVariable.with_traceback"]], "with_traceback() (fipy.terms.solutionvariablenumbererror method)": [[325, "fipy.terms.SolutionVariableNumberError.with_traceback"]], "with_traceback() (fipy.terms.solutionvariablerequirederror method)": [[325, "fipy.terms.SolutionVariableRequiredError.with_traceback"]], "with_traceback() (fipy.terms.termmultiplyerror method)": [[325, "fipy.terms.TermMultiplyError.with_traceback"]], "with_traceback() (fipy.terms.transienttermerror method)": [[325, "fipy.terms.TransientTermError.with_traceback"]], "with_traceback() (fipy.terms.vectorcoefferror method)": [[325, "fipy.terms.VectorCoeffError.with_traceback"]], "fipy.terms.abstractbinaryterm": [[326, "module-fipy.terms.abstractBinaryTerm"]], "fipy.terms.abstractconvectionterm": [[327, "module-fipy.terms.abstractConvectionTerm"]], "fipy.terms.abstractdiffusionterm": [[328, "module-fipy.terms.abstractDiffusionTerm"]], "fipy.terms.abstractupwindconvectionterm": [[329, "module-fipy.terms.abstractUpwindConvectionTerm"]], "advectionterm (class in fipy.terms.advectionterm)": [[330, "fipy.terms.advectionTerm.AdvectionTerm"]], "rhsvector (fipy.terms.advectionterm.advectionterm property)": [[330, "fipy.terms.advectionTerm.AdvectionTerm.RHSvector"]], "__eq__() (fipy.terms.advectionterm.advectionterm method)": [[330, "fipy.terms.advectionTerm.AdvectionTerm.__eq__"]], "__hash__() (fipy.terms.advectionterm.advectionterm method)": [[330, "fipy.terms.advectionTerm.AdvectionTerm.__hash__"]], "__mul__() (fipy.terms.advectionterm.advectionterm method)": [[330, "fipy.terms.advectionTerm.AdvectionTerm.__mul__"]], "__neg__() (fipy.terms.advectionterm.advectionterm method)": [[330, "fipy.terms.advectionTerm.AdvectionTerm.__neg__"]], "__repr__() (fipy.terms.advectionterm.advectionterm method)": [[330, "fipy.terms.advectionTerm.AdvectionTerm.__repr__"]], "__rmul__() (fipy.terms.advectionterm.advectionterm method)": [[330, "fipy.terms.advectionTerm.AdvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.advectionterm.advectionterm method)": [[330, "fipy.terms.advectionTerm.AdvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.advectionterm.advectionterm method)": [[330, "fipy.terms.advectionTerm.AdvectionTerm.cacheRHSvector"]], "fipy.terms.advectionterm": [[330, "module-fipy.terms.advectionTerm"]], "justerrorvector() (fipy.terms.advectionterm.advectionterm method)": [[330, "fipy.terms.advectionTerm.AdvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.advectionterm.advectionterm method)": [[330, "fipy.terms.advectionTerm.AdvectionTerm.justResidualVector"]], "matrix (fipy.terms.advectionterm.advectionterm property)": [[330, "fipy.terms.advectionTerm.AdvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.advectionterm.advectionterm method)": [[330, "fipy.terms.advectionTerm.AdvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.advectionterm.advectionterm method)": [[330, "fipy.terms.advectionTerm.AdvectionTerm.solve"]], "sweep() (fipy.terms.advectionterm.advectionterm method)": [[330, "fipy.terms.advectionTerm.AdvectionTerm.sweep"]], "fipy.terms.asymmetricconvectionterm": [[331, "module-fipy.terms.asymmetricConvectionTerm"]], "fipy.terms.binaryterm": [[332, "module-fipy.terms.binaryTerm"]], "cellterm (class in fipy.terms.cellterm)": [[333, "fipy.terms.cellTerm.CellTerm"]], "rhsvector (fipy.terms.cellterm.cellterm property)": [[333, "fipy.terms.cellTerm.CellTerm.RHSvector"]], "__eq__() (fipy.terms.cellterm.cellterm method)": [[333, "fipy.terms.cellTerm.CellTerm.__eq__"]], "__hash__() (fipy.terms.cellterm.cellterm method)": [[333, "fipy.terms.cellTerm.CellTerm.__hash__"]], "__mul__() (fipy.terms.cellterm.cellterm method)": [[333, "fipy.terms.cellTerm.CellTerm.__mul__"]], "__neg__() (fipy.terms.cellterm.cellterm method)": [[333, "fipy.terms.cellTerm.CellTerm.__neg__"]], "__repr__() (fipy.terms.cellterm.cellterm method)": [[333, "fipy.terms.cellTerm.CellTerm.__repr__"]], "__rmul__() (fipy.terms.cellterm.cellterm method)": [[333, "fipy.terms.cellTerm.CellTerm.__rmul__"]], "cachematrix() (fipy.terms.cellterm.cellterm method)": [[333, "fipy.terms.cellTerm.CellTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.cellterm.cellterm method)": [[333, "fipy.terms.cellTerm.CellTerm.cacheRHSvector"]], "fipy.terms.cellterm": [[333, "module-fipy.terms.cellTerm"]], "justerrorvector() (fipy.terms.cellterm.cellterm method)": [[333, "fipy.terms.cellTerm.CellTerm.justErrorVector"]], "justresidualvector() (fipy.terms.cellterm.cellterm method)": [[333, "fipy.terms.cellTerm.CellTerm.justResidualVector"]], "matrix (fipy.terms.cellterm.cellterm property)": [[333, "fipy.terms.cellTerm.CellTerm.matrix"]], "residualvectorandnorm() (fipy.terms.cellterm.cellterm method)": [[333, "fipy.terms.cellTerm.CellTerm.residualVectorAndNorm"]], "solve() (fipy.terms.cellterm.cellterm method)": [[333, "fipy.terms.cellTerm.CellTerm.solve"]], "sweep() (fipy.terms.cellterm.cellterm method)": [[333, "fipy.terms.cellTerm.CellTerm.sweep"]], "centraldifferenceconvectionterm (class in fipy.terms.centraldiffconvectionterm)": [[334, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm"]], "rhsvector (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm property)": [[334, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[334, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__eq__"]], "__hash__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[334, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__hash__"]], "__mul__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[334, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__mul__"]], "__neg__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[334, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__neg__"]], "__repr__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[334, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[334, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[334, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[334, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.cacheRHSvector"]], "fipy.terms.centraldiffconvectionterm": [[334, "module-fipy.terms.centralDiffConvectionTerm"]], "justerrorvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[334, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[334, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.justResidualVector"]], "matrix (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm property)": [[334, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[334, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[334, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.solve"]], "sweep() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[334, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.sweep"]], "fipy.terms.coupledbinaryterm": [[335, "module-fipy.terms.coupledBinaryTerm"]], "diffusionterm (class in fipy.terms.diffusionterm)": [[336, "fipy.terms.diffusionTerm.DiffusionTerm"]], "rhsvector (fipy.terms.diffusionterm.diffusionterm property)": [[336, "fipy.terms.diffusionTerm.DiffusionTerm.RHSvector"]], "__eq__() (fipy.terms.diffusionterm.diffusionterm method)": [[336, "fipy.terms.diffusionTerm.DiffusionTerm.__eq__"]], "__hash__() (fipy.terms.diffusionterm.diffusionterm method)": [[336, "fipy.terms.diffusionTerm.DiffusionTerm.__hash__"]], "__repr__() (fipy.terms.diffusionterm.diffusionterm method)": [[336, "fipy.terms.diffusionTerm.DiffusionTerm.__repr__"]], "cachematrix() (fipy.terms.diffusionterm.diffusionterm method)": [[336, "fipy.terms.diffusionTerm.DiffusionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusionterm.diffusionterm method)": [[336, "fipy.terms.diffusionTerm.DiffusionTerm.cacheRHSvector"]], "fipy.terms.diffusionterm": [[336, "module-fipy.terms.diffusionTerm"]], "justerrorvector() (fipy.terms.diffusionterm.diffusionterm method)": [[336, "fipy.terms.diffusionTerm.DiffusionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.diffusionterm.diffusionterm method)": [[336, "fipy.terms.diffusionTerm.DiffusionTerm.justResidualVector"]], "matrix (fipy.terms.diffusionterm.diffusionterm property)": [[336, "fipy.terms.diffusionTerm.DiffusionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.diffusionterm.diffusionterm method)": [[336, "fipy.terms.diffusionTerm.DiffusionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.diffusionterm.diffusionterm method)": [[336, "fipy.terms.diffusionTerm.DiffusionTerm.solve"]], "sweep() (fipy.terms.diffusionterm.diffusionterm method)": [[336, "fipy.terms.diffusionTerm.DiffusionTerm.sweep"]], "diffusiontermcorrection (class in fipy.terms.diffusiontermcorrection)": [[337, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection"]], "rhsvector (fipy.terms.diffusiontermcorrection.diffusiontermcorrection property)": [[337, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.RHSvector"]], "__eq__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[337, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__eq__"]], "__hash__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[337, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__hash__"]], "__repr__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[337, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__repr__"]], "cachematrix() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[337, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[337, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.cacheRHSvector"]], "fipy.terms.diffusiontermcorrection": [[337, "module-fipy.terms.diffusionTermCorrection"]], "justerrorvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[337, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.justErrorVector"]], "justresidualvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[337, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.justResidualVector"]], "matrix (fipy.terms.diffusiontermcorrection.diffusiontermcorrection property)": [[337, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.matrix"]], "residualvectorandnorm() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[337, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.residualVectorAndNorm"]], "solve() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[337, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.solve"]], "sweep() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[337, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.sweep"]], "diffusiontermnocorrection (class in fipy.terms.diffusiontermnocorrection)": [[338, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection"]], "rhsvector (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection property)": [[338, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.RHSvector"]], "__eq__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[338, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__eq__"]], "__hash__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[338, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__hash__"]], "__repr__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[338, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__repr__"]], "cachematrix() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[338, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[338, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.cacheRHSvector"]], "fipy.terms.diffusiontermnocorrection": [[338, "module-fipy.terms.diffusionTermNoCorrection"]], "justerrorvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[338, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.justErrorVector"]], "justresidualvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[338, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.justResidualVector"]], "matrix (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection property)": [[338, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.matrix"]], "residualvectorandnorm() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[338, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.residualVectorAndNorm"]], "solve() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[338, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.solve"]], "sweep() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[338, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.sweep"]], "explicitdiffusionterm (class in fipy.terms.explicitdiffusionterm)": [[339, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm"]], "rhsvector (fipy.terms.explicitdiffusionterm.explicitdiffusionterm property)": [[339, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.RHSvector"]], "__eq__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[339, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__eq__"]], "__hash__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[339, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__hash__"]], "__repr__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[339, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__repr__"]], "cachematrix() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[339, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[339, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.cacheRHSvector"]], "fipy.terms.explicitdiffusionterm": [[339, "module-fipy.terms.explicitDiffusionTerm"]], "justerrorvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[339, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[339, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.justResidualVector"]], "matrix (fipy.terms.explicitdiffusionterm.explicitdiffusionterm property)": [[339, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[339, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[339, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.solve"]], "sweep() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[339, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.sweep"]], "fipy.terms.explicitsourceterm": [[340, "module-fipy.terms.explicitSourceTerm"]], "explicitupwindconvectionterm (class in fipy.terms.explicitupwindconvectionterm)": [[341, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm"]], "rhsvector (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm property)": [[341, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[341, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__eq__"]], "__hash__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[341, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__hash__"]], "__mul__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[341, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__mul__"]], "__neg__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[341, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__neg__"]], "__repr__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[341, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[341, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[341, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[341, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.cacheRHSvector"]], "fipy.terms.explicitupwindconvectionterm": [[341, "module-fipy.terms.explicitUpwindConvectionTerm"]], "justerrorvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[341, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[341, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.justResidualVector"]], "matrix (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm property)": [[341, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[341, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[341, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.solve"]], "sweep() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[341, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.sweep"]], "exponentialconvectionterm (class in fipy.terms.exponentialconvectionterm)": [[342, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm"]], "rhsvector (fipy.terms.exponentialconvectionterm.exponentialconvectionterm property)": [[342, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[342, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__eq__"]], "__hash__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[342, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__hash__"]], "__mul__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[342, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__mul__"]], "__neg__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[342, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__neg__"]], "__repr__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[342, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[342, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[342, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[342, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.cacheRHSvector"]], "fipy.terms.exponentialconvectionterm": [[342, "module-fipy.terms.exponentialConvectionTerm"]], "justerrorvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[342, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[342, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.justResidualVector"]], "matrix (fipy.terms.exponentialconvectionterm.exponentialconvectionterm property)": [[342, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[342, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[342, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.solve"]], "sweep() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[342, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.sweep"]], "faceterm (class in fipy.terms.faceterm)": [[343, "fipy.terms.faceTerm.FaceTerm"]], "rhsvector (fipy.terms.faceterm.faceterm property)": [[343, "fipy.terms.faceTerm.FaceTerm.RHSvector"]], "__eq__() (fipy.terms.faceterm.faceterm method)": [[343, "fipy.terms.faceTerm.FaceTerm.__eq__"]], "__hash__() (fipy.terms.faceterm.faceterm method)": [[343, "fipy.terms.faceTerm.FaceTerm.__hash__"]], "__mul__() (fipy.terms.faceterm.faceterm method)": [[343, "fipy.terms.faceTerm.FaceTerm.__mul__"]], "__neg__() (fipy.terms.faceterm.faceterm method)": [[343, "fipy.terms.faceTerm.FaceTerm.__neg__"]], "__repr__() (fipy.terms.faceterm.faceterm method)": [[343, "fipy.terms.faceTerm.FaceTerm.__repr__"]], "__rmul__() (fipy.terms.faceterm.faceterm method)": [[343, "fipy.terms.faceTerm.FaceTerm.__rmul__"]], "cachematrix() (fipy.terms.faceterm.faceterm method)": [[343, "fipy.terms.faceTerm.FaceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.faceterm.faceterm method)": [[343, "fipy.terms.faceTerm.FaceTerm.cacheRHSvector"]], "fipy.terms.faceterm": [[343, "module-fipy.terms.faceTerm"]], "justerrorvector() (fipy.terms.faceterm.faceterm method)": [[343, "fipy.terms.faceTerm.FaceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.faceterm.faceterm method)": [[343, "fipy.terms.faceTerm.FaceTerm.justResidualVector"]], "matrix (fipy.terms.faceterm.faceterm property)": [[343, "fipy.terms.faceTerm.FaceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.faceterm.faceterm method)": [[343, "fipy.terms.faceTerm.FaceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.faceterm.faceterm method)": [[343, "fipy.terms.faceTerm.FaceTerm.solve"]], "sweep() (fipy.terms.faceterm.faceterm method)": [[343, "fipy.terms.faceTerm.FaceTerm.sweep"]], "firstorderadvectionterm (class in fipy.terms.firstorderadvectionterm)": [[344, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm"]], "rhsvector (fipy.terms.firstorderadvectionterm.firstorderadvectionterm property)": [[344, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.RHSvector"]], "__eq__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[344, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__eq__"]], "__hash__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[344, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__hash__"]], "__mul__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[344, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__mul__"]], "__neg__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[344, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__neg__"]], "__repr__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[344, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__repr__"]], "__rmul__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[344, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[344, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[344, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.cacheRHSvector"]], "fipy.terms.firstorderadvectionterm": [[344, "module-fipy.terms.firstOrderAdvectionTerm"]], "justerrorvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[344, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[344, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.justResidualVector"]], "matrix (fipy.terms.firstorderadvectionterm.firstorderadvectionterm property)": [[344, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[344, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[344, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.solve"]], "sweep() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[344, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.sweep"]], "hybridconvectionterm (class in fipy.terms.hybridconvectionterm)": [[345, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm"]], "rhsvector (fipy.terms.hybridconvectionterm.hybridconvectionterm property)": [[345, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[345, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__eq__"]], "__hash__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[345, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__hash__"]], "__mul__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[345, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__mul__"]], "__neg__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[345, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__neg__"]], "__repr__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[345, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[345, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[345, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[345, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.cacheRHSvector"]], "fipy.terms.hybridconvectionterm": [[345, "module-fipy.terms.hybridConvectionTerm"]], "justerrorvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[345, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[345, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.justResidualVector"]], "matrix (fipy.terms.hybridconvectionterm.hybridconvectionterm property)": [[345, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[345, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[345, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.solve"]], "sweep() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[345, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.sweep"]], "implicitdiffusionterm (in module fipy.terms.implicitdiffusionterm)": [[346, "fipy.terms.implicitDiffusionTerm.ImplicitDiffusionTerm"]], "fipy.terms.implicitdiffusionterm": [[346, "module-fipy.terms.implicitDiffusionTerm"]], "implicitsourceterm (class in fipy.terms.implicitsourceterm)": [[347, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm"]], "rhsvector (fipy.terms.implicitsourceterm.implicitsourceterm property)": [[347, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.RHSvector"]], "__eq__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[347, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__eq__"]], "__hash__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[347, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__hash__"]], "__mul__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[347, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__mul__"]], "__neg__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[347, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__neg__"]], "__repr__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[347, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__repr__"]], "__rmul__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[347, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__rmul__"]], "cachematrix() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[347, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[347, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.cacheRHSvector"]], "fipy.terms.implicitsourceterm": [[347, "module-fipy.terms.implicitSourceTerm"]], "justerrorvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[347, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[347, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.justResidualVector"]], "matrix (fipy.terms.implicitsourceterm.implicitsourceterm property)": [[347, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[347, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[347, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.solve"]], "sweep() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[347, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.sweep"]], "fipy.terms.nondiffusionterm": [[348, "module-fipy.terms.nonDiffusionTerm"]], "powerlawconvectionterm (class in fipy.terms.powerlawconvectionterm)": [[349, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm"]], "rhsvector (fipy.terms.powerlawconvectionterm.powerlawconvectionterm property)": [[349, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[349, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__eq__"]], "__hash__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[349, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__hash__"]], "__mul__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[349, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__mul__"]], "__neg__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[349, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__neg__"]], "__repr__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[349, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[349, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[349, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[349, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.cacheRHSvector"]], "fipy.terms.powerlawconvectionterm": [[349, "module-fipy.terms.powerLawConvectionTerm"]], "justerrorvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[349, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[349, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.justResidualVector"]], "matrix (fipy.terms.powerlawconvectionterm.powerlawconvectionterm property)": [[349, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[349, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[349, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.solve"]], "sweep() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[349, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.sweep"]], "rhsvector (fipy.terms.residualterm.residualterm property)": [[350, "fipy.terms.residualTerm.ResidualTerm.RHSvector"]], "residualterm (class in fipy.terms.residualterm)": [[350, "fipy.terms.residualTerm.ResidualTerm"]], "__eq__() (fipy.terms.residualterm.residualterm method)": [[350, "fipy.terms.residualTerm.ResidualTerm.__eq__"]], "__hash__() (fipy.terms.residualterm.residualterm method)": [[350, "fipy.terms.residualTerm.ResidualTerm.__hash__"]], "__mul__() (fipy.terms.residualterm.residualterm method)": [[350, "fipy.terms.residualTerm.ResidualTerm.__mul__"]], "__neg__() (fipy.terms.residualterm.residualterm method)": [[350, "fipy.terms.residualTerm.ResidualTerm.__neg__"]], "__repr__() (fipy.terms.residualterm.residualterm method)": [[350, "fipy.terms.residualTerm.ResidualTerm.__repr__"]], "__rmul__() (fipy.terms.residualterm.residualterm method)": [[350, "fipy.terms.residualTerm.ResidualTerm.__rmul__"]], "cachematrix() (fipy.terms.residualterm.residualterm method)": [[350, "fipy.terms.residualTerm.ResidualTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.residualterm.residualterm method)": [[350, "fipy.terms.residualTerm.ResidualTerm.cacheRHSvector"]], "fipy.terms.residualterm": [[350, "module-fipy.terms.residualTerm"]], "justerrorvector() (fipy.terms.residualterm.residualterm method)": [[350, "fipy.terms.residualTerm.ResidualTerm.justErrorVector"]], "justresidualvector() (fipy.terms.residualterm.residualterm method)": [[350, "fipy.terms.residualTerm.ResidualTerm.justResidualVector"]], "matrix (fipy.terms.residualterm.residualterm property)": [[350, "fipy.terms.residualTerm.ResidualTerm.matrix"]], "residualvectorandnorm() (fipy.terms.residualterm.residualterm method)": [[350, "fipy.terms.residualTerm.ResidualTerm.residualVectorAndNorm"]], "solve() (fipy.terms.residualterm.residualterm method)": [[350, "fipy.terms.residualTerm.ResidualTerm.solve"]], "sweep() (fipy.terms.residualterm.residualterm method)": [[350, "fipy.terms.residualTerm.ResidualTerm.sweep"]], "rhsvector (fipy.terms.sourceterm.sourceterm property)": [[351, "fipy.terms.sourceTerm.SourceTerm.RHSvector"]], "sourceterm (class in fipy.terms.sourceterm)": [[351, "fipy.terms.sourceTerm.SourceTerm"]], "__eq__() (fipy.terms.sourceterm.sourceterm method)": [[351, "fipy.terms.sourceTerm.SourceTerm.__eq__"]], "__hash__() (fipy.terms.sourceterm.sourceterm method)": [[351, "fipy.terms.sourceTerm.SourceTerm.__hash__"]], "__mul__() (fipy.terms.sourceterm.sourceterm method)": [[351, "fipy.terms.sourceTerm.SourceTerm.__mul__"]], "__neg__() (fipy.terms.sourceterm.sourceterm method)": [[351, "fipy.terms.sourceTerm.SourceTerm.__neg__"]], "__repr__() (fipy.terms.sourceterm.sourceterm method)": [[351, "fipy.terms.sourceTerm.SourceTerm.__repr__"]], "__rmul__() (fipy.terms.sourceterm.sourceterm method)": [[351, "fipy.terms.sourceTerm.SourceTerm.__rmul__"]], "cachematrix() (fipy.terms.sourceterm.sourceterm method)": [[351, "fipy.terms.sourceTerm.SourceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.sourceterm.sourceterm method)": [[351, "fipy.terms.sourceTerm.SourceTerm.cacheRHSvector"]], "fipy.terms.sourceterm": [[351, "module-fipy.terms.sourceTerm"]], "justerrorvector() (fipy.terms.sourceterm.sourceterm method)": [[351, "fipy.terms.sourceTerm.SourceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.sourceterm.sourceterm method)": [[351, "fipy.terms.sourceTerm.SourceTerm.justResidualVector"]], "matrix (fipy.terms.sourceterm.sourceterm property)": [[351, "fipy.terms.sourceTerm.SourceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.sourceterm.sourceterm method)": [[351, "fipy.terms.sourceTerm.SourceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.sourceterm.sourceterm method)": [[351, "fipy.terms.sourceTerm.SourceTerm.solve"]], "sweep() (fipy.terms.sourceterm.sourceterm method)": [[351, "fipy.terms.sourceTerm.SourceTerm.sweep"]], "rhsvector (fipy.terms.term.term property)": [[352, "fipy.terms.term.Term.RHSvector"]], "term (class in fipy.terms.term)": [[352, "fipy.terms.term.Term"]], "__eq__() (fipy.terms.term.term method)": [[352, "fipy.terms.term.Term.__eq__"]], "__hash__() (fipy.terms.term.term method)": [[352, "fipy.terms.term.Term.__hash__"]], "__repr__() (fipy.terms.term.term method)": [[352, "fipy.terms.term.Term.__repr__"]], "cachematrix() (fipy.terms.term.term method)": [[352, "fipy.terms.term.Term.cacheMatrix"]], "cacherhsvector() (fipy.terms.term.term method)": [[352, "fipy.terms.term.Term.cacheRHSvector"]], "fipy.terms.term": [[352, "module-fipy.terms.term"]], "justerrorvector() (fipy.terms.term.term method)": [[352, "fipy.terms.term.Term.justErrorVector"]], "justresidualvector() (fipy.terms.term.term method)": [[352, "fipy.terms.term.Term.justResidualVector"]], "matrix (fipy.terms.term.term property)": [[352, "fipy.terms.term.Term.matrix"]], "residualvectorandnorm() (fipy.terms.term.term method)": [[352, "fipy.terms.term.Term.residualVectorAndNorm"]], "solve() (fipy.terms.term.term method)": [[352, "fipy.terms.term.Term.solve"]], "sweep() (fipy.terms.term.term method)": [[352, "fipy.terms.term.Term.sweep"]], "fipy.terms.test": [[353, "module-fipy.terms.test"]], "rhsvector (fipy.terms.transientterm.transientterm property)": [[354, "fipy.terms.transientTerm.TransientTerm.RHSvector"]], "transientterm (class in fipy.terms.transientterm)": [[354, "fipy.terms.transientTerm.TransientTerm"]], "__eq__() (fipy.terms.transientterm.transientterm method)": [[354, "fipy.terms.transientTerm.TransientTerm.__eq__"]], "__hash__() (fipy.terms.transientterm.transientterm method)": [[354, "fipy.terms.transientTerm.TransientTerm.__hash__"]], "__mul__() (fipy.terms.transientterm.transientterm method)": [[354, "fipy.terms.transientTerm.TransientTerm.__mul__"]], "__neg__() (fipy.terms.transientterm.transientterm method)": [[354, "fipy.terms.transientTerm.TransientTerm.__neg__"]], "__repr__() (fipy.terms.transientterm.transientterm method)": [[354, "fipy.terms.transientTerm.TransientTerm.__repr__"]], "__rmul__() (fipy.terms.transientterm.transientterm method)": [[354, "fipy.terms.transientTerm.TransientTerm.__rmul__"]], "cachematrix() (fipy.terms.transientterm.transientterm method)": [[354, "fipy.terms.transientTerm.TransientTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.transientterm.transientterm method)": [[354, "fipy.terms.transientTerm.TransientTerm.cacheRHSvector"]], "fipy.terms.transientterm": [[354, "module-fipy.terms.transientTerm"]], "justerrorvector() (fipy.terms.transientterm.transientterm method)": [[354, "fipy.terms.transientTerm.TransientTerm.justErrorVector"]], "justresidualvector() (fipy.terms.transientterm.transientterm method)": [[354, "fipy.terms.transientTerm.TransientTerm.justResidualVector"]], "matrix (fipy.terms.transientterm.transientterm property)": [[354, "fipy.terms.transientTerm.TransientTerm.matrix"]], "residualvectorandnorm() (fipy.terms.transientterm.transientterm method)": [[354, "fipy.terms.transientTerm.TransientTerm.residualVectorAndNorm"]], "solve() (fipy.terms.transientterm.transientterm method)": [[354, "fipy.terms.transientTerm.TransientTerm.solve"]], "sweep() (fipy.terms.transientterm.transientterm method)": [[354, "fipy.terms.transientTerm.TransientTerm.sweep"]], "fipy.terms.unaryterm": [[355, "module-fipy.terms.unaryTerm"]], "rhsvector (fipy.terms.upwindconvectionterm.upwindconvectionterm property)": [[356, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.RHSvector"]], "upwindconvectionterm (class in fipy.terms.upwindconvectionterm)": [[356, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm"]], "__eq__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[356, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__eq__"]], "__hash__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[356, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__hash__"]], "__mul__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[356, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__mul__"]], "__neg__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[356, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__neg__"]], "__repr__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[356, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[356, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[356, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[356, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.cacheRHSvector"]], "fipy.terms.upwindconvectionterm": [[356, "module-fipy.terms.upwindConvectionTerm"]], "justerrorvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[356, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[356, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.justResidualVector"]], "matrix (fipy.terms.upwindconvectionterm.upwindconvectionterm property)": [[356, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[356, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[356, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.solve"]], "sweep() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[356, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.sweep"]], "rhsvector (fipy.terms.vanleerconvectionterm.vanleerconvectionterm property)": [[357, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.RHSvector"]], "vanleerconvectionterm (class in fipy.terms.vanleerconvectionterm)": [[357, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm"]], "__eq__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[357, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__eq__"]], "__hash__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[357, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__hash__"]], "__mul__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[357, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__mul__"]], "__neg__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[357, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__neg__"]], "__repr__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[357, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[357, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[357, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[357, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.cacheRHSvector"]], "fipy.terms.vanleerconvectionterm": [[357, "module-fipy.terms.vanLeerConvectionTerm"]], "justerrorvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[357, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[357, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.justResidualVector"]], "matrix (fipy.terms.vanleerconvectionterm.vanleerconvectionterm property)": [[357, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[357, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[357, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.solve"]], "sweep() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[357, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.sweep"]], "fipy.testfipy": [[358, "module-fipy.testFiPy"]], "fipy.tests": [[359, "module-fipy.tests"]], "fipy.tests.doctestplus": [[360, "module-fipy.tests.doctestPlus"]], "register_skipper() (in module fipy.tests.doctestplus)": [[360, "fipy.tests.doctestPlus.register_skipper"]], "report_skips() (in module fipy.tests.doctestplus)": [[360, "fipy.tests.doctestPlus.report_skips"]], "testmod() (in module fipy.tests.doctestplus)": [[360, "fipy.tests.doctestPlus.testmod"]], "fipy.tests.lateimporttest": [[361, "module-fipy.tests.lateImportTest"]], "finalize_options() (fipy.tests.test.test method)": [[362, "fipy.tests.test.test.finalize_options"]], "fipy.tests.test": [[362, "module-fipy.tests.test"]], "initialize_options() (fipy.tests.test.test method)": [[362, "fipy.tests.test.test.initialize_options"]], "test (class in fipy.tests.test)": [[362, "fipy.tests.test.test"]], "fipy.tests.testprogram": [[363, "module-fipy.tests.testProgram"]], "physicalfield (class in fipy.tools)": [[364, "fipy.tools.PhysicalField"]], "sharedtemporaryfile() (in module fipy.tools)": [[364, "fipy.tools.SharedTemporaryFile"]], "vitals (class in fipy.tools)": [[364, "fipy.tools.Vitals"]], "__abs__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__abs__"]], "__add__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__add__"]], "__array__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__array__"]], "__array_wrap__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__array_wrap__"]], "__bool__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__bool__"]], "__div__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__div__"]], "__eq__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__eq__"]], "__float__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__float__"]], "__ge__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__ge__"]], "__getitem__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__getitem__"]], "__gt__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__gt__"]], "__hash__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__hash__"]], "__le__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__le__"]], "__lt__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__lt__"]], "__mod__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__mod__"]], "__mul__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__mul__"]], "__ne__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__ne__"]], "__neg__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__neg__"]], "__nonzero__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__nonzero__"]], "__pow__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__pow__"]], "__radd__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__radd__"]], "__repr__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__repr__"]], "__rmul__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__rmul__"]], "__setitem__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__setitem__"]], "__str__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__str__"]], "__str__() (fipy.tools.vitals method)": [[364, "fipy.tools.Vitals.__str__"]], "__sub__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__sub__"]], "__truediv__() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.__truediv__"]], "add() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.add"]], "allclose() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.allclose"]], "allequal() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.allequal"]], "appendinfo() (fipy.tools.vitals method)": [[364, "fipy.tools.Vitals.appendInfo"]], "arccos() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.arccos"]], "arccosh() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.arccosh"]], "arcsin() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.arcsin"]], "arctan() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.arctan"]], "arctan2() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.arctan2"]], "arctanh() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.arctanh"]], "ceil() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.ceil"]], "conjugate() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.conjugate"]], "converttounit() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.convertToUnit"]], "copy() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.copy"]], "cos() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.cos"]], "cosh() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.cosh"]], "divide() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.divide"]], "documentelement (fipy.tools.vitals property)": [[364, "fipy.tools.Vitals.documentElement"]], "dot() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.dot"]], "fipy.tools": [[364, "module-fipy.tools"]], "firstchild (fipy.tools.vitals property)": [[364, "fipy.tools.Vitals.firstChild"]], "floor() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.floor"]], "getsctype() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.getsctype"]], "inbaseunits() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.inBaseUnits"]], "indimensionless() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.inDimensionless"]], "inradians() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.inRadians"]], "insiunits() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.inSIUnits"]], "inunitsof() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.inUnitsOf"]], "itemset() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.itemset"]], "lastchild (fipy.tools.vitals property)": [[364, "fipy.tools.Vitals.lastChild"]], "localname (fipy.tools.vitals property)": [[364, "fipy.tools.Vitals.localName"]], "log() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.log"]], "log10() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.log10"]], "multiply() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.multiply"]], "numericvalue (fipy.tools.physicalfield property)": [[364, "fipy.tools.PhysicalField.numericValue"]], "parallelcomm (in module fipy.tools)": [[364, "fipy.tools.parallelComm"]], "put() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.put"]], "reshape() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.reshape"]], "serialcomm (in module fipy.tools)": [[364, "fipy.tools.serialComm"]], "shape (fipy.tools.physicalfield property)": [[364, "fipy.tools.PhysicalField.shape"]], "sign() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.sign"]], "sin() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.sin"]], "sinh() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.sinh"]], "sqrt() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.sqrt"]], "subtract() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.subtract"]], "sum() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.sum"]], "take() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.take"]], "tan() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.tan"]], "tanh() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.tanh"]], "tostring() (fipy.tools.physicalfield method)": [[364, "fipy.tools.PhysicalField.tostring"]], "unit (fipy.tools.physicalfield property)": [[364, "fipy.tools.PhysicalField.unit"]], "fipy.tools.comms": [[365, "module-fipy.tools.comms"]], "commwrapper (class in fipy.tools.comms.commwrapper)": [[366, "fipy.tools.comms.commWrapper.CommWrapper"]], "__repr__() (fipy.tools.comms.commwrapper.commwrapper method)": [[366, "fipy.tools.comms.commWrapper.CommWrapper.__repr__"]], "fipy.tools.comms.commwrapper": [[366, "module-fipy.tools.comms.commWrapper"]], "dummycomm (class in fipy.tools.comms.dummycomm)": [[367, "fipy.tools.comms.dummyComm.DummyComm"]], "__repr__() (fipy.tools.comms.dummycomm.dummycomm method)": [[367, "fipy.tools.comms.dummyComm.DummyComm.__repr__"]], "fipy.tools.comms.dummycomm": [[367, "module-fipy.tools.comms.dummyComm"]], "fipy.tools.debug": [[368, "module-fipy.tools.debug"]], "deprecate() (in module fipy.tools.decorators)": [[369, "fipy.tools.decorators.deprecate"]], "fipy.tools.decorators": [[369, "module-fipy.tools.decorators"]], "fipy.tools.dimensions": [[370, "module-fipy.tools.dimensions"]], "fipy.tools.dimensions.dictwithdefault": [[371, "module-fipy.tools.dimensions.DictWithDefault"]], "fipy.tools.dimensions.numberdict": [[372, "module-fipy.tools.dimensions.NumberDict"]], "physicalfield (class in fipy.tools.dimensions.physicalfield)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField"]], "physicalunit (class in fipy.tools.dimensions.physicalfield)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit"]], "__abs__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__abs__"]], "__add__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__add__"]], "__array__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__array__"]], "__array_wrap__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__array_wrap__"]], "__bool__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__bool__"]], "__div__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__div__"]], "__div__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.__div__"]], "__eq__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__eq__"]], "__eq__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.__eq__"]], "__float__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__float__"]], "__ge__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__ge__"]], "__ge__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.__ge__"]], "__getitem__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__getitem__"]], "__gt__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__gt__"]], "__gt__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.__gt__"]], "__hash__ (fipy.tools.dimensions.physicalfield.physicalunit attribute)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.__hash__"]], "__hash__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__hash__"]], "__le__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__le__"]], "__le__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.__le__"]], "__lt__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__lt__"]], "__lt__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.__lt__"]], "__mod__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__mod__"]], "__mul__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__mul__"]], "__mul__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.__mul__"]], "__ne__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__ne__"]], "__ne__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.__ne__"]], "__neg__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__neg__"]], "__nonzero__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__nonzero__"]], "__pow__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__pow__"]], "__pow__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.__pow__"]], "__radd__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__radd__"]], "__rdiv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rdiv__"]], "__repr__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__repr__"]], "__repr__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.__repr__"]], "__rmul__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__rmul__"]], "__rmul__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rmul__"]], "__rtruediv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rtruediv__"]], "__setitem__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__setitem__"]], "__str__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__str__"]], "__str__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.__str__"]], "__sub__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__sub__"]], "__truediv__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.__truediv__"]], "__truediv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.__truediv__"]], "add() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.add"]], "allclose() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.allclose"]], "allequal() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.allequal"]], "arccos() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.arccos"]], "arccosh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.arccosh"]], "arcsin() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.arcsin"]], "arctan() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.arctan"]], "arctan2() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.arctan2"]], "arctanh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.arctanh"]], "ceil() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.ceil"]], "conjugate() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.conjugate"]], "conversionfactorto() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.conversionFactorTo"]], "conversiontupleto() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.conversionTupleTo"]], "converttounit() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.convertToUnit"]], "copy() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.copy"]], "cos() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.cos"]], "cosh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.cosh"]], "divide() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.divide"]], "dot() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.dot"]], "fipy.tools.dimensions.physicalfield": [[373, "module-fipy.tools.dimensions.physicalField"]], "floor() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.floor"]], "getsctype() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.getsctype"]], "inbaseunits() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.inBaseUnits"]], "indimensionless() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.inDimensionless"]], "inradians() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.inRadians"]], "insiunits() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.inSIUnits"]], "inunitsof() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.inUnitsOf"]], "isangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.isAngle"]], "iscompatible() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.isCompatible"]], "isdimensionless() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.isDimensionless"]], "isdimensionlessorangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.isDimensionlessOrAngle"]], "isinverseangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.isInverseAngle"]], "itemset() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.itemset"]], "log() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.log"]], "log10() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.log10"]], "multiply() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.multiply"]], "name() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.name"]], "numericvalue (fipy.tools.dimensions.physicalfield.physicalfield property)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.numericValue"]], "put() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.put"]], "reshape() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.reshape"]], "setname() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalUnit.setName"]], "shape (fipy.tools.dimensions.physicalfield.physicalfield property)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.shape"]], "sign() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.sign"]], "sin() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.sin"]], "sinh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.sinh"]], "sqrt() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.sqrt"]], "subtract() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.subtract"]], "sum() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.sum"]], "take() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.take"]], "tan() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.tan"]], "tanh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.tanh"]], "tostring() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.tostring"]], "unit (fipy.tools.dimensions.physicalfield.physicalfield property)": [[373, "fipy.tools.dimensions.physicalField.PhysicalField.unit"]], "read() (in module fipy.tools.dump)": [[374, "fipy.tools.dump.read"]], "write() (in module fipy.tools.dump)": [[374, "fipy.tools.dump.write"]], "fipy.tools.inline": [[375, "module-fipy.tools.inline"]], "fipy.tools.logging": [[376, "module-fipy.tools.logging"]], "l1norm() (in module fipy.tools.numerix)": [[377, "fipy.tools.numerix.L1norm"]], "l2norm() (in module fipy.tools.numerix)": [[377, "fipy.tools.numerix.L2norm"]], "linfnorm() (in module fipy.tools.numerix)": [[377, "fipy.tools.numerix.LINFnorm"]], "all() (in module fipy.tools.numerix)": [[377, "fipy.tools.numerix.all"]], "allclose() (in module fipy.tools.numerix)": [[377, "fipy.tools.numerix.allclose"]], "allequal() (in module fipy.tools.numerix)": [[377, "fipy.tools.numerix.allequal"]], "dot() (in module fipy.tools.numerix)": [[377, "fipy.tools.numerix.dot"]], "fipy.tools.numerix": [[377, "module-fipy.tools.numerix"]], "getshape() (in module fipy.tools.numerix)": [[377, "fipy.tools.numerix.getShape"]], "isclose() (in module fipy.tools.numerix)": [[377, "fipy.tools.numerix.isclose"]], "nearest() (in module fipy.tools.numerix)": [[377, "fipy.tools.numerix.nearest"]], "put() (in module fipy.tools.numerix)": [[377, "fipy.tools.numerix.put"]], "rank() (in module fipy.tools.numerix)": [[377, "fipy.tools.numerix.rank"]], "reshape() (in module fipy.tools.numerix)": [[377, "fipy.tools.numerix.reshape"]], "sqrtdot() (in module fipy.tools.numerix)": [[377, "fipy.tools.numerix.sqrtDot"]], "sum() (in module fipy.tools.numerix)": [[377, "fipy.tools.numerix.sum"]], "take() (in module fipy.tools.numerix)": [[377, "fipy.tools.numerix.take"]], "tostring() (in module fipy.tools.numerix)": [[377, "fipy.tools.numerix.tostring"]], "parse() (in module fipy.tools.parser)": [[378, "fipy.tools.parser.parse"]], "sharedtemporaryfile() (in module fipy.tools.sharedtempfile)": [[379, "fipy.tools.sharedtempfile.SharedTemporaryFile"]], "fipy.tools.sharedtempfile": [[379, "module-fipy.tools.sharedtempfile"]], "fipy.tools.test": [[380, "module-fipy.tools.test"]], "fipy.tools.vector": [[381, "module-fipy.tools.vector"]], "prune() (in module fipy.tools.vector)": [[381, "fipy.tools.vector.prune"]], "putadd() (in module fipy.tools.vector)": [[381, "fipy.tools.vector.putAdd"]], "fipy.tools.version": [[382, "module-fipy.tools.version"]], "vitals (class in fipy.tools.vitals)": [[383, "fipy.tools.vitals.Vitals"]], "__str__() (fipy.tools.vitals.vitals method)": [[383, "fipy.tools.vitals.Vitals.__str__"]], "appendinfo() (fipy.tools.vitals.vitals method)": [[383, "fipy.tools.vitals.Vitals.appendInfo"]], "documentelement (fipy.tools.vitals.vitals property)": [[383, "fipy.tools.vitals.Vitals.documentElement"]], "fipy.tools.vitals": [[383, "module-fipy.tools.vitals"]], "firstchild (fipy.tools.vitals.vitals property)": [[383, "fipy.tools.vitals.Vitals.firstChild"]], "lastchild (fipy.tools.vitals.vitals property)": [[383, "fipy.tools.vitals.Vitals.lastChild"]], "localname (fipy.tools.vitals.vitals property)": [[383, "fipy.tools.vitals.Vitals.localName"]], "fipy.variables": [[384, "module-fipy.variables"]], "fipy.variables.addoverfacesvariable": [[385, "module-fipy.variables.addOverFacesVariable"]], "fipy.variables.arithmeticcelltofacevariable": [[386, "module-fipy.variables.arithmeticCellToFaceVariable"]], "betanoisevariable (class in fipy.variables.betanoisevariable)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable"]], "__abs__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__abs__"]], "__and__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__and__"]], "__array__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__bool__"]], "__call__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__call__"]], "__eq__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__eq__"]], "__ge__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__gt__"]], "__hash__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__hash__"]], "__invert__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__invert__"]], "__le__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__le__"]], "__lt__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__lt__"]], "__ne__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__ne__"]], "__new__() (fipy.variables.betanoisevariable.betanoisevariable static method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__or__"]], "__pow__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__pow__"]], "__repr__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__setstate__"]], "__str__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__str__"]], "all() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.all"]], "allclose() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.allclose"]], "any() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.betanoisevariable.betanoisevariable property)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.constrain"]], "constraintmask (fipy.variables.betanoisevariable.betanoisevariable property)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.constraintMask"]], "copy() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.copy"]], "dot() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.dot"]], "facegrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.betanoisevariable.betanoisevariable property)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceValue"]], "fipy.variables.betanoisevariable": [[387, "module-fipy.variables.betaNoiseVariable"]], "gaussgrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.getsctype"]], "globalvalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.globalValue"]], "grad (fipy.variables.betanoisevariable.betanoisevariable property)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.betanoisevariable.betanoisevariable property)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.mag"]], "min() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.min"]], "minmodfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.minmodFaceValue"]], "old (fipy.variables.betanoisevariable.betanoisevariable property)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.old"]], "rdot() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.rdot"]], "release() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.release"]], "scramble() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.scramble"]], "setvalue() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.setValue"]], "shape (fipy.variables.betanoisevariable.betanoisevariable property)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.shape"]], "std() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.std"]], "unit (fipy.variables.betanoisevariable.betanoisevariable property)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.unit"]], "updateold() (fipy.variables.betanoisevariable.betanoisevariable method)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.updateOld"]], "value (fipy.variables.betanoisevariable.betanoisevariable property)": [[387, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.value"]], "fipy.variables.binaryoperatorvariable": [[388, "module-fipy.variables.binaryOperatorVariable"]], "fipy.variables.celltofacevariable": [[389, "module-fipy.variables.cellToFaceVariable"]], "cellvariable (class in fipy.variables.cellvariable)": [[390, "fipy.variables.cellVariable.CellVariable"]], "__abs__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__abs__"]], "__and__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__and__"]], "__array__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__array__"]], "__array_wrap__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__array_wrap__"]], "__bool__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__bool__"]], "__call__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__call__"]], "__eq__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__eq__"]], "__ge__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__ge__"]], "__getitem__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__getitem__"]], "__getstate__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__getstate__"]], "__gt__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__gt__"]], "__hash__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__hash__"]], "__invert__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__invert__"]], "__le__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__le__"]], "__lt__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__lt__"]], "__ne__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__ne__"]], "__new__() (fipy.variables.cellvariable.cellvariable static method)": [[390, "fipy.variables.cellVariable.CellVariable.__new__"]], "__nonzero__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__nonzero__"]], "__or__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__or__"]], "__pow__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__pow__"]], "__repr__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__repr__"]], "__setstate__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__setstate__"]], "__str__() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.__str__"]], "all() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.all"]], "allclose() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.allclose"]], "any() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.any"]], "arithmeticfacevalue (fipy.variables.cellvariable.cellvariable property)": [[390, "fipy.variables.cellVariable.CellVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.cellvariable.cellvariable property)": [[390, "fipy.variables.cellVariable.CellVariable.cellVolumeAverage"]], "constrain() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.constrain"]], "constraintmask (fipy.variables.cellvariable.cellvariable property)": [[390, "fipy.variables.cellVariable.CellVariable.constraintMask"]], "copy() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.copy"]], "dot() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.dot"]], "facegrad (fipy.variables.cellvariable.cellvariable property)": [[390, "fipy.variables.cellVariable.CellVariable.faceGrad"]], "facegradaverage (fipy.variables.cellvariable.cellvariable property)": [[390, "fipy.variables.cellVariable.CellVariable.faceGradAverage"]], "facevalue (fipy.variables.cellvariable.cellvariable property)": [[390, "fipy.variables.cellVariable.CellVariable.faceValue"]], "fipy.variables.cellvariable": [[390, "module-fipy.variables.cellVariable"]], "gaussgrad (fipy.variables.cellvariable.cellvariable property)": [[390, "fipy.variables.cellVariable.CellVariable.gaussGrad"]], "getsctype() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.getsctype"]], "globalvalue (fipy.variables.cellvariable.cellvariable property)": [[390, "fipy.variables.cellVariable.CellVariable.globalValue"]], "grad (fipy.variables.cellvariable.cellvariable property)": [[390, "fipy.variables.cellVariable.CellVariable.grad"]], "harmonicfacevalue (fipy.variables.cellvariable.cellvariable property)": [[390, "fipy.variables.cellVariable.CellVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.inBaseUnits"]], "inunitsof() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.cellvariable.cellvariable property)": [[390, "fipy.variables.cellVariable.CellVariable.leastSquaresGrad"]], "mag (fipy.variables.cellvariable.cellvariable property)": [[390, "fipy.variables.cellVariable.CellVariable.mag"]], "min() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.min"]], "minmodfacevalue (fipy.variables.cellvariable.cellvariable property)": [[390, "fipy.variables.cellVariable.CellVariable.minmodFaceValue"]], "old (fipy.variables.cellvariable.cellvariable property)": [[390, "fipy.variables.cellVariable.CellVariable.old"]], "rdot() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.rdot"]], "release() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.release"]], "setvalue() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.setValue"]], "shape (fipy.variables.cellvariable.cellvariable property)": [[390, "fipy.variables.cellVariable.CellVariable.shape"]], "std() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.std"]], "unit (fipy.variables.cellvariable.cellvariable property)": [[390, "fipy.variables.cellVariable.CellVariable.unit"]], "updateold() (fipy.variables.cellvariable.cellvariable method)": [[390, "fipy.variables.cellVariable.CellVariable.updateOld"]], "value (fipy.variables.cellvariable.cellvariable property)": [[390, "fipy.variables.cellVariable.CellVariable.value"]], "fipy.variables.constant": [[391, "module-fipy.variables.constant"]], "fipy.variables.constraintmask": [[392, "module-fipy.variables.constraintMask"]], "fipy.variables.coupledcellvariable": [[393, "module-fipy.variables.coupledCellVariable"]], "distancevariable (class in fipy.variables.distancevariable)": [[394, "fipy.variables.distanceVariable.DistanceVariable"]], "__abs__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__abs__"]], "__and__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__and__"]], "__array__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__array__"]], "__array_wrap__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__array_wrap__"]], "__bool__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__bool__"]], "__call__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__call__"]], "__eq__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__eq__"]], "__ge__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__ge__"]], "__getitem__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__getitem__"]], "__getstate__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__getstate__"]], "__gt__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__gt__"]], "__hash__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__hash__"]], "__invert__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__invert__"]], "__le__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__le__"]], "__lt__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__lt__"]], "__ne__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__ne__"]], "__new__() (fipy.variables.distancevariable.distancevariable static method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__new__"]], "__nonzero__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__nonzero__"]], "__or__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__or__"]], "__pow__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__pow__"]], "__repr__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__repr__"]], "__setstate__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__setstate__"]], "__str__() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.__str__"]], "all() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.all"]], "allclose() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.allclose"]], "any() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.any"]], "arithmeticfacevalue (fipy.variables.distancevariable.distancevariable property)": [[394, "fipy.variables.distanceVariable.DistanceVariable.arithmeticFaceValue"]], "calcdistancefunction() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.calcDistanceFunction"]], "cellinterfaceareas (fipy.variables.distancevariable.distancevariable property)": [[394, "fipy.variables.distanceVariable.DistanceVariable.cellInterfaceAreas"]], "cellvolumeaverage (fipy.variables.distancevariable.distancevariable property)": [[394, "fipy.variables.distanceVariable.DistanceVariable.cellVolumeAverage"]], "constrain() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.constrain"]], "constraintmask (fipy.variables.distancevariable.distancevariable property)": [[394, "fipy.variables.distanceVariable.DistanceVariable.constraintMask"]], "copy() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.copy"]], "dot() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.dot"]], "extendvariable() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.extendVariable"]], "facegrad (fipy.variables.distancevariable.distancevariable property)": [[394, "fipy.variables.distanceVariable.DistanceVariable.faceGrad"]], "facegradaverage (fipy.variables.distancevariable.distancevariable property)": [[394, "fipy.variables.distanceVariable.DistanceVariable.faceGradAverage"]], "facevalue (fipy.variables.distancevariable.distancevariable property)": [[394, "fipy.variables.distanceVariable.DistanceVariable.faceValue"]], "fipy.variables.distancevariable": [[394, "module-fipy.variables.distanceVariable"]], "gaussgrad (fipy.variables.distancevariable.distancevariable property)": [[394, "fipy.variables.distanceVariable.DistanceVariable.gaussGrad"]], "getsctype() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.getsctype"]], "globalvalue (fipy.variables.distancevariable.distancevariable property)": [[394, "fipy.variables.distanceVariable.DistanceVariable.globalValue"]], "grad (fipy.variables.distancevariable.distancevariable property)": [[394, "fipy.variables.distanceVariable.DistanceVariable.grad"]], "harmonicfacevalue (fipy.variables.distancevariable.distancevariable property)": [[394, "fipy.variables.distanceVariable.DistanceVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.distancevariable.distancevariable property)": [[394, "fipy.variables.distanceVariable.DistanceVariable.leastSquaresGrad"]], "mag (fipy.variables.distancevariable.distancevariable property)": [[394, "fipy.variables.distanceVariable.DistanceVariable.mag"]], "min() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.min"]], "minmodfacevalue (fipy.variables.distancevariable.distancevariable property)": [[394, "fipy.variables.distanceVariable.DistanceVariable.minmodFaceValue"]], "old (fipy.variables.distancevariable.distancevariable property)": [[394, "fipy.variables.distanceVariable.DistanceVariable.old"]], "rdot() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.rdot"]], "release() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.release"]], "setvalue() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.setValue"]], "shape (fipy.variables.distancevariable.distancevariable property)": [[394, "fipy.variables.distanceVariable.DistanceVariable.shape"]], "std() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.std"]], "unit (fipy.variables.distancevariable.distancevariable property)": [[394, "fipy.variables.distanceVariable.DistanceVariable.unit"]], "updateold() (fipy.variables.distancevariable.distancevariable method)": [[394, "fipy.variables.distanceVariable.DistanceVariable.updateOld"]], "value (fipy.variables.distancevariable.distancevariable property)": [[394, "fipy.variables.distanceVariable.DistanceVariable.value"]], "exponentialnoisevariable (class in fipy.variables.exponentialnoisevariable)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable"]], "__abs__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__abs__"]], "__and__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__and__"]], "__array__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__bool__"]], "__call__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__call__"]], "__eq__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__eq__"]], "__ge__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__gt__"]], "__hash__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__hash__"]], "__invert__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__invert__"]], "__le__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__le__"]], "__lt__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__lt__"]], "__ne__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__ne__"]], "__new__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable static method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__or__"]], "__pow__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__pow__"]], "__repr__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__setstate__"]], "__str__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__str__"]], "all() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.all"]], "allclose() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.allclose"]], "any() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.constrain"]], "constraintmask (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.constraintMask"]], "copy() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.copy"]], "dot() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.dot"]], "facegrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceValue"]], "fipy.variables.exponentialnoisevariable": [[395, "module-fipy.variables.exponentialNoiseVariable"]], "gaussgrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.getsctype"]], "globalvalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.globalValue"]], "grad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.mag"]], "min() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.min"]], "minmodfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.minmodFaceValue"]], "old (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.old"]], "rdot() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.rdot"]], "release() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.release"]], "scramble() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.scramble"]], "setvalue() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.setValue"]], "shape (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.shape"]], "std() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.std"]], "unit (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.unit"]], "updateold() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.updateOld"]], "value (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[395, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.value"]], "fipy.variables.facegradcontributionsvariable": [[396, "module-fipy.variables.faceGradContributionsVariable"]], "fipy.variables.facegradvariable": [[397, "module-fipy.variables.faceGradVariable"]], "facevariable (class in fipy.variables.facevariable)": [[398, "fipy.variables.faceVariable.FaceVariable"]], "__abs__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__abs__"]], "__and__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__and__"]], "__array__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__array__"]], "__array_wrap__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__array_wrap__"]], "__bool__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__bool__"]], "__call__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__call__"]], "__eq__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__eq__"]], "__ge__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__ge__"]], "__getitem__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__getitem__"]], "__getstate__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__getstate__"]], "__gt__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__gt__"]], "__hash__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__hash__"]], "__invert__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__invert__"]], "__le__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__le__"]], "__lt__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__lt__"]], "__ne__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__ne__"]], "__new__() (fipy.variables.facevariable.facevariable static method)": [[398, "fipy.variables.faceVariable.FaceVariable.__new__"]], "__nonzero__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__nonzero__"]], "__or__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__or__"]], "__pow__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__pow__"]], "__repr__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__repr__"]], "__setstate__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__setstate__"]], "__str__() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.__str__"]], "all() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.all"]], "allclose() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.allclose"]], "any() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.any"]], "constrain() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.constrain"]], "constraintmask (fipy.variables.facevariable.facevariable property)": [[398, "fipy.variables.faceVariable.FaceVariable.constraintMask"]], "copy() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.copy"]], "divergence (fipy.variables.facevariable.facevariable property)": [[398, "fipy.variables.faceVariable.FaceVariable.divergence"]], "dot() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.dot"]], "fipy.variables.facevariable": [[398, "module-fipy.variables.faceVariable"]], "getsctype() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.getsctype"]], "inbaseunits() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.inUnitsOf"]], "mag (fipy.variables.facevariable.facevariable property)": [[398, "fipy.variables.faceVariable.FaceVariable.mag"]], "min() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.min"]], "rdot() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.rdot"]], "release() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.release"]], "setvalue() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.setValue"]], "shape (fipy.variables.facevariable.facevariable property)": [[398, "fipy.variables.faceVariable.FaceVariable.shape"]], "std() (fipy.variables.facevariable.facevariable method)": [[398, "fipy.variables.faceVariable.FaceVariable.std"]], "unit (fipy.variables.facevariable.facevariable property)": [[398, "fipy.variables.faceVariable.FaceVariable.unit"]], "value (fipy.variables.facevariable.facevariable property)": [[398, "fipy.variables.faceVariable.FaceVariable.value"]], "gammanoisevariable (class in fipy.variables.gammanoisevariable)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable"]], "__abs__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__abs__"]], "__and__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__and__"]], "__array__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__bool__"]], "__call__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__call__"]], "__eq__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__eq__"]], "__ge__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__gt__"]], "__hash__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__hash__"]], "__invert__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__invert__"]], "__le__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__le__"]], "__lt__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__lt__"]], "__ne__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__ne__"]], "__new__() (fipy.variables.gammanoisevariable.gammanoisevariable static method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__or__"]], "__pow__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__pow__"]], "__repr__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__setstate__"]], "__str__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__str__"]], "all() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.all"]], "allclose() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.allclose"]], "any() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.constrain"]], "constraintmask (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.constraintMask"]], "copy() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.copy"]], "dot() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.dot"]], "facegrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceValue"]], "fipy.variables.gammanoisevariable": [[399, "module-fipy.variables.gammaNoiseVariable"]], "gaussgrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.getsctype"]], "globalvalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.globalValue"]], "grad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.mag"]], "min() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.min"]], "minmodfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.minmodFaceValue"]], "old (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.old"]], "rdot() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.rdot"]], "release() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.release"]], "scramble() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.scramble"]], "setvalue() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.setValue"]], "shape (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.shape"]], "std() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.std"]], "unit (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.unit"]], "updateold() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.updateOld"]], "value (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[399, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.value"]], "fipy.variables.gausscellgradvariable": [[400, "module-fipy.variables.gaussCellGradVariable"]], "gaussiannoisevariable (class in fipy.variables.gaussiannoisevariable)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable"]], "__abs__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__abs__"]], "__and__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__and__"]], "__array__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__bool__"]], "__call__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__call__"]], "__eq__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__eq__"]], "__ge__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__gt__"]], "__hash__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__hash__"]], "__invert__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__invert__"]], "__le__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__le__"]], "__lt__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__lt__"]], "__ne__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__ne__"]], "__new__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable static method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__or__"]], "__pow__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__pow__"]], "__repr__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__setstate__"]], "__str__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__str__"]], "all() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.all"]], "allclose() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.allclose"]], "any() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.constrain"]], "constraintmask (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.constraintMask"]], "copy() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.copy"]], "dot() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.dot"]], "facegrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceValue"]], "fipy.variables.gaussiannoisevariable": [[401, "module-fipy.variables.gaussianNoiseVariable"]], "gaussgrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.getsctype"]], "globalvalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.globalValue"]], "grad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.mag"]], "min() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.min"]], "minmodfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.minmodFaceValue"]], "old (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.old"]], "rdot() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.rdot"]], "release() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.release"]], "scramble() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.scramble"]], "setvalue() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.setValue"]], "shape (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.shape"]], "std() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.std"]], "unit (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.unit"]], "updateold() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.updateOld"]], "value (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[401, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.value"]], "fipy.variables.harmoniccelltofacevariable": [[402, "module-fipy.variables.harmonicCellToFaceVariable"]], "histogramvariable (class in fipy.variables.histogramvariable)": [[403, "fipy.variables.histogramVariable.HistogramVariable"]], "__abs__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__abs__"]], "__and__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__and__"]], "__array__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__array__"]], "__array_wrap__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__array_wrap__"]], "__bool__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__bool__"]], "__call__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__call__"]], "__eq__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__eq__"]], "__ge__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__ge__"]], "__getitem__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__getitem__"]], "__getstate__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__getstate__"]], "__gt__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__gt__"]], "__hash__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__hash__"]], "__invert__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__invert__"]], "__le__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__le__"]], "__lt__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__lt__"]], "__ne__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__ne__"]], "__new__() (fipy.variables.histogramvariable.histogramvariable static method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__new__"]], "__nonzero__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__nonzero__"]], "__or__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__or__"]], "__pow__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__pow__"]], "__repr__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__repr__"]], "__setstate__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__setstate__"]], "__str__() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.__str__"]], "all() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.all"]], "allclose() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.allclose"]], "any() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.any"]], "arithmeticfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[403, "fipy.variables.histogramVariable.HistogramVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.histogramvariable.histogramvariable property)": [[403, "fipy.variables.histogramVariable.HistogramVariable.cellVolumeAverage"]], "constrain() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.constrain"]], "constraintmask (fipy.variables.histogramvariable.histogramvariable property)": [[403, "fipy.variables.histogramVariable.HistogramVariable.constraintMask"]], "copy() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.copy"]], "dot() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.dot"]], "facegrad (fipy.variables.histogramvariable.histogramvariable property)": [[403, "fipy.variables.histogramVariable.HistogramVariable.faceGrad"]], "facegradaverage (fipy.variables.histogramvariable.histogramvariable property)": [[403, "fipy.variables.histogramVariable.HistogramVariable.faceGradAverage"]], "facevalue (fipy.variables.histogramvariable.histogramvariable property)": [[403, "fipy.variables.histogramVariable.HistogramVariable.faceValue"]], "fipy.variables.histogramvariable": [[403, "module-fipy.variables.histogramVariable"]], "gaussgrad (fipy.variables.histogramvariable.histogramvariable property)": [[403, "fipy.variables.histogramVariable.HistogramVariable.gaussGrad"]], "getsctype() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.getsctype"]], "globalvalue (fipy.variables.histogramvariable.histogramvariable property)": [[403, "fipy.variables.histogramVariable.HistogramVariable.globalValue"]], "grad (fipy.variables.histogramvariable.histogramvariable property)": [[403, "fipy.variables.histogramVariable.HistogramVariable.grad"]], "harmonicfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[403, "fipy.variables.histogramVariable.HistogramVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.inBaseUnits"]], "inunitsof() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.histogramvariable.histogramvariable property)": [[403, "fipy.variables.histogramVariable.HistogramVariable.leastSquaresGrad"]], "mag (fipy.variables.histogramvariable.histogramvariable property)": [[403, "fipy.variables.histogramVariable.HistogramVariable.mag"]], "min() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.min"]], "minmodfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[403, "fipy.variables.histogramVariable.HistogramVariable.minmodFaceValue"]], "old (fipy.variables.histogramvariable.histogramvariable property)": [[403, "fipy.variables.histogramVariable.HistogramVariable.old"]], "rdot() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.rdot"]], "release() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.release"]], "setvalue() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.setValue"]], "shape (fipy.variables.histogramvariable.histogramvariable property)": [[403, "fipy.variables.histogramVariable.HistogramVariable.shape"]], "std() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.std"]], "unit (fipy.variables.histogramvariable.histogramvariable property)": [[403, "fipy.variables.histogramVariable.HistogramVariable.unit"]], "updateold() (fipy.variables.histogramvariable.histogramvariable method)": [[403, "fipy.variables.histogramVariable.HistogramVariable.updateOld"]], "value (fipy.variables.histogramvariable.histogramvariable property)": [[403, "fipy.variables.histogramVariable.HistogramVariable.value"]], "fipy.variables.interfaceareavariable": [[404, "module-fipy.variables.interfaceAreaVariable"]], "fipy.variables.interfaceflagvariable": [[405, "module-fipy.variables.interfaceFlagVariable"]], "fipy.variables.leastsquarescellgradvariable": [[406, "module-fipy.variables.leastSquaresCellGradVariable"]], "fipy.variables.levelsetdiffusionvariable": [[407, "module-fipy.variables.levelSetDiffusionVariable"]], "fipy.variables.meshvariable": [[408, "module-fipy.variables.meshVariable"]], "fipy.variables.minmodcelltofacevariable": [[409, "module-fipy.variables.minmodCellToFaceVariable"]], "fipy.variables.modcellgradvariable": [[410, "module-fipy.variables.modCellGradVariable"]], "fipy.variables.modcelltofacevariable": [[411, "module-fipy.variables.modCellToFaceVariable"]], "fipy.variables.modfacegradvariable": [[412, "module-fipy.variables.modFaceGradVariable"]], "fipy.variables.modphysicalfield": [[413, "module-fipy.variables.modPhysicalField"]], "modularvariable (class in fipy.variables.modularvariable)": [[414, "fipy.variables.modularVariable.ModularVariable"]], "__abs__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__abs__"]], "__and__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__and__"]], "__array__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__array__"]], "__array_wrap__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__array_wrap__"]], "__bool__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__bool__"]], "__call__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__call__"]], "__eq__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__eq__"]], "__ge__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__ge__"]], "__getitem__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__getitem__"]], "__getstate__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__getstate__"]], "__gt__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__gt__"]], "__hash__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__hash__"]], "__invert__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__invert__"]], "__le__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__le__"]], "__lt__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__lt__"]], "__ne__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__ne__"]], "__new__() (fipy.variables.modularvariable.modularvariable static method)": [[414, "fipy.variables.modularVariable.ModularVariable.__new__"]], "__nonzero__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__nonzero__"]], "__or__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__or__"]], "__pow__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__pow__"]], "__repr__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__repr__"]], "__setstate__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__setstate__"]], "__str__() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.__str__"]], "all() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.all"]], "allclose() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.allclose"]], "any() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.any"]], "arithmeticfacevalue (fipy.variables.modularvariable.modularvariable property)": [[414, "fipy.variables.modularVariable.ModularVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.modularvariable.modularvariable property)": [[414, "fipy.variables.modularVariable.ModularVariable.cellVolumeAverage"]], "constrain() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.constrain"]], "constraintmask (fipy.variables.modularvariable.modularvariable property)": [[414, "fipy.variables.modularVariable.ModularVariable.constraintMask"]], "copy() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.copy"]], "dot() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.dot"]], "facegrad (fipy.variables.modularvariable.modularvariable property)": [[414, "fipy.variables.modularVariable.ModularVariable.faceGrad"]], "facegradaverage (fipy.variables.modularvariable.modularvariable property)": [[414, "fipy.variables.modularVariable.ModularVariable.faceGradAverage"]], "facegradnomod (fipy.variables.modularvariable.modularvariable property)": [[414, "fipy.variables.modularVariable.ModularVariable.faceGradNoMod"]], "facevalue (fipy.variables.modularvariable.modularvariable property)": [[414, "fipy.variables.modularVariable.ModularVariable.faceValue"]], "fipy.variables.modularvariable": [[414, "module-fipy.variables.modularVariable"]], "gaussgrad (fipy.variables.modularvariable.modularvariable property)": [[414, "fipy.variables.modularVariable.ModularVariable.gaussGrad"]], "getsctype() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.getsctype"]], "globalvalue (fipy.variables.modularvariable.modularvariable property)": [[414, "fipy.variables.modularVariable.ModularVariable.globalValue"]], "grad (fipy.variables.modularvariable.modularvariable property)": [[414, "fipy.variables.modularVariable.ModularVariable.grad"]], "harmonicfacevalue (fipy.variables.modularvariable.modularvariable property)": [[414, "fipy.variables.modularVariable.ModularVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.inBaseUnits"]], "inunitsof() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.modularvariable.modularvariable property)": [[414, "fipy.variables.modularVariable.ModularVariable.leastSquaresGrad"]], "mag (fipy.variables.modularvariable.modularvariable property)": [[414, "fipy.variables.modularVariable.ModularVariable.mag"]], "min() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.min"]], "minmodfacevalue (fipy.variables.modularvariable.modularvariable property)": [[414, "fipy.variables.modularVariable.ModularVariable.minmodFaceValue"]], "old (fipy.variables.modularvariable.modularvariable property)": [[414, "fipy.variables.modularVariable.ModularVariable.old"]], "rdot() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.rdot"]], "release() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.release"]], "setvalue() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.setValue"]], "shape (fipy.variables.modularvariable.modularvariable property)": [[414, "fipy.variables.modularVariable.ModularVariable.shape"]], "std() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.std"]], "unit (fipy.variables.modularvariable.modularvariable property)": [[414, "fipy.variables.modularVariable.ModularVariable.unit"]], "updateold() (fipy.variables.modularvariable.modularvariable method)": [[414, "fipy.variables.modularVariable.ModularVariable.updateOld"]], "value (fipy.variables.modularvariable.modularvariable property)": [[414, "fipy.variables.modularVariable.ModularVariable.value"]], "noisevariable (class in fipy.variables.noisevariable)": [[415, "fipy.variables.noiseVariable.NoiseVariable"]], "__abs__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__abs__"]], "__and__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__and__"]], "__array__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__bool__"]], "__call__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__call__"]], "__eq__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__eq__"]], "__ge__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__ge__"]], "__getitem__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__getstate__"]], "__gt__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__gt__"]], "__hash__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__hash__"]], "__invert__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__invert__"]], "__le__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__le__"]], "__lt__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__lt__"]], "__ne__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__ne__"]], "__new__() (fipy.variables.noisevariable.noisevariable static method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__new__"]], "__nonzero__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__nonzero__"]], "__or__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__or__"]], "__pow__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__pow__"]], "__repr__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__repr__"]], "__setstate__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__setstate__"]], "__str__() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.__str__"]], "all() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.all"]], "allclose() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.allclose"]], "any() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.noisevariable.noisevariable property)": [[415, "fipy.variables.noiseVariable.NoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.noisevariable.noisevariable property)": [[415, "fipy.variables.noiseVariable.NoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.constrain"]], "constraintmask (fipy.variables.noisevariable.noisevariable property)": [[415, "fipy.variables.noiseVariable.NoiseVariable.constraintMask"]], "copy() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.copy"]], "dot() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.dot"]], "facegrad (fipy.variables.noisevariable.noisevariable property)": [[415, "fipy.variables.noiseVariable.NoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.noisevariable.noisevariable property)": [[415, "fipy.variables.noiseVariable.NoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.noisevariable.noisevariable property)": [[415, "fipy.variables.noiseVariable.NoiseVariable.faceValue"]], "fipy.variables.noisevariable": [[415, "module-fipy.variables.noiseVariable"]], "gaussgrad (fipy.variables.noisevariable.noisevariable property)": [[415, "fipy.variables.noiseVariable.NoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.getsctype"]], "globalvalue (fipy.variables.noisevariable.noisevariable property)": [[415, "fipy.variables.noiseVariable.NoiseVariable.globalValue"]], "grad (fipy.variables.noisevariable.noisevariable property)": [[415, "fipy.variables.noiseVariable.NoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.noisevariable.noisevariable property)": [[415, "fipy.variables.noiseVariable.NoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.noisevariable.noisevariable property)": [[415, "fipy.variables.noiseVariable.NoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.noisevariable.noisevariable property)": [[415, "fipy.variables.noiseVariable.NoiseVariable.mag"]], "min() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.min"]], "minmodfacevalue (fipy.variables.noisevariable.noisevariable property)": [[415, "fipy.variables.noiseVariable.NoiseVariable.minmodFaceValue"]], "old (fipy.variables.noisevariable.noisevariable property)": [[415, "fipy.variables.noiseVariable.NoiseVariable.old"]], "rdot() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.rdot"]], "release() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.release"]], "scramble() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.scramble"]], "setvalue() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.setValue"]], "shape (fipy.variables.noisevariable.noisevariable property)": [[415, "fipy.variables.noiseVariable.NoiseVariable.shape"]], "std() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.std"]], "unit (fipy.variables.noisevariable.noisevariable property)": [[415, "fipy.variables.noiseVariable.NoiseVariable.unit"]], "updateold() (fipy.variables.noisevariable.noisevariable method)": [[415, "fipy.variables.noiseVariable.NoiseVariable.updateOld"]], "value (fipy.variables.noisevariable.noisevariable property)": [[415, "fipy.variables.noiseVariable.NoiseVariable.value"]], "fipy.variables.operatorvariable": [[416, "module-fipy.variables.operatorVariable"]], "scharfettergummelfacevariable (class in fipy.variables.scharfettergummelfacevariable)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable"]], "__abs__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__abs__"]], "__and__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__and__"]], "__array__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__array__"]], "__array_wrap__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__array_wrap__"]], "__bool__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__bool__"]], "__call__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__call__"]], "__eq__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__eq__"]], "__ge__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__ge__"]], "__getitem__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__getitem__"]], "__getstate__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__getstate__"]], "__gt__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__gt__"]], "__hash__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__hash__"]], "__invert__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__invert__"]], "__le__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__le__"]], "__lt__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__lt__"]], "__ne__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__ne__"]], "__new__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable static method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__new__"]], "__nonzero__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__nonzero__"]], "__or__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__or__"]], "__pow__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__pow__"]], "__repr__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__repr__"]], "__setstate__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__setstate__"]], "__str__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__str__"]], "all() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.all"]], "allclose() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.allclose"]], "any() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.any"]], "constrain() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.constrain"]], "constraintmask (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.constraintMask"]], "copy() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.copy"]], "divergence (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.divergence"]], "dot() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.dot"]], "fipy.variables.scharfettergummelfacevariable": [[417, "module-fipy.variables.scharfetterGummelFaceVariable"]], "getsctype() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.getsctype"]], "inbaseunits() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.inUnitsOf"]], "mag (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.mag"]], "min() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.min"]], "rdot() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.rdot"]], "release() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.release"]], "setvalue() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.setValue"]], "shape (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.shape"]], "std() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.std"]], "unit (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.unit"]], "value (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[417, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.value"]], "surfactantconvectionvariable (class in fipy.variables.surfactantconvectionvariable)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable"]], "__abs__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__abs__"]], "__and__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__and__"]], "__array__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__array__"]], "__array_wrap__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__array_wrap__"]], "__bool__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__bool__"]], "__call__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__call__"]], "__eq__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__eq__"]], "__ge__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__ge__"]], "__getitem__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__getitem__"]], "__getstate__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__getstate__"]], "__gt__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__gt__"]], "__hash__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__hash__"]], "__invert__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__invert__"]], "__le__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__le__"]], "__lt__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__lt__"]], "__ne__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__ne__"]], "__new__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable static method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__new__"]], "__nonzero__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__nonzero__"]], "__or__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__or__"]], "__pow__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__pow__"]], "__repr__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__repr__"]], "__setstate__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__setstate__"]], "__str__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__str__"]], "all() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.all"]], "allclose() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.allclose"]], "any() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.any"]], "constrain() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.constrain"]], "constraintmask (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.constraintMask"]], "copy() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.copy"]], "divergence (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.divergence"]], "dot() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.dot"]], "fipy.variables.surfactantconvectionvariable": [[418, "module-fipy.variables.surfactantConvectionVariable"]], "getsctype() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.getsctype"]], "inbaseunits() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.inBaseUnits"]], "inunitsof() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.inUnitsOf"]], "mag (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.mag"]], "min() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.min"]], "rdot() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.rdot"]], "release() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.release"]], "setvalue() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.setValue"]], "shape (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.shape"]], "std() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.std"]], "unit (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.unit"]], "value (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[418, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.value"]], "surfactantvariable (class in fipy.variables.surfactantvariable)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable"]], "__abs__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__abs__"]], "__and__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__and__"]], "__array__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__array__"]], "__array_wrap__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__array_wrap__"]], "__bool__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__bool__"]], "__call__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__call__"]], "__eq__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__eq__"]], "__ge__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__ge__"]], "__getitem__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__getitem__"]], "__getstate__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__getstate__"]], "__gt__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__gt__"]], "__hash__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__hash__"]], "__invert__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__invert__"]], "__le__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__le__"]], "__lt__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__lt__"]], "__ne__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__ne__"]], "__new__() (fipy.variables.surfactantvariable.surfactantvariable static method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__new__"]], "__nonzero__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__nonzero__"]], "__or__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__or__"]], "__pow__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__pow__"]], "__repr__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__repr__"]], "__setstate__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__setstate__"]], "__str__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.__str__"]], "all() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.all"]], "allclose() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.allclose"]], "any() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.any"]], "arithmeticfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.surfactantvariable.surfactantvariable property)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.cellVolumeAverage"]], "constrain() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.constrain"]], "constraintmask (fipy.variables.surfactantvariable.surfactantvariable property)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.constraintMask"]], "copy() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.copy"]], "dot() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.dot"]], "facegrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.faceGrad"]], "facegradaverage (fipy.variables.surfactantvariable.surfactantvariable property)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.faceGradAverage"]], "facevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.faceValue"]], "fipy.variables.surfactantvariable": [[419, "module-fipy.variables.surfactantVariable"]], "gaussgrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.gaussGrad"]], "getsctype() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.getsctype"]], "globalvalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.globalValue"]], "grad (fipy.variables.surfactantvariable.surfactantvariable property)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.grad"]], "harmonicfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.inBaseUnits"]], "inunitsof() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.inUnitsOf"]], "interfacevar (fipy.variables.surfactantvariable.surfactantvariable property)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.interfaceVar"]], "leastsquaresgrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.leastSquaresGrad"]], "mag (fipy.variables.surfactantvariable.surfactantvariable property)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.mag"]], "min() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.min"]], "minmodfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.minmodFaceValue"]], "old (fipy.variables.surfactantvariable.surfactantvariable property)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.old"]], "rdot() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.rdot"]], "release() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.release"]], "setvalue() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.setValue"]], "shape (fipy.variables.surfactantvariable.surfactantvariable property)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.shape"]], "std() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.std"]], "unit (fipy.variables.surfactantvariable.surfactantvariable property)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.unit"]], "updateold() (fipy.variables.surfactantvariable.surfactantvariable method)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.updateOld"]], "value (fipy.variables.surfactantvariable.surfactantvariable property)": [[419, "fipy.variables.surfactantVariable.SurfactantVariable.value"]], "fipy.variables.test": [[420, "module-fipy.variables.test"]], "fipy.variables.unaryoperatorvariable": [[421, "module-fipy.variables.unaryOperatorVariable"]], "uniformnoisevariable (class in fipy.variables.uniformnoisevariable)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable"]], "__abs__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__abs__"]], "__and__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__and__"]], "__array__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__bool__"]], "__call__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__call__"]], "__eq__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__eq__"]], "__ge__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__gt__"]], "__hash__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__hash__"]], "__invert__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__invert__"]], "__le__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__le__"]], "__lt__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__lt__"]], "__ne__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__ne__"]], "__new__() (fipy.variables.uniformnoisevariable.uniformnoisevariable static method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__or__"]], "__pow__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__pow__"]], "__repr__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__setstate__"]], "__str__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__str__"]], "all() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.all"]], "allclose() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.allclose"]], "any() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.constrain"]], "constraintmask (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.constraintMask"]], "copy() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.copy"]], "dot() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.dot"]], "facegrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceValue"]], "fipy.variables.uniformnoisevariable": [[422, "module-fipy.variables.uniformNoiseVariable"]], "gaussgrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.getsctype"]], "globalvalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.globalValue"]], "grad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.mag"]], "min() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.min"]], "minmodfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.minmodFaceValue"]], "old (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.old"]], "rdot() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.rdot"]], "release() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.release"]], "scramble() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.scramble"]], "setvalue() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.setValue"]], "shape (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.shape"]], "std() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.std"]], "unit (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.unit"]], "updateold() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.updateOld"]], "value (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[422, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.value"]], "variable (class in fipy.variables.variable)": [[423, "fipy.variables.variable.Variable"]], "__abs__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__abs__"]], "__and__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__and__"]], "__array__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__array__"]], "__array_wrap__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__array_wrap__"]], "__bool__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__bool__"]], "__call__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__call__"]], "__eq__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__eq__"]], "__ge__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__ge__"]], "__getitem__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__getitem__"]], "__getstate__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__getstate__"]], "__gt__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__gt__"]], "__hash__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__hash__"]], "__invert__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__invert__"]], "__le__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__le__"]], "__lt__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__lt__"]], "__ne__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__ne__"]], "__new__() (fipy.variables.variable.variable static method)": [[423, "fipy.variables.variable.Variable.__new__"]], "__nonzero__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__nonzero__"]], "__or__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__or__"]], "__pow__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__pow__"]], "__repr__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__repr__"]], "__setstate__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__setstate__"]], "__str__() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.__str__"]], "all() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.all"]], "allclose() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.allclose"]], "any() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.any"]], "constrain() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.constrain"]], "copy() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.copy"]], "fipy.variables.variable": [[423, "module-fipy.variables.variable"]], "getsctype() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.getsctype"]], "inbaseunits() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.inBaseUnits"]], "inunitsof() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.inUnitsOf"]], "mag (fipy.variables.variable.variable property)": [[423, "fipy.variables.variable.Variable.mag"]], "release() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.release"]], "setvalue() (fipy.variables.variable.variable method)": [[423, "fipy.variables.variable.Variable.setValue"]], "shape (fipy.variables.variable.variable property)": [[423, "fipy.variables.variable.Variable.shape"]], "unit (fipy.variables.variable.variable property)": [[423, "fipy.variables.variable.Variable.unit"]], "value (fipy.variables.variable.variable property)": [[423, "fipy.variables.variable.Variable.value"]], "dummyviewer (class in fipy.viewers)": [[424, "fipy.viewers.DummyViewer"]], "meshdimensionerror": [[424, "fipy.viewers.MeshDimensionError"]], "viewer() (in module fipy.viewers)": [[424, "fipy.viewers.Viewer"]], "__cause__ (fipy.viewers.meshdimensionerror attribute)": [[424, "fipy.viewers.MeshDimensionError.__cause__"]], "__context__ (fipy.viewers.meshdimensionerror attribute)": [[424, "fipy.viewers.MeshDimensionError.__context__"]], "__delattr__() (fipy.viewers.meshdimensionerror method)": [[424, "fipy.viewers.MeshDimensionError.__delattr__"]], "__getattribute__() (fipy.viewers.meshdimensionerror method)": [[424, "fipy.viewers.MeshDimensionError.__getattribute__"]], "__reduce__() (fipy.viewers.meshdimensionerror method)": [[424, "fipy.viewers.MeshDimensionError.__reduce__"]], "__repr__() (fipy.viewers.meshdimensionerror method)": [[424, "fipy.viewers.MeshDimensionError.__repr__"]], "__setattr__() (fipy.viewers.meshdimensionerror method)": [[424, "fipy.viewers.MeshDimensionError.__setattr__"]], "__str__() (fipy.viewers.meshdimensionerror method)": [[424, "fipy.viewers.MeshDimensionError.__str__"]], "plot() (fipy.viewers.dummyviewer method)": [[424, "fipy.viewers.DummyViewer.plot"]], "plotmesh() (fipy.viewers.dummyviewer method)": [[424, "fipy.viewers.DummyViewer.plotMesh"]], "setlimits() (fipy.viewers.dummyviewer method)": [[424, "fipy.viewers.DummyViewer.setLimits"]], "title (fipy.viewers.dummyviewer property)": [[424, "fipy.viewers.DummyViewer.title"]], "vars (fipy.viewers.dummyviewer property)": [[424, "fipy.viewers.DummyViewer.vars"]], "with_traceback() (fipy.viewers.meshdimensionerror method)": [[424, "fipy.viewers.MeshDimensionError.with_traceback"]], "matplotlibviewer() (in module fipy.viewers.matplotlibviewer)": [[425, "fipy.viewers.matplotlibViewer.MatplotlibViewer"]], "fipy.viewers.matplotlibviewer": [[425, "module-fipy.viewers.matplotlibViewer"]], "mayaviclient (class in fipy.viewers.mayaviviewer)": [[426, "fipy.viewers.mayaviViewer.MayaviClient"]], "fipy.viewers.mayaviviewer": [[426, "module-fipy.viewers.mayaviViewer"]], "fps (fipy.viewers.mayaviviewer.mayaviclient property)": [[426, "fipy.viewers.mayaviViewer.MayaviClient.fps"]], "plot() (fipy.viewers.mayaviviewer.mayaviclient method)": [[426, "fipy.viewers.mayaviViewer.MayaviClient.plot"]], "plotmesh() (fipy.viewers.mayaviviewer.mayaviclient method)": [[426, "fipy.viewers.mayaviViewer.MayaviClient.plotMesh"]], "setlimits() (fipy.viewers.mayaviviewer.mayaviclient method)": [[426, "fipy.viewers.mayaviViewer.MayaviClient.setLimits"]], "title (fipy.viewers.mayaviviewer.mayaviclient property)": [[426, "fipy.viewers.mayaviViewer.MayaviClient.title"]], "vars (fipy.viewers.mayaviviewer.mayaviclient property)": [[426, "fipy.viewers.mayaviViewer.MayaviClient.vars"]], "mayaviclient (class in fipy.viewers.mayaviviewer.mayaviclient)": [[427, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient"]], "fipy.viewers.mayaviviewer.mayaviclient": [[427, "module-fipy.viewers.mayaviViewer.mayaviClient"]], "fps (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[427, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.fps"]], "plot() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[427, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.plot"]], "plotmesh() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[427, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.plotMesh"]], "setlimits() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[427, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.setLimits"]], "title (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[427, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.title"]], "vars (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[427, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.vars"]], "fipy.viewers.mayaviviewer.test": [[428, "module-fipy.viewers.mayaviViewer.test"]], "multiviewer (class in fipy.viewers.multiviewer)": [[429, "fipy.viewers.multiViewer.MultiViewer"]], "fipy.viewers.multiviewer": [[429, "module-fipy.viewers.multiViewer"]], "plot() (fipy.viewers.multiviewer.multiviewer method)": [[429, "fipy.viewers.multiViewer.MultiViewer.plot"]], "plotmesh() (fipy.viewers.multiviewer.multiviewer method)": [[429, "fipy.viewers.multiViewer.MultiViewer.plotMesh"]], "setlimits() (fipy.viewers.multiviewer.multiviewer method)": [[429, "fipy.viewers.multiViewer.MultiViewer.setLimits"]], "title (fipy.viewers.multiviewer.multiviewer property)": [[429, "fipy.viewers.multiViewer.MultiViewer.title"]], "vars (fipy.viewers.multiviewer.multiviewer property)": [[429, "fipy.viewers.multiViewer.MultiViewer.vars"]], "fipy.viewers.test": [[430, "module-fipy.viewers.test"]], "fipy.viewers.testinteractive": [[431, "module-fipy.viewers.testinteractive"]], "tsvviewer (class in fipy.viewers.tsvviewer)": [[432, "fipy.viewers.tsvViewer.TSVViewer"]], "fipy.viewers.tsvviewer": [[432, "module-fipy.viewers.tsvViewer"]], "plot() (fipy.viewers.tsvviewer.tsvviewer method)": [[432, "fipy.viewers.tsvViewer.TSVViewer.plot"]], "plotmesh() (fipy.viewers.tsvviewer.tsvviewer method)": [[432, "fipy.viewers.tsvViewer.TSVViewer.plotMesh"]], "setlimits() (fipy.viewers.tsvviewer.tsvviewer method)": [[432, "fipy.viewers.tsvViewer.TSVViewer.setLimits"]], "title (fipy.viewers.tsvviewer.tsvviewer property)": [[432, "fipy.viewers.tsvViewer.TSVViewer.title"]], "vars (fipy.viewers.tsvviewer.tsvviewer property)": [[432, "fipy.viewers.tsvViewer.TSVViewer.vars"]], "abstractviewer (class in fipy.viewers.viewer)": [[433, "fipy.viewers.viewer.AbstractViewer"]], "fipy.viewers.viewer": [[433, "module-fipy.viewers.viewer"]], "plot() (fipy.viewers.viewer.abstractviewer method)": [[433, "fipy.viewers.viewer.AbstractViewer.plot"]], "plotmesh() (fipy.viewers.viewer.abstractviewer method)": [[433, "fipy.viewers.viewer.AbstractViewer.plotMesh"]], "setlimits() (fipy.viewers.viewer.abstractviewer method)": [[433, "fipy.viewers.viewer.AbstractViewer.setLimits"]], "title (fipy.viewers.viewer.abstractviewer property)": [[433, "fipy.viewers.viewer.AbstractViewer.title"]], "vars (fipy.viewers.viewer.abstractviewer property)": [[433, "fipy.viewers.viewer.AbstractViewer.vars"]], "vtkcellviewer (class in fipy.viewers.vtkviewer)": [[434, "fipy.viewers.vtkViewer.VTKCellViewer"]], "vtkfaceviewer (class in fipy.viewers.vtkviewer)": [[434, "fipy.viewers.vtkViewer.VTKFaceViewer"]], "vtkviewer() (in module fipy.viewers.vtkviewer)": [[434, "fipy.viewers.vtkViewer.VTKViewer"]], "fipy.viewers.vtkviewer": [[434, "module-fipy.viewers.vtkViewer"]], "plot() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[434, "fipy.viewers.vtkViewer.VTKCellViewer.plot"]], "plot() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[434, "fipy.viewers.vtkViewer.VTKFaceViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[434, "fipy.viewers.vtkViewer.VTKCellViewer.plotMesh"]], "plotmesh() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[434, "fipy.viewers.vtkViewer.VTKFaceViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[434, "fipy.viewers.vtkViewer.VTKCellViewer.setLimits"]], "setlimits() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[434, "fipy.viewers.vtkViewer.VTKFaceViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkcellviewer property)": [[434, "fipy.viewers.vtkViewer.VTKCellViewer.title"]], "title (fipy.viewers.vtkviewer.vtkfaceviewer property)": [[434, "fipy.viewers.vtkViewer.VTKFaceViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkcellviewer property)": [[434, "fipy.viewers.vtkViewer.VTKCellViewer.vars"]], "vars (fipy.viewers.vtkviewer.vtkfaceviewer property)": [[434, "fipy.viewers.vtkViewer.VTKFaceViewer.vars"]], "fipy.viewers.vtkviewer.test": [[435, "module-fipy.viewers.vtkViewer.test"]], "vtkcellviewer (class in fipy.viewers.vtkviewer.vtkcellviewer)": [[436, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer"]], "fipy.viewers.vtkviewer.vtkcellviewer": [[436, "module-fipy.viewers.vtkViewer.vtkCellViewer"]], "plot() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[436, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[436, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[436, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer property)": [[436, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer property)": [[436, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.vars"]], "vtkfaceviewer (class in fipy.viewers.vtkviewer.vtkfaceviewer)": [[437, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer"]], "fipy.viewers.vtkviewer.vtkfaceviewer": [[437, "module-fipy.viewers.vtkViewer.vtkFaceViewer"]], "plot() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[437, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[437, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[437, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer property)": [[437, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer property)": [[437, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.vars"]], "vtkviewer (class in fipy.viewers.vtkviewer.vtkviewer)": [[438, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer"]], "fipy.viewers.vtkviewer.vtkviewer": [[438, "module-fipy.viewers.vtkViewer.vtkViewer"]], "plot() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[438, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[438, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[438, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkviewer.vtkviewer property)": [[438, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkviewer.vtkviewer property)": [[438, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.vars"]], "appveyor": [[439, "term-AppVeyor"]], "azure": [[439, "term-Azure"]], "buildbot": [[439, "term-Buildbot"]], "circleci": [[439, "term-CircleCI"]], "continuous integration": [[439, "term-Continuous-Integration"]], "ipython": [[439, "term-IPython"]], "json": [[439, "term-JSON"]], "mpi": [[439, "term-MPI"]], "matplotlib": [[439, "term-Matplotlib"]], "mayavi": [[439, "term-MayaVi"], [439, "term-Mayavi"]], "numpy": [[439, "term-NumPy"]], "numeric": [[439, "term-Numeric"]], "openmp": [[439, "term-OpenMP"]], "pep 3000": [[439, "index-0"]], "petsc": [[439, "term-PETSc"]], "pyamg": [[439, "term-PyAMG"]], "pypi": [[439, "term-PyPI"]], "pytrilinos": [[439, "term-PyTrilinos"]], "pyrex": [[439, "term-Pyrex"]], "pysparse": [[439, "term-Pysparse"]], "python": [[439, "term-Python"]], "python 3": [[439, "term-Python-3"]], "pyxviewer": [[439, "term-PyxViewer"]], "scientificpython": [[439, "term-ScientificPython"]], "sphinx": [[439, "term-Sphinx"]], "travisci": [[439, "term-TravisCI"]], "trilinos": [[439, "term-Trilinos"]], "weave": [[439, "term-Weave"]], "windows": [[439, "term-Windows"]], "conda": [[439, "term-conda"]], "linux": [[439, "term-linux"]], "macos": [[439, "term-macOS"]], "mpi4py": [[439, "term-mpi4py"]], "numarray": [[439, "term-numarray"]], "pandas": [[439, "term-pandas"]], "petsc4py": [[439, "term-petsc4py"]], "pip": [[439, "term-pip"]], "pyamgx": [[439, "term-pyamgx"]], "package": [[447, "module-package"]], "package.subpackage": [[448, "module-package.subpackage"]], "base (class in package.subpackage.base)": [[449, "package.subpackage.base.Base"]], "method1() (package.subpackage.base.base method)": [[449, "package.subpackage.base.Base.method1"]], "method2() (package.subpackage.base.base method)": [[449, "package.subpackage.base.Base.method2"]], "package.subpackage.base": [[449, "module-package.subpackage.base"]], "object (class in package.subpackage.object)": [[450, "package.subpackage.object.Object"]], "method1() (package.subpackage.object.object method)": [[450, "package.subpackage.object.Object.method1"]], "method2() (package.subpackage.object.object method)": [[450, "package.subpackage.object.Object.method2"]], "package.subpackage.object": [[450, "module-package.subpackage.object"]]}})